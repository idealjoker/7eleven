#======================================================================
#                    D 7 1 1 . C O D E S T R U C T U R E A N A L Y S I S 
#                    doc: Sun Aug 25 10:59:34 2024
#                    dlm: Tue May 13 15:53:02 2025
#                    (c) idealjoker@mailbox.org
#                    uE-Info: 32 54 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	Aug 25, 2024: - exported from [D711.pm]
#				  - added support for [<>]RTS (LEXICAL LABELS)
#	Aug 27, 2024: - cs_while_loop disabled
#	Aug 28, 2024: - BUG: exit_from did not handle RTS and RTI correctly
#				  - BUG: branch_into did allow BSR
#	Sep  3, 2024: - BUG: _IF not correctly detected because of label test
#				  - BUG: branch_into_block needed separate block and search limits
#				  - BUG: nested loops did not work correctly
#				  - more bugs fixed
#	Sep  4, 2024: - allow exit to single target in loops
#	Sep 16, 2024: - BUG: local label detection did not work any more
#				  - added JMP to LEX_LABELS
#	Mar 11, 2025: - fiddled
#	Apr 24, 2025: - BUG: JMP/BRA exit from blocks was not tested
#				  - BUG: !$var =~ without parens!
#	Apr 25, 2025: - BUG: lexical labels (>RTS) were wrongly assigned on branches
#						 not to the nearest of the target
#	May  7, 2025: - BUG: lexical labels did not work correctly for Bad Cats
#	May 11, 2025: - adapted to new loop lexial labels
#	May 12, 2025: - BUG: same_block could return true even when there were
#						 gaps in the code
#	May 13, 2025: - BUG: optimizable jump to lexical labels was produced
#				  - BUG: gap check used wrong variable
# END OF HISTORY

#----------------------------------------------------------------------
# Code-Structure Processing
#----------------------------------------------------------------------

# determine whether two addresses are in the same code block, as follows:
#	- no, if start/end of block is beyond limits of enclosing block
#	- no, if there are intervening statements that are differenlty (less) indented
#	- no, if there is an exit in the block
#	- no, if there is a branch into the block
#	- no, if there are labels in the block (for this to work all labels need to be pre-defined see -l)

# routine adds to @LOOPSTART and @EXITLOOP, which must be defined as local by caller

sub same_block($$@)
{
	my($la,$ha,$if_block) = @_;														# low and high

##	local($trace) = ($la == 0x6D49 && $ha == 0x6D88) ? 1 : 0;						# SET TO TRACE IF AND LOOP BLOCK LOGIC
##	local($trace) = ($la == 0x6D50 && $ha == 0x6D6C) ? 1 : 0;						# SET TO TRACE IF AND LOOP BLOCK LOGIC

	my($block_ind) = $IND[$la];
	for (my($i)=0; $i<@{$EXTRA[$la]}; $i++) {
		next unless $EXTRA_IND[$la][$i] > 0;						# ignore dividers
		$block_ind = $EXTRA_IND[$la][$i] if ($EXTRA_IND[$la][$i] < $block_ind);
	}

	printf(STDERR "\nsame_block(%04X,%04X,if_block = $if_block)\ninside block limits?\n",$la,$ha,) if $trace;
#	print(STDERR "[block_ind = $block_ind ($OP[$la]/$EXTRA[$la][$#{$EXTRA[$la]}])]\n") if $trace;	
	my(@bb) = split(':',$BEGIN_BLOCK[$#BEGIN_BLOCK]);
	my(@eb) = split(':',$END_BLOCK[$#END_BLOCK]);
	my($good);
	for (my($i)=0; $i<@bb; $i++) {
		$good = 1 if ($la >= $bb[$i] && $ha <= $eb[$i]);
	}
	return 0 unless $good;		

	print(STDERR "yes\nanalysis gap in block?\n") if $trace;	# can happen with disassembler warnings
	for (my($a)=$la; $a<$ha; $a++) {
		return 0 unless $decoded[$a];
	}

	print(STDERR "no\nexit from block?\n") if $trace;
	return 0 if exit_from_block($la,$ha,$if_block);

	print(STDERR "no\nbranch into block?\n") if $trace;
	if ($if_block == 2) {										# _ELSE block
		return 0 if branch_into_block($la,$ha-2,$la,$ha,1);		# 1 required for IF to ELSE
	} elsif ($if_block == 1) {									# _IF block
		return 0 if branch_into_block($la,$ha-2,$la,$ha,0);					
    } else {													# _LOOP block
		return 0 if branch_into_block($la+2,$ha,$la,$ha,0);		# allowing entry into loop is not good
	}

	print(STDERR "no\nchecking labels...\n") if $trace;
	for (my($a)=$la; $a<$ha; $a++) {
		if ($if_block == 2 || $a > $la) {						# BRA at start of _IF and _LOOP blocks can have labels
			printf(STDERR "addr = %04X; non-local LBL defined? [$LBL[$a]]\n",$a) if $trace;
			printf(STDERR "%d && %d && %d && %d (%d,%d)??\n",
							defined($LBL[$a]),!($LBL[$a] =~ m{^([0-9A-F]{2}:)?\.}),substr($LBL[$a],0,1) ne '.',
							!($OP[$a-3] eq 'JMP' && hex(substr($OPA[$a-3][0],1,4)) == $a),
							$OP[$a-3] eq 'JMP',hex(substr($OPA[$a-3][0],1,4)) == $a
				  )
				if $trace;
			return 0 if defined($LBL[$a])
						&& !($LBL[$a] =~ m{^([0-9A-F]{2}:)?\.}) 
						&& substr($LBL[$a],0,1) ne '.'											# allow local labels inside blocks
						&& !($OP[$a-3] eq 'JMP' && hex(substr($OPA[$a-3][0],1,4)) == $a);		# allow &skip inside blocks
			printf(STDERR "no. non-local AUTO_LBL (= $AUTO_LBL[$a], _cur_RPG = %02X) defined?\n",$_cur_RPG) if $trace;
			printf(STDERR "[$OP[$a-3] $OPA[$a-3][0]]\n") if $trace;
			return 0 if defined($AUTO_LBL[$a]) && substr($AUTO_LBL[$a],0,1) ne '.'				# non local label exists
							&& !($OP[$a-3] eq 'JMP' && hex(substr($OPA[$a-3][0],1,4)) == $a);	# ... and it's not part of a &skip
		}
    }

	print(STDERR "no\nindentation okay?\n") if $trace;
	my($lopa) = $if_block ? $ha-1 : $ha;						# _IF _ENDIF has ha at the first OP afer the if
	while (!defined($OP[$lopa])) { $lopa--; }
	printf(STDERR "[%04X: $OP[$lopa] @{$OPA[$lopa]} ind=$IND[$lopa] vs block_ind=$block_ind\n",$lopa) if $trace;
	return 0 unless ($IND[$lopa] == $block_ind);

	printf(STDERR "indentation okay. LBL at ha?\n") if $trace;
##	return 0 if defined($LBL[$ha]);
	print(STDERR "ignored\n") if $trace && defined($LBL[$ha]);	# necessary for trace((508D,509E)
	print(STDERR "no. OP[ha] defined?\n") if $trace;
	next unless defined($OP[$ha]);

	print(STDERR "yes. checking indentation at end of block ($if_block/$IND[$ha]/$block_ind//$EXTRA[$ha][0]/$EXTRA_IND[$ha][0]\n") if $trace;
	return 0 unless ($IND[$ha] == $block_ind) ||
					(defined($EXTRA_IND[$ha][0]) && $block_ind == $EXTRA_IND[$ha][0]) ||				# needed e.g. for loop abutting if (T2 31:6481)
					($if_block && (($block_ind == $EXTRA_IND[$ha][0]+1 && $EXTRA[$ha][0] eq '_ENDIF') ||
				    			   ($block_ind == $IND[$ha]+1 && $OP[$ha] eq '_ELSE')));
	return 0 if ( $EXTRA[$ha][0] && !$EXTRA_BEFORE_LABEL[$ha][0] && $EXTRA_IND[$ha][0] != $block_ind && $EXTRA[$ha][0] ne '_ENDIF') ||
			    (!$EXTRA[$ha][0] && $IND[$ha] != $block_ind && $OP[$ha] ne '_ELSE');
	
	print(STDERR "all good. returning 1\n") if $trace;
	return 1;
}

# finds exits from block

sub exit_from_block($$$)
{
	my($la,$ha,$if_block) = @_;
	my($allowed);																	# exits to single target allowed in loops
	
	ADDRESS: for (my($a)=$la; $a<=$ha; $a++) {
		next unless defined($OP[$a]);
		printf(STDERR "\t%04X: $OP[$a] $OPA[$a][0] (%04X,%04X)\n",$a,$la,$ha)
			if $trace;

		my($trg);
		if (defined($OPA[$a][0])) {
			$trg = $OPA[$a][0];
			$trg = hex($1) if ($trg =~ m{^\$([0-9A-F]{4})$});
			next unless numberp($trg);												# LOOPS already decoded => BRA to _ExitLoop and _NextLoop are okay
		}

		if ($if_block) {															# _IF/_ELSE/_ENDIF
        	print(STDERR "\ttesting for JMP outside if-block...\n") if $trace;
        	if ($a<$ha && isMember($OP[$a],'JMP')) {								# _IF/_ENDIF has $ha at _ENDIF where first stmt outside if is
        		my($trg) = $OPA[$a][0];
        		$trg = hex($') if ($trg =~ m{^\$});
        		return 1 if (numberp($trg) && ($trg<$la || $trg>$ha));
        	}
			next unless ($OP[$a] =~ m{^L?B..$}  && !($OP[$a] =~ m{^L?BSR$}));		# not an exit unless it's a branch
        	print(STDERR "\thandling branches...\n") if $trace;
			next if $LEX_LABEL[$trg];												# not an exit if it's a branch to a nearby RTS
			if ($if_block == 1) {													# _IF/_ELSE or _IF/_ENDIF
				next if $a == $la;													# _IF always starts with conditional branch
				if ($a < $ha-2) {											
					if ($trg<$la || $trg>$ha) {	
						printf(STDERR "\t%04X: $OP[$a] $OPA[$a][0] (%04X,%04X) -- trg = %04X\n",$a,$la,$ha,$trg)
							if $trace;
						return 1;
	            	}
	            } else {															# BRA is allowed as last statement because of _ELSE, 
	            	return 1 unless ($OP[$a] =~ m{L?BRA});							# ... but must be caught by cs_if_else
				}
			} elsif ($if_block == 2) {												# _ELSE/_ENDIF
###				WITH THE FOLLOWING CODE ENABLED, NO BRA ARE ALLOWED IN ELSE BLOCKS.
###				WITH THE CODE DISABLED, BRAs and conditional BRAs are allowed to _ENDIF
###				if ($OP[$a] =~ m{L?BRA}) {	
###					printf(STDERR "%04X: $OP[$a] $OPA[$a][0] (%04X,%04X) -- trg = %04X\n",$a,$la,$ha,$trg)
###						if $trace;
###					return 1;
###				}
				if ($trg<$la || $trg>$ha) {
					printf(STDERR "%04X: $OP[$a] $OPA[$a][0] (%04X,%04X) -- trg = %04X\n",$a,$la,$ha,$trg)
						if $trace;
					return 1;
	            }
			}
	    } else {																	# _LOOP
        	print(STDERR "\ttesting for BRA/JMP outside loop...\n") if $trace;
        	if (isMember($OP[$a],'BRA','JMP')) {
        		my($trg) = $OPA[$a][0];
        		$trg = hex($') if ($trg =~ m{^\$});
        		return 1 if (numberp($trg) && ($trg<$la || $trg>$ha));
        	}
        	print(STDERR "\ttesting for RTS, RTI...\n") if $trace;
        	return 1 if isMember($OP[$a],'RTS','RTI');								# RTS, RTI are exits
        	return 1 if $OP[$a] =~ m{^PUL} && $OPA[$a][0] =~ m{PC$};				# PUL? PC is another form of RTS
        	print(STDERR "\ttesting for !exitThread...\n") if $trace;
        	return 1 if $OP[$a] eq '!' && hex(substr($OPA[$a][0],1,4)) == $Lbl{'exitThread'};		# !exitThread is an exit
##			die("$OP[$a] $OPA[$a][0] (== $Lbl{'exitThread'}") if $a == 0x5C58;						

			next unless ($OP[$a] =~ m{^L?B..$} && !($OP[$a] =~ m{^L?BSR$})); 		# branches may be exits (NB: >RTS and <RTS are not!!!)

			unless ($IND[$a] == $IND[$ha]) {										# branches are always exit if they are at a different indentation
				$allowed = $trg unless defined($allowed);							#	(this prevents branches to EXITLOOP of outer loop)
				next if $trg == $allowed;
				printf(STDERR "\t%04X: $OP[$a] $OPA[$a][0] (%04X,%04X) -- trg = %04X, allowed = %04X (indentation bad)\n",$a,$la,$ha,$trg,$allowed)
					if $trace;
				return 1;
			} else {
				push(@LOOPSTART,$a),next if ($trg == $la);							# <NEXTLOOP
				push(@EXITLOOP,$a),next if ($trg == $ha+2); 						# >EXITLOOP
				if ($trg<$la || $trg>$ha) {
					printf(STDERR "\t%04X: $OP[$a] $OPA[$a][0] (%04X,%04X) -- trg = %04X, allowed = %04X (indentation ok)\n",$a,$la,$ha,$trg,$allowed)
						if $trace;
					$allowed = $trg unless defined($allowed);
					next if $trg == $allowed;
					return 1;
	            }
	        }
		}			
	}
	return undef;																	# no exit in block found
}

sub branch_into_block($$@)
{
	my($la,$ha,$sla,$sha,$allowed_branch) = @_;

	my($addr) = $sla;
	while ($la-(--$addr) <= 128) {
		next unless defined($OP[$addr]) && $OP[$addr] =~ m{^B..$};					# only consider regular (short) branches
		my($trg) = $OPA[$addr][0];
		next if isMember($trg,'<NEXTLOOP','>EXITLOOP');
		$trg = hex($1) if ($trg =~ m{^\$([0-9A-F]{4})$});
		die("$OP[$addr] $OPA[$addr][0]") unless numberp($trg);
		next if hex(substr($OPA[$trg][0],1,4)) == $Lbl{exitThread};
		
		printf(STDERR "\t%04X: $OP[$addr] $OPA[$addr][0]\n",$addr) if $trace;
		if ($trg >= $la && $trg <= $ha) {
			printf(STDERR "\t<%04X> %04X:%04X:%04X $allowed_branch\n",$addr,$la,$trg,$ha)
				if $trace;
			next if $allowed_branch--;
			return 1;
		}
	}

	$addr = $sha;
	while ((++$addr)-$ha <= 128) {
		next unless defined($OP[$addr]) && $OP[$addr] =~ m{^B..$};
		my($trg) = $OPA[$addr][0];
		$trg = hex($1) if ($trg =~ m{^\$([0-9A-F]{4})$});
		next if isMember($trg,'<NEXTLOOP','>EXITLOOP');
		next if $trg =~ m{^[<>]};													# allow lexical branches
		if ($trg >= $la && $trg <= $ha) {
			printf(STDERR "\t<%04X> %04X:%04X:%04X $allowed_branch\n",$addr,$la,$trg,$ha)
				if $trace;
			return 1;
		}
	}

	return undef;	
}

#----------------------------------------------------------------------

sub cs_loop_while($$$$$)
{
	my($addr,$saddr,$branch_op,$loop_op,$endloop_op) = @_;
    
	if ($OP[$addr] eq $branch_op) { 												# initial BRA at the end of the loop
		local(@LOOPSTART,@EXITLOOP);
		my($trg) = ($OPA[$addr][$#{$OPA[$addr]}] =~ m{\$([0-9A-Fa-f]+)$});
		$trg = hex($trg);
		if (($trg < $addr) && ($trg >= $saddr)										# target is earlier in same enclosing block
				&& same_block($trg,$addr,0)									 		# ... and at the same indentation
				&& !($OP[$trg] =~ m{^_})											# ... and not a macro (there can be confusion)
				&& !defined($NoLoop{$trg})) {										# ... and has not been excempted from loops
			push(@{$EXTRA[$trg]},$loop_op);											# needs to be push, not unshift for AP:635A
			push(@{$EXTRA_IND[$trg]},$IND[$trg]);
			push(@{$EXTRA_BEFORE_LABEL[$trg]},0);
			push(@{$EXTRA_AFTER_OP[$trg]},0);
			$OP[$addr] = $endloop_op; pop(@{$OPA[$addr]});
			$IND[$trg]++;
			for (my($a)=$trg+1; $a<$addr; $a++) {
				$IND[$a]++;
				for (my($i)=0; $i<@{$EXTRA[$a]}; $i++) {
					$EXTRA_IND[$a][$i]++;
				}
			}
			push(@BEGIN_BLOCK,$trg);
			push(@END_BLOCK,$addr);
			foreach my $a (@LOOPSTART) { $OPA[$a][0] = '<NEXTLOOP' if defined($OPA[$a][0]); }
			foreach my $a (@EXITLOOP) { $OPA[$a][0] = '>EXITLOOP' if defined($OPA[$a][0]); }
			return 1;
		}
	}
	return 0;
}

# more complex loop with test at beginning, and BRA back to test at end of block
if (0) {
sub cs_while_loop($$$$$$)
{
	my($addr,$eaddr,$test_op,$branch_op,$loop_op,$endloop_op) = @_;

	if ($OP[$addr] eq $test_op) {
		local(@LOOPSTART,@EXITLOOP);
		my($endloop_trg) = ($OPA[$addr][$#{$OPA[$addr]}] =~ m{\$([0-9A-Fa-f]+)$});
		$endloop_trg = hex($endloop_trg);
		if (($endloop_trg > $addr) && ($endloop_trg <= $eaddr)
				&& same_block($addr,$endloop_trg,0)
				&& !($OP[$endloop_trg] =~ m{^_})
				&& !defined($NoLoop{$addr})) {
			if ($OP[$endloop_trg-2] eq $branch_op) {
				 my($loop_trg) = ($OPA[$trg-2][$#{$OPA[$trg-2]}] =~ m{\$([0-9A-Fa-f]+)$});
				 $loop_trg = hex($loop_trg);
				 if ($loop_trg == $addr) {
					$OP[$addr] = $loop_op; pop(@{$OPA[$addr]});
					$OP[$endloop_trg-2] = undef; undef(@{$OPA[$addr]});
					unshift(@{$EXTRA[$endloop_trg]},$endloop_op);
					unshift(@{$EXTRA_IND[$endloop_trg]},$IND[$endloop_trg]);
					unshift(@{$EXTRA_BEFORE_LABEL[$endloop_trg]},1);
					unshift(@{$EXTRA_AFTER_OP[$endloop_trg]},0);
					$IND[$endloop_trg]++;
					for (my($a)=$addr+1; $a<$endloop_trg; $a++) {
						$IND[$a]++;
						for (my($i)=0; $i<@{$EXTRA[$a]}; $i++) {
							$EXTRA_IND[$a][$i]++;
						}
					} # indent loop
					push(@BEGIN_BLOCK,$addr);
					push(@END_BLOCK,$endloop_trg);
					foreach my $a (@LOOPSTART) { $OPA[$a][0] = '<NEXTLOOP' if defined($OPA[$a][0]); }
					foreach my $a (@EXITLOOP) { $OPA[$a][0] = '>EXITLOOP' if defined($OPA[$a][0]); }
					return 1;
				 } # found a loop
			} # found a BRA statement at end of loop body
		} # initial BRA is forward, not too far, and in same block
	}
	return 0;
}
} # code disabled
					    
# if-else
sub cs_if_else($$$$$$$)
{
	my($addr,$eaddr,$test_op,$branch_op,$if_op,$else_op,$endif_op) = @_;

	if ($OP[$addr] eq $test_op) {											# conditional BRA...
		my($else_trg) = ($OPA[$addr][$#{$OPA[$addr]}] =~ m{\$([0-9A-Fa-f]+)$});
		$else_trg = hex($else_trg);

		my($rv);
		if (($else_trg > $addr) && ($else_trg <= $eaddr) && 				# ... that is forward and...
				same_block($addr,$else_trg,1)) {							# ... in same block => IF
			print(STDERR "($OP[$else_trg-2] eq $branch_op)?\n") if $trace;
			if ($OP[$else_trg-2] eq $branch_op) {							# unconditional BRA before ELSE target...
				my($endif_trg) = ($OPA[$else_trg-2][$#{$OPA[$else_trg-2]}] =~ m{\$([0-9A-Fa-f]+)$});
				$endif_trg = hex($endif_trg);
				if (($endif_trg > $else_trg) && ($endif_trg <= $eaddr) &&	# ... that is forward and...
							same_block($else_trg,$endif_trg,2)) {			# ... in same block => IF-ELSE-ENDIF
					$OP[$addr]		 = $if_op;	 pop(@{$OPA[$addr]});		# IF replaces initial conditional BRA
					$OP[$else_trg-2] = $else_op; pop(@{$OPA[$else_trg-2]});	# ELSE replaces unconditional BRA
					unshift(@{$EXTRA[$endif_trg]},$endif_op);				# insert ENDIF
					unshift(@{$EXTRA_IND[$endif_trg]},$IND[$addr]);
					unshift(@{$EXTRA_BEFORE_LABEL[$endif_trg]},1);
					unshift(@{$EXTRA_AFTER_OP[$endif_trg]},0);
					for (my($a)=$addr+1; $a<$else_trg-2; $a++) {			# indent THEN block
						$IND[$a]++;
						for (my($i)=0; $i<@{$EXTRA[$a]}; $i++) {
							$EXTRA_IND[$a][$i]++;
						}
					}
					for (my($a)=$else_trg; $a<$endif_trg; $a++) {			# indent ELSE block
						$IND[$a]++;
						for (my($i)=0; $i<@{$EXTRA[$a]}; $i++) {
							$EXTRA_IND[$a][$i]++;
						}
					}
					push(@BEGIN_BLOCK,"$addr:$else_trg");
					push(@END_BLOCK,"$else_trg:$endif_trg");
#					push(@BEGIN_BLOCK,$else_trg);
#					push(@END_BLOCK,$endif_trg);
					return 1;
##				}  else { 													
##					return 0;												# not a legal ELSE-forward branch => not a
				}															# ... legal _IF block (there is an exit)
			} # if BRA at end of IF-bloc														    
																			# no BRA at end of IF block => no ELSE
			$OP[$addr] = $if_op; pop(@{$OPA[$addr]});						# IF replaces initial conditional BRA
			unshift(@{$EXTRA[$else_trg]},$endif_op);						# insert ENDIF
			unshift(@{$EXTRA_IND[$else_trg]},$IND[$addr]);
			unshift(@{$EXTRA_BEFORE_LABEL[$else_trg]},1);
			unshift(@{$EXTRA_AFTER_OP[$else_trg]},0);

			for (my($a)=$addr+1; $a<$else_trg; $a++) {						# indent THEN block
				$IND[$a]++;
				for (my($i)=0; $i<@{$EXTRA[$a]}; $i++) {
					$EXTRA_IND[$a][$i]++;
				}
			}
			push(@BEGIN_BLOCK,$addr);
			push(@END_BLOCK,$else_trg);
			return 1;
		} # if valid conditional forward BRA
	} # if statement is conditional BRA
	return 0;
}
					    
sub process_code_structure($$)
{
	my($saddr,$eaddr) = @_;

	#------------------------------------------------------------
	# STEP 0: Lexical Branch Labels 
	#	- done first to ensure that branches like BRA >RTS
	#	  are known during loop and if-then processing
	#	- labels are not actually defined, because many of them
	#	  will be _ENDIF labels, for example
	#	- local variable @LEX_LABEL required
	#------------------------------------------------------------

	my($nLex,$RTSa,$ETa);
	local(@LEX_LABEL);
	for (my($addr)=$eaddr; $addr>=$saddr; $addr--) {						# >RTS
		next unless defined($OP[$addr]);									# skip addresses w/o operations

		$RTSa=$addr,next if ($OP[$addr] eq 'RTS');
		next unless defined($RTSa);											# do not continue unless there is an address
		next if ($OP[$addr] =~ m{L?BSR}) ||									# skip non-branch/jump operations
					!($OP[$addr] =~ m{L?B..$});
##					!($OP[$addr] =~ m{L?B..$} || $OP[$addr] eq 'JMP');

		my($trg) = ($OPA[$addr][$#{$OPA[$addr]}] =~ m{\$([0-9A-Fa-f]+)$});	# skip branch ops that do not target closest RTS
		$trg = hex($trg);
		die unless numberp($trg);
		next unless ($trg == $RTSa);

		if (substr($OP[$addr],0,1) eq 'L') {								# skip branch ops that are too far away
			next if ($trg > $addr+32768);
		} else {
			next if ($trg > $addr+128);
		}
##		if ($addr == 0x629A && $trg == 0x62BA) { die; }
			     
		$LEX_LABEL[$trg] = '>RTS';											# otherwise, we have a valid lexical label
		$nLex++;
	}
	for (my($addr)=$eaddr; $addr>=$saddr; $addr--) {						# >!exitThread (LEXICAL BRANCH)
		next unless defined($OP[$addr]);									# skip addresses w/o operations

		$ETa=$addr,next if ($OP[$addr] eq '!') && hex(substr($OPA[$addr][0],1,4)) == $Lbl{exitThread};
		next unless defined($ETa);											# do not continue unless there is an address
		next if ($OP[$addr] =~ m{L?BSR}) ||									# skip non-branch/jump operations
					!($OP[$addr] =~ m{L?B..$});
##					!($OP[$addr] =~ m{L?B..$} || $OP[$addr] eq 'JMP');

		my($trg) = ($OPA[$addr][$#{$OPA[$addr]}] =~ m{\$([0-9A-Fa-f]+)$});	# skip branch ops that do not target an !exitThread
		$trg = hex($trg);
		die unless numberp($trg);
		next unless ($trg == $ETa);

		if (substr($OP[$addr],0,1) eq 'L') {								# skip branch ops that are too far away
			next if ($trg > $addr+32768);
		} elsif (substr($OP[$addr],0,1) eq 'B') {
			next if ($trg > $addr+128);
		} 
#		die("$trg,$addr,$OP[$trg]") if $addr == 0x4FD9 && $_cur_RPG == 0x31;
			     
		$LEX_LABEL[$trg] = '>!exitThread';									# otherwise, we have a valid lexical label
		$nLex++;
	}
	undef($RTSa);
	for (my($addr)=$saddr; $addr<=$eaddr; $addr++) {						# <RTS
		next unless defined($OP[$addr]);									# skip addresses w/o operations

		$RTSa=$addr,next if ($OP[$addr] eq 'RTS');
		next unless defined($RTSa);											# do not continue unless there is an address
		next if ($OP[$addr] =~ m{L?BSR}) || !($OP[$addr] =~ m{L?B..$});		# skip non-branch operations

		my($trg) = ($OPA[$addr][$#{$OPA[$addr]}] =~ m{\$([0-9A-Fa-f]+)$});	# skip branch ops that do not target an RTS
		$trg = hex($trg);
		die unless numberp($trg);
		next unless ($trg == $RTSa);

		if (substr($OP[$addr],0,1) eq 'L') {								# skip branch ops that are too far away
			next if ($trg < $addr-32767);
		} else {
			next if ($trg < $addr-127);
		}
			     
		$LEX_LABEL[$trg] = '<RTS';											# otherwise, we have a valid lexical label
		$nLex++;
	}
#	print(STDERR "$nLex lexical labels found\n");
	

	#------------------------------------------------------------
	# STEP 1: Loops
	#	- done next to ensure that >EXITLOOP and <NEXTLOOP branches
	#	  are defined for if-then-else processing
	#	- local variables @BEGIN_BLOCK and @END_BLOCK required
	#------------------------------------------------------------

	local(@BEGIN_BLOCK,@END_BLOCK);
	push(@BEGIN_BLOCK,$saddr);															
	push(@END_BLOCK,$eaddr);
	for (my($addr)=$saddr; $addr<=$eaddr; $addr++) {
		if ($addr >= @END_BLOCK[$#END_BLOCK]) {												# end current block
			pop(@BEGIN_BLOCK); pop(@END_BLOCK);
		}
		next unless defined($OP[$addr]);
		next if defined($unstructured[$addr]);

##
##		WHILE LOOPS DISABLED Aug 27, 2024 BECAUSE THEY ARE EITHER USED VERY RARELY OR THIS
##		CODE IS NOT WORKING.
##
##		next if cs_while_loop($addr,$eaddr,'BNE','BRA','_UNTIL_NE','_ENDLOOP'); 			# Assembler loops
##		next if cs_while_loop($addr,$eaddr,'BEQ','BRA','_UNTIL_EQ','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BLE','BRA','_UNTIL_LE','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BGE','BRA','_UNTIL_GE','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BLT','BRA','_UNTIL_LT','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BGT','BRA','_UNTIL_GT','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BHI','BRA','_UNTIL_HI','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BLS','BRA','_UNTIL_LS','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BCC','BRA','_UNTIL_CC','_ENDLOOP'); 	    
##		next if cs_while_loop($addr,$eaddr,'BCS','BRA','_UNTIL_CS','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BVC','BRA','_UNTIL_VC','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BVS','BRA','_UNTIL_VS','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BMI','BRA','_UNTIL_MI','_ENDLOOP');
##		next if cs_while_loop($addr,$eaddr,'BPL','BRA','_UNTIL_PL','_ENDLOOP');

		unless (defined($_cur_RPG)) {
			next if cs_loop_while($addr,$saddr,'branch','_Loop','_EndLoop');					# WVM loops 
			next if cs_loop_while($addr,$saddr,'branchIf','_Loop','_While');
			next if cs_loop_while($addr,$saddr,'branchUnless','_Loop','_Until');
		}

		next if cs_loop_while($addr,$saddr,'BRA','_LOOP','_ENDLOOP');						# Assembler loops
		next if cs_loop_while($addr,$saddr,'BLE','_LOOP','_WHILE_LE');
		next if cs_loop_while($addr,$saddr,'BGE','_LOOP','_WHILE_GE');
		next if cs_loop_while($addr,$saddr,'BLT','_LOOP','_WHILE_LT');
		next if cs_loop_while($addr,$saddr,'BGT','_LOOP','_WHILE_GT');
		next if cs_loop_while($addr,$saddr,'BEQ','_LOOP','_WHILE_EQ');
		next if cs_loop_while($addr,$saddr,'BNE','_LOOP','_WHILE_NE');
		next if cs_loop_while($addr,$saddr,'BHI','_LOOP','_WHILE_HI');
		next if cs_loop_while($addr,$saddr,'BLS','_LOOP','_WHILE_LS');
		next if cs_loop_while($addr,$saddr,'BCC','_LOOP','_WHILE_CC');			
		next if cs_loop_while($addr,$saddr,'BCS','_LOOP','_WHILE_CS');
		next if cs_loop_while($addr,$saddr,'BVC','_LOOP','_WHILE_VC');
		next if cs_loop_while($addr,$saddr,'BVS','_LOOP','_WHILE_VS');
		next if cs_loop_while($addr,$saddr,'BMI','_LOOP','_WHILE_MI');
		next if cs_loop_while($addr,$saddr,'BPL','_LOOP','_WHILE_PL');

	}
	die if (@BEGIN_BLOCK);

	#------------------------------------------------------------
	# STEP 2: If-Then-Else
	#	- requires _ExitLoop and _Loopstart branches from loop
	#	  processing
	#------------------------------------------------------------

	push(@BEGIN_BLOCK,$saddr);
	push(@END_BLOCK,$eaddr);
	for (my($addr)=$saddr; $addr<=$eaddr; $addr++) {
		if ($addr >= @END_BLOCK[$#END_BLOCK]) {												# end current block
			pop(@BEGIN_BLOCK); pop(@END_BLOCK);
		}
		next unless defined($OP[$addr]);
		next if defined($unstructured[$addr]);

		next if cs_if_else($addr,$eaddr,'BNE','BRA','_IF_EQ','_ELSE','_ENDIF');				# M6800 if-statements
		next if cs_if_else($addr,$eaddr,'BEQ','BRA','_IF_NE','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BLT','BRA','_IF_GE','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BGT','BRA','_IF_LE','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BLE','BRA','_IF_GT','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BGE','BRA','_IF_LT','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BHI','BRA','_IF_LS','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BLS','BRA','_IF_HI','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BCC','BRA','_IF_CS','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BCS','BRA','_IF_CC','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BVC','BRA','_IF_VS','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BVS','BRA','_IF_VC','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BPL','BRA','_IF_MI','_ELSE','_ENDIF');
		next if cs_if_else($addr,$eaddr,'BMI','BRA','_IF_PL','_ELSE','_ENDIF');

		unless (defined($_cur_RPG)) {
			next if cs_if_else($addr,$eaddr,'branchUnless','branch','_If','_Else','_EndIf');	# WVM if-statements
			next if cs_if_else($addr,$eaddr,'branchIf','branch','_Unless','_Else','_EndUnless');
			next if cs_while_loop($addr,$eaddr,'branchIf','branch','_Until','_EndLoop');		# WVM loops
			next if cs_while_loop($addr,$eaddr,'branchUnless','branch','_While','_EndLoop');
		}

	}
	die if (@BEGIN_BLOCK);

	#------------------------------------------------------------
	# STEP 3: Substitute Lexical Labels
	# 	This code may not work correctly if there is a branch to
	#   an RTS which happens to be the target of a different lexical
	#   branch. The two checks marked with (*) are there to minimize
	#   this probability but it does not completely avoid it.
	#------------------------------------------------------------

	for (my($addr)=$saddr; $addr<=$eaddr; $addr++) {
##		next unless (($OP[$addr] eq 'JMP' || $OP[$addr] =~ m{^L?B..$}) && !($OP[$addr] =~ m{^L?BSR$}));
		next unless ($OP[$addr] =~ m{^L?B..$}) && !($OP[$addr] =~ m{^L?BSR$});
		my($trg) = ($OPA[$addr][0] =~ m{\$([0-9A-Fa-f]+)$});	
		$trg = hex($trg);
		die unless numberp($trg);

		next unless $LEX_LABEL[$trg];
		next if ($trg>$addr && substr($LEX_LABEL[$trg],0,1) ne '>');
		next if ($trg<$addr && substr($LEX_LABEL[$trg],0,1) ne '<');
		$OPA[$addr][0] = $LEX_LABEL[$trg];
    }
}


#sub undo_code_structure($$$)																# called for labels inside code structure
#{
#	my($F,$lbl_addr,$ind) = @_;
#
##	printf(STDERR "$LBL[$lbl_addr] @ %04X\n",$lbl_addr);
#
#	my($a) = $lbl_addr;																		# search backward, marking if, until and while
#	my($min_ind) = $ind;
#	while (1) {	
#		$a--;
#		next unless defined($OP[$a]);
#		next if ($OP[$a] eq '_ELSE' || $OP[$a] eq '_Else');
#		next if ($IND[$a] >= $min_ind);
#		if (($OP[$a] =~ m{^_IF}) 	|| ($OP[$a] =~ m{^_If}) ||
#			($OP[$a] =~ m{^_UNTIL}) || ($OP[$a] =~ m{^_Until}) ||
#			($OP[$a] =~ m{^_While}) || ($OP[$a] =~ m{^_Unless})) {
#				printf($F "\$unstructured[0x%04X] = 1;\n",$a);
#				$min_ind = $IND[$a] if ($IND[$a] > $code_base_indent);
#				next;
#		}
#		last if ($IND[$a] == $code_base_indent);
#	}
#
#	$a = $lbl_addr;	$min_ind = $ind;														# search forward, marking until, until and while
#	while (1) {	
#		$a++;
#		next unless defined($OP[$a]);
#		next if ($OP[$a] eq '_ELSE' || $OP[$a] eq '_Else');
#		next if ($IND[$a] >= $min_ind);
#		if (($OP[$a] =~ m{^_ENDLOOP}) || ($OP[$a] =~ m{^_EndLoop}) ||
#			($OP[$a] =~ m{^_WHILE})   || ($OP[$a] =~ m{^_While}) ||
#			($OP[$a] =~ m{^_Until}) || ($OP[$a] =~ m{^_Unless})) {
#				printf($F "\$unstructured[0x%04X] = 1;\n",$a);
#				$min_ind = $IND[$a] if ($IND[$a] > $code_base_indent);
#				next;
#		}
#		last if ($IND[$a] == $code_base_indent);
#	}
#}

1;
