#======================================================================
#                    C 7 1 1 . S Y S T E M 6 
#                    doc: Mon Jun  2 09:55:01 2025
#                    dlm: Thu Jul  3 10:36:45 2025
#                    (c) 2025 idealjoker@mailbox.org
#                    uE-Info: 25 0 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	Jun  2, 2025: - created
#	Jun 16, 2025: - added compile_pragma()
#	Jul  3, 2025: - added compilation_magic()
# HISTORY END

use strict vars;

our(%SYSCALL,@SC_ADDR,@SC_ARGS,@SC_NOTE,$ADDR,$MODE,@OP_ARG,$OP,@ROM, @OP, %ALIAS);

#----------------------------------------------------------------------
# Compilation Magic
#----------------------------------------------------------------------

sub compilation_magic() {}

sub unroll_structure()
{
	unroll_asm_structure();													# in [C711.M6800]
}


sub asm_macros()
{
	if ($MODE==0 || $MODE==1) {
		if ($OP eq '_SwitchScriptConfig') {
			set_label_type(0);

			my($cfg) = 0x00;
			my($startAddr) = $ADDR++;

			foreach my $arg (@OP_ARG) {
				if ($arg =~ m/Ext/) {
					$cfg |= 0b00000001;
				}
				elsif ($arg =~ m/SolInTilt/) {
					$cfg |= 0b00000010;
				}
				elsif ($arg =~ m/Debounce\((\$?[\dA-Fa-f]{1,2})(-ms|-tics)\)/) {
					if ($cfg & 0b1000) { die("Syntax: _SwitchScriptConfig Debounce() must come before Fire() at input line $.\n"); }
					$cfg |= 0b00000100;
					my($val) = ($1 =~ m{^\$}) ? hex($1) : $1;
					$ROM[$ADDR++] = ($2 eq '-ms') ? $val / 16 : $val;
				}
				elsif ($arg =~ /^Fire\(([^,]*)(,(\$?[\dA-Fa-f]{1,2})(-ms|-tics))?\)$/) {
					$cfg |= 0b00001000;
					$ROM[$ADDR++] = $1;
					my($delay) = ($3 =~ m{^\$}) ? hex($3) : $3;
					$ROM[$ADDR++] = defined($2)? (($4 eq '-ms') ? $delay / 16 : $delay) : 0;
				}
				elsif ($arg =~ /^After\((\$?[\dA-Fa-f]{1,2})(-ms|-tics)\)$/) {
					if (!($cfg & 0b1000)) { die("Syntax: _SwitchScriptConfig Fire() must come before After() at input line $.\n"); }
					my($units) = $2;
					my($delay) = ($1 =~ m{^\$}) ? hex($1) : $1;
					$ROM[$ADDR-1] = ($units eq '-ms') ? $delay / 16 : $delay;
				}
				elsif ($arg =~ m/Ops\((\d{1,2})\)/) {
					my($val) = ($1 =~ m{^\$}) ? hex($1) : $1;
					die("invalid _SwitchScriptConfig Ops count ($1) at input line $.\n")
						unless numberp($val) && $val>=0 && $val<=15; 
					$cfg |= $val << 4;
				}
				else {
					die("Syntax Error on '$arg' at input line $.\n Usage: _SwitchScriptConfig Ext SolInTilt Debounce(-ms|-tics) Fire(SolCmd) After(-ms|-tics) Ops:(<1-15>)\n");
				}
			}

			$ROM[$startAddr] = $cfg; 																# .DB xx
			$MODE=0,return 1;
		}
		if ($OP =~ /^_ExtendedScript[\w\\]*$/) {
			set_label_type(0);
			my($startAddr) = $ADDR;
			$ROM[$ADDR++] = 0; 																# .DB xx
			$ROM[$ADDR++] = 0; 																# .DB xx
			$ROM[$ADDR++] = 0; 																# .DB xx
			$ROM[$ADDR++] = 1; 																# .DB xx

			my($i)=0;
			for (; $i<@OP_ARG; ) {	
				my($arg) = $OP_ARG[$i++];
				# print(STDERR "arg $i: '$arg', ");
				if ($arg =~ /^If(Not)?\(([^\)]+)\)\{?$/) {
					my($cond) = $2;
					$cond = $ALIAS{$cond} if defined($ALIAS{$cond});
					if ($1) {
						$cond |= 0b10000000;
					}
					$ROM[$startAddr+0] = $cond;
				}
				elsif ($arg =~ /^\{\}?/) {}
				elsif ($arg eq '}') {}
				elsif ($arg =~ /^$/) {}
				elsif ($arg =~ m/^Play\(([^\)]+)\)\}?$/) {
					$ROM[$startAddr+1] = $1;
				}
				elsif ($arg =~ m/^(.*\{SoundCmd\})(\}?)$/) {
					$ROM[$startAddr+1] = $1;
					next unless !defined($2);
				}
				elsif ($arg =~ m/^Do\((.+)\)\}?$/) {
					my($op) = $1;
					$op = $ALIAS{$op} if defined($ALIAS{$op});
					$ROM[$startAddr+2] = $op;
				}
				elsif ($arg =~ m/^(.*\{PinOp\})(\}?)$/) {
					my($op) = $1;
					$ROM[$startAddr+2] = $op;
					next unless !defined($2);
				}
				elsif ($arg =~ m/^ScoreX\((\d{1,2})\)\}?$/) {
					my($val) = ($1 =~ m{^\$}) ? hex($1) : $1;
					die("invalid _ExtendedScript ScoreX($1) at input line $.\n")
						unless numberp($val) && $val>=0 && $val<=15; 
					$ROM[$startAddr+3] &= 0xF0;
					$ROM[$startAddr+3] |= $val;
				}
				elsif ($arg =~ /^AwardEB\}?$/) {
					$ROM[$startAddr+3] |= 0b00010000;
				}
				elsif ($arg =~ /^AwardSpecial\}?$/) {
					$ROM[$startAddr+3] |= 0b00100000;
				}
				else {
					die("Syntax Error on '$arg' at input line $.\n  Usage: _ExtendedScript If(<Lamp or Flag>) { <SoundCmd> <PinOp> ScoreX(<1-15>) AwardEB AwardSpecial } <addl PinOps>\n");
				}

				last if ($arg =~ /\}$/);
			}

			# printf(STDERR "left: from $i in  @OP_ARG |  $ROM[$startAddr+0] $ROM[$startAddr+1] $ROM[$startAddr+2] $ROM[$startAddr+3]\n");

			# finish off any PinOps appended to the extended script
			for (; $i<@OP_ARG; $i++) {		
				$ROM[$ADDR++] = $OP_ARG[$i];
			}
			$MODE=0,return 1;
		}
	}

	return asm_6800_macros();												# in [C711.M6800]
}


sub define_syscall($$@)
{
	die("define_syscall() not implemented for Sytstem 6");
}


sub code_addr(@)															# ROM addr = CPU addr
{
	return $_[0];
}


sub compile_pragma()
{
	our($OP,@OP_ARG);
    return undef unless ($OP =~ m{^\.});
	return 1 if compile_common_pragma();

	our($MODE,@ROM,$MIN_ROM_ADDR,$MAX_ROM_ADDR,$opt_v,$opt_t,$opt_1,@LINE,$FIRST_ADDR);

	#-----------------------------------------------------------
	# Address Management
	# 	- do not move this to the beginning of the routine
	#-----------------------------------------------------------

	if ($OP eq '.ORG') {																	# .ORG
		$ADDR = $OP_ARG[0];
		if ($ADDR =~ m{^([\$%]?)([0-9A-Fa-f]+)$}) {
			die("Syntax: .ORG ROM-addr (<@_> at input line $.)\n")
				unless defined($2);
	   if ($1 eq '$') { $ADDR = hex($2); }										  # decimalize
			elsif ($1 eq '%') { $ADDR = eval('0b' . $2); }
			else			  { $ADDR = $2; }
			die("Cannot decode number <$OP_ARG[0]> at input line $.\n")
				unless numberp($ADDR);
			die(sprintf(".ORG address \$%04X out of range [\$%04X-\$%04X] at input line $.\n",$ADDR,$MIN_ROM_ADDR,$MAX_ROM_ADDR))
				unless ($ADDR >= $MIN_ROM_ADDR && $ADDR <= $MAX_ROM_ADDR);
		} else {
			die("Syntax: .ORG ROM-addr (<@_> at input line $.)\n");
		}

		$FIRST_ADDR = $ADDR if ($ADDR < $FIRST_ADDR);

		if (defined($ROM[$ADDR])) {
			my($nBytes) = 0;
			while (defined($ROM[$ADDR + ++$nBytes])) {}
			if ($opt_v || $opt_t) {
				printf(STDERR "%5d: WARNING: ROM overflow (<.ORG \$%04X>) at input line $.\n",$LINE[$ADDR],$ADDR);
			} else {
				die(sprintf("ROM overflow ($nBytes bytes; <.ORG \$%04X> replacing $ROM[$ADDR]) at input line $.\n",$ADDR))
					unless $opt_1;
			}
		}
		return 1;
	}

	die("Unknown mode-$MODE .PRAGMA <@_> on line $.\n");
}

1; 
