======================================================================
                    R E A D M E . W P C 
                    doc: Wed Aug 28 09:00:38 2024
                    dlm: Sat Sep  7 19:06:57 2024
                    (c) 2024 A.M. Thurnherr
                    uE-Info: 78 34 NIL 0 0 72 2 2 4 NIL ofnI
======================================================================

=Truth Values=

- CC means previous test succeeded
- truth value syscalls marked with ? at end (e.g. bitSet?)

----------------------------------------------------------------------

=Lamps and Flags (Bits)=

- the Bitshifter uses 1-based bit numbers
- Lamps are numbered from 1 for consistency with manual
- Flags are NOT numbered from 1 

	Bit Id			7eleven     
	----------------------------
	$00-$3F 		Lamp#01-40  
	$40-$7F 		Flag#00-3F (Flag#00 is not usable?)
	$80-$BF 		illegal
	$C0-$FF         Flag#40-7F (Flag#40 is not usable?)

	NOTES:
		- 

	!lampOn
		- turns on logical lamp bit and M08 (main matrix)
		- if lamp already blinking, leave it blinking


-Blinking-

- use setBit, bitSet? syscalls with blink buffer offset ($40)
	!setBit L_Lock_left $40
	!bitSet? L_EscapeRoute_10M $40


-Bit Buffers / Lamp Matrices-

	offset	meaning
	------------------------------------------------------------
	$00 	logical matrix
	$08 	primary lamp matrix (used for blinking?)
	$10 	masked from primary ($08)
	$18 	override data
	$20 	masked from previous ($08,$18)
	$28 	override data
	$30 	masked from previous ($08,$18,$28)
	$38 	override data
	$40 	blink matrix
	$48 	Flag#00-3F
	$50     Flag#40-7F

----------------------------------------------------------------------

=Bit Groups=

- 1 byte id
- 1 byte buffer offset
	$00		lamps
	$40		blink buffer
- Bitgroup#01 includes all controlled lamps

sys_bitgroupOp_ABXY
	A	ROM page of hook routine
	B	0C(rotLeft) 0E(fill), 04(???)
	X	bitgroup + buffer offset
	Y	address of hook routine

----------------------------------------------------------------------

=Multiball Devices (MBDs) / Locks=

- lock data table
	- ^MBD_LOCK_DATA in RAM
	- _MBD_NUM_LOCKS rows
	- 5 bytes per entry:
		0
		1	
		2	Locked Balls (lock_count error message)
		3	Flags (MSW_lock_handler)
		4

- handler routines
	- handler routines called when switch state changes
	- MBD_callHandler_A <cmd>
		- A_in == $01 (trough)
			cmd == $01 (ballserve)
			cmd == $02 (endball)
			cmd == $03 (???)
			cmd == $16 (???, after error)
			cmd == $23 (???)
		- A_in == <switch table parameter byte> (in MSW_lock_handler)
			cmd == $04-$09
	- handler codes
		$04		switch not active (just opened), no ball locked logically
		$07		switch active (switch just closed)
			

----------------------------------------------------------------------

=Switches=

- SWITCH TABLE
	0		unknown
	1		unknown
	2-4		HANDLER (3-byte ref)
	5		unknown
	6		unknown
	7		PAYLOAD (most often a lamp, but for locks it is the MBD lock number)
	8		FLAGS F1
	9		FLAGS F2
	10		unknown
	11		unknown

- switch FLAGS F1
	$10		if set, !switchActive? returns true when the switch is open

- switch FLAGS F2
	$40		always set except for coin switches
	$80		dual-action switch

- switch HANDLER
	A_in = PAYLOAD
	B_in = switch number

----------------------------------------------------------------------

=Threads=

- default thread mask is $01FF (512 thread ids)
- thread mask flags:
	$1000		???
	$2000		protected from tilt
	$0800		protected from game start
- system thread ids:
	$12-$14		tilt related

----------------------------------------------------------------------

=Bit Shifter=

Buffers:
	$1F		=???			not at all common, tracing syscalls
	$27		=SWITCHES		tracing CC=switchClosed
	$2E0	=LAMPS			tracing lampOn
	$2E8	=LAMPS_ALT?		routine at 9EF1
	$320	=BLINK_FLAG?	2E0+40
	$328	=FLAGS			2E0+48		Flag#01-40
	$330	=FLAGS_HIGH		2E0+50		Flag#C0-100
	
