#======================================================================
#                    W P C _ D M D . A P I 
#                    doc: Thu Jul 18 06:39:55 2024
#                    dlm: Wed Sep 18 10:32:22 2024
#                    (c) 2024 idealjoker@mailbox.org
#                    uE-Info: 80 44 NIL 0 0 72 8 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	Jul 18, 2024: - created
#	Jul 19, 2024: - added info from FreeWPC
#	Jul 20, 2024: - added first own labels
#	Aug 16, 2024: - switch table disassembles error free
#	Aug 17, 2024: - additions
#	Aug 18, 2024: - additions
#	Aug 19, 2024: - additions
#	Aug 25, 2024: - renamed addScore because it was wrnog
#	Aug 26, 2024: - added sycalls
#				  - changed capitalization to be consistent with IVM
#	Aug 27, 2024: - added !exitThread
#				  - added 'T' argument type
#				  - other additions
#	Aug 30, 2024: - added errors
#	Aug 31, 2024: - lamp matrices & other additions
#	Sep  1 - ?? : - additions
# END OF HISTORY

#----------------------------------------------------------------------
# RAM Memory Map
#----------------------------------------------------------------------

define_label('__FIRQ_SPRINGBOARD_1',				0x08);
define_label('__FIRQ_SPRINGBOARD_2',				0x0A);
define_label('_ROM_BANK_SHADOW',					0x11);		# Scott
define_label('__SPRINGBOARD',						0x12);

define_label('=UNKNOWN_SWITCH_BUFFER',				0x1F);
define_label('=SWITCHES',							0x27);

define_label('__^CURRENT_THREAD_DATA',				0x53);
define_label('_UNKNOWN_THREADLIST_CONDITION',		0x57);
define_label('__SLEEP_TIME',						0x5B);
define_label('__FINDTHREAD_ID',						0x5D);
define_label('_FINDTHREAD_ID+1',					0x5E);
define_label('__FINDTHREAD_MASK',					0x5F);

define_label('_BALLTILTED??',						0x86);	
define_label('_GAMEOVER??',							0x87);	
define_label('_BALLTROUGH_LOCKOUT',					0x88);	

define_label('_ISR_MATRIXBYTE',						0x9C);
define_label('_ISR_MATRIXBYTE_TMP',					0x9D);
define_label('_ISR_TMP_A',							0x9E);
define_label('__ISR_TMP_X',							0x9F);

define_label('_MB_BALLS_IN_PLAY?',					0xBF);

define_label('=LAMP_MATRIX_00_LOGICAL',				0x2E0);		# Lamp and Bit Buffers
define_label('=LAMP_MATRIX_08_PRIMARY',				0x2E8);		
define_label('=LAMP_MATRIX_10_MASK',				0x2F0);		
define_label('=LAMP_MATRIX_18_DATA',				0x2F8);		
define_label('=LAMP_MATRIX_20_MASK',				0x300);		
define_label('=LAMP_MATRIX_28_DATA',				0x308);		
define_label('=LAMP_MATRIX_30_MASK',				0x310);		
define_label('=LAMP_MATRIX_38_DATA',				0x318);		
define_label('=BLINK_MATRIX',						0x320);
define_label('=FLAGS',								0x328);
define_label('=FLAGS_HIGH',							0x330);

define_label('=UNKNOWN_THREAD_DATA_1',				0x366);		
define_label('__UNKNOWN_THREAD_POINTER',			0x36F);		
define_label('=UNKNOWN_THREAD_DATA_2',				0x371);		
define_label('=STATUS_AREA_POINTER',				0x380);		# Scott

define_label('_PLAYER_UP',							0x40F);
define_label('_BALL_IN_PLAY',						0x410);
define_label('_EXTRABALLS_PENDING??',				0x411);
define_label('_BACKGROUND_MUSIC_PLAYING',			0x446);
define_label('_DMD_ANIMATION_PLAYING',				0x483);
define_label('_LAST_DMD_ANIMATION_PLAYED??',		0x487);
define_label('=PLAYER_MEM_DATA??',					0x4AC);
define_label('_SIZE_PLAYER_MEM_DATA??',				0x4AE);
define_label('_TILTWARNINGS_LEFT',					0x4D4);

define_label('_MIN_BALLS_NEEDED_IN_TROUGH_4DRAIN',	0xCC9);
define_label('_LOCKED_BALLS_DEFICIT',				0xCCA);
define_label('_NUM_BALLS_LOCKED',					0xCCB);
define_label('^MBD_LOCK_DATA',						0xCCC);
define_label('_MBD_NUM_LOCKS',						0xCCE);
define_label('_BALLS_IN_TROUGH',					0xCCF);
define_label('_BALLS_INSTALLED_IN_GAME',			0xCD0);

define_label('_BALLS_ACCOUNTED_FOR',				0x1ED0);
define_label('_BALLS_ACCOUNTED_FOR_COMPL',			0x1ED1);

#----------------------------------------------------------------------
# https://bcd.github.io/freewpc/The-WPC-Hardware.html
#----------------------------------------------------------------------

define_label('_RAM_BASE',							0x0000);	# System RAM (2K)
define_label('_DMD_RAM_BASE',						0x3800);	# Display RAM (1K). Which 1K portion of the 16K SRAM appears here is controlled by writing to two display paging registers, WPC_DMD_HIGH_PAGE and WPC_DMD_LOW_PAGE. On WPC-95 only, up to 3K can be mapped, starting at 	0x3000.
define_label('_DEBUG_DATA_PORT',					0x3D60);	# 
define_label('_DEBUG_CONTROL_PORT',					0x3D61);	# 
define_label('_SERIAL_CONTROL_PORT',				0x3E66);	# 
define_label('_SERIAL_DATA_PORT',					0x3E67);	# 
#define_label('_DMD_3200_PAGE',						0x3FB8);	# [WPC-95 only]; 3-0: W: The page of display RAM mapped into the 2nd region, from 	0x3200-	0x33FF.
#define_label('_DMD_3000_PAGE',						0x3FB9);	# [WPC-95 only]; 3-0: W: The page of display RAM mapped into the 1st region, from 	0x3000-0x31FF.
#define_label('_DMD_3600_PAGE',						0x3FBA);	# [WPC-95 only];
define_label('_DMD_3400_PAGE',						0x3FBB);	# [WPC-95 only];
define_label('_DMD_HIGH_PAGE',						0x3FBC);	# 3-0: W: The page of display RAM mapped into the 2nd (6th on WPC95) region, from 0x3A00-0x3BFF.
define_label('_DMD_SCANLINE',						0x3FBD);	# 7-0: W: Request an FIRQ after a particular scanline is drawn 5-0: R: The last scanline that was drawn
define_label('_DMD_LOW_PAGE',						0x3FBE);	# 3-0: W: The page of display RAM mapped into the 1st (5th on WPC95) region, from 0x3800-0x39FF.
#define_label('_DMD_ACTIVE_PAGE',					0x3FBF);	# 3-0: W: The page of display RAM to be used for refreshing the display. Writes to this register take effect just prior to drawing scanline 0.
define_label('_PARALLEL_STATUS_PORT',				0x3FC0);	# 
define_label('_PARALLEL_DATA_PORT',					0x3FC1);	# 
define_label('_PARALLEL_STROBE_PORT',				0x3FC2);	# 
define_label('_SERIAL_DATA_OUTPUT',					0x3FC3);	# 
define_label('_SERIAL_CONTROL_OUTPUT',				0x3FC4);	# 
define_label('_SERIAL_BAUD_SELECT',					0x3FC5);	# 
define_label('_TICKET_DISPENSE',					0x3FC6);	# 
#define_label('_FLIPTRONIC_PORT_A',					0x3FD4);	# 7: W: Enable upper-left flipper hold 6: W: Enable upper-left flipper power 5: W: Enable upper-right flipper hold 4: W: Enable upper-right flipper power 3: W: Enable lower-left flipper hold 2: W: Enable lower-left flipper power 1: W: Enable lower-right flipper hold 0: W: Enable lower-right flipper power 7: R: Upper-left flipper EOS input 6: R: Upper-left flipper cabinet input 5: R: Upper-right flipper EOS input 4: R: Upper-right flipper cabinet input 3: R: Lower-left flipper EOS input 2: R: Lower-left flipper cabinet input 1: R: Lower-right flipper EOS input 0: R: Lower-right flipper cabinet input
#define_label('_FLIPTRONIC_PORT_B',					0x3FD5);	# Not used.
define_label('_SOUND_DATA',							0x3FDC);	# 7-0: R/W: Send/receive a byte of data to/from the sound board.
define_label('_CONTROL_STATUS',						0x3FDD);	# 7: R: WPC sound board read ready 0: R: DCS sound board read ready
define_label('_SOL_GEN_OUTPUT',	        			0x3FE0);	# 7-0: W: Enables for solenoids 25-29
define_label('_SOL_HIGHPOWER_OUTPUT',				0x3FE1);	# 7-0: W: Enables for solenoids 1-8
define_label('_SOL_FLASH1_OUTPUT',					0x3FE2);	# 7-0: W: Enables for solenoids 17-24
define_label('_SOL_LOWPOWER_OUTPUT',				0x3FE3);	# 7-0: W: Enables for solenoids 9-16
define_label('_LAMP_ROW_OUTPUT',					0x3FE4);	# 7-0: W: Lamp matrix row output
define_label('_LAMP_COL_STROBE',					0x3FE5);	# 7-0: W: Lamp matrix column strobe At most one bit in this register should be set. If all are clear, then no controlled lamps are enabled.
define_label('_GI_TRIAC',							0x3FE6);	# 7: W: Flipper enable relay 5: W: Coin door enable relay 4-0: W: General illumination enables
define_label('_SW_JUMPER_INPUT',					0x3FE7);	# 7-0: R: Jumper/DIP switch inputs
define_label('_SW_CABINET_INPUT',					0x3FE8);	# 7: R: Fourth coin switch 6: R: Right coin switch 5: R: Center coin switch 4: R: Left coin switch 3: R: Enter (Begin Test) button 2: R: Up button 1: R: Down button 0: R: Escape (Service Credit) button
define_label('_SW_ROW_INPUT',						0x3FE9); 	# Pre-security;	7-0: R: Readings for the currently selected switch column. Bit 0 corresponds to row 1, bit 1 to row 2, and so on. A '1' indicates active voltage level. For a mechanical switch, this means the switch is closed. For an optical switch, this means the switch is open.
#define_label('_PIC_READ',							0x3FE9); 	# WPC-S
define_label('_SW_COL_STROBE',						0x3FEA);	# Pre-security
#define_label('_PIC_WRITE',							0x3FEA); 	# WPC-S; 7-0: W: Switch column strobe. For pre-Security games, exactly one bit must be set. For Security games, writing to this register sends a command to the PIC chip and does not directly control the strobe line.
#define_label('_ALPHA_POS',							0x3FEB); 	# Alphanumeric;	# WPC_EXTBOARD1 	0x3FEB *DMD On DMD games, this is a general I/O that is used for machine-specific purposes.
#define_label('_ALPHA_ROW1',						0x3FEC); 	# Alphanumeric;	# 
define_label('_EXTBOARD2',							0x3FEC); 	# DMD; On DMD games, this is a general I/O that is used for machine-specific purposes.
define_label('_EXTBOARD3',							0x3FED); 	# DMD; On DMD games, this is a general I/O that is used for machine-specific purposes.
#define_label('_ALPHA_ROW2',						0x3FEE); 	# Alphanumeric
#define_label('_FLIPPER_COIL_OUTPUT',				0x3FEE); 	# WPC-95
#define_label('_FLIPPER_SWITCH_INPUT',				0x3FEF); 	# WPC-95
define_label('_LEDS',								0x3FF2);	# 7: R/W : The state of the diagnostic LED. >0=Off >1=On
#define_label('_RAM_BANK',							0x3FF3); 	# WPC-95; 3-0: W: The page of RAM currently mapped into the banked region.
define_label('__BITSHIFTER_ADDR',					0x3FF4);	# 15-0: R/W: The base address for the bit shifter. Writing to this address initializes the shifter. Reading from this address after a shift command returns the shifted address.
define_label('_BITSHIFTER_BIT',						0x3FF6);	# 7-0: W: Sets the bit position for a shift command. 7-0: R: Returns the output of the last shift command as a bitmask.
define_label('_BITSHIFTER_BIT2',					0x3FF7);	# 7-0: R/W:
define_label('_PERIPH_TMR_FIRQ_CLEAR',				0x3FF8);	# 
define_label('_ROM_LOCK',							0x3FF9);	# Not used
define_label('_CLK_HOURS_DAYS',						0x3FFA);	# 7-0: R/W : The time-of-day hour counter.
define_label('_CLK_MINS',							0x3FFB);	# 7-0: R/W : The time-of-day minute counter.
define_label('_ROM_BANK',							0x3FFC);	# 5-0: R/W: The page of ROM currently mapped into the banked region (	0x4000-0x7FFF). Pages 62 and 63 correspond to the uppermost 32KB, and are not normally mapped because those pages are accessible in the fixed region (0x8000-0xFFFF). Page numbers are consecutive. Page 0 corresponds to the lowest address in a 1MB device. If a smaller ROM is installed, the uppermost bits of this register are effectively ignored.
define_label('_RAM_LOCK',							0x3FFD);	#
define_label('_RAM_LOCKSIZE',						0x3FFE);	#
define_label('_ZEROCROSS_IRQ_CLEAR', 				0x3FFF);	# 7: R: Set to 1 when AC is currently at a zero crossing, or 0 otherwise. 7: W: Writing a 1 here clears the source of the periodic timer interrupt. 4: R/W: Periodic timer interrupt enable >0=Periodic IRQ disabled >1=Periodic IRQ enabled 2: W: Writing a 1 here resets the watchdog. 

#----------------------------------------------------------------------
# System Calls
#----------------------------------------------------------------------

define_syscall('Panic',								0x8298,'E',1);	# NOTE 1: does not return
define_syscall('Error',								0x82B6,'E');
define_syscall('Y=adjustment',						0x82F2,'A');
define_syscall('A=adjustment',						0x82FF,'A');
define_syscall('B=adjustment',						0x830C,'A');
define_syscall('switchClosed?',						0x8319,'S');
define_syscall('switchBroken??',					0x8339,'S');
define_syscall('sleep',								0x8346,'B');
define_syscall('memClearY',							0x836B,'B');
define_syscall('memSetBY',							0x8378,'B');
define_syscall('solCmd',							0x8385,'O');
define_syscall('pulseFlasher',						0x8392,'B');
define_syscall('solCmd_wait',						0x839F,'B');
define_syscall('syscall_83DB',						0x83DB,'B');
define_syscall('syscall_83E8',						0x83E8,'B');
define_syscall('lampOn',							0x841C,'L');
define_syscall('lampOff',							0x842B,'L');
define_syscall('lampToggle',						0x843A,'L');
define_syscall('lampOn?',							0x8449,'L');
define_syscall('setFlag',							0x8480,'F');
define_syscall('clearFlag',							0x848F,'F');
define_syscall('toggleFlag',						0x849E,'F');
define_syscall('flagSet?',							0x84AD,'F');
define_syscall('syscall_8505',						0x8505,'B');
define_syscall('addScore',							0x851F,'B');
define_syscall('syscall_8539',						0x8539,'B');
define_syscall('playSound',							0x8546,'B');
define_syscall('DMDanimation',						0x8553,'D');
define_syscall('lampFX',							0x85B2,'B');
define_syscall('syscall_85A2',						0x85A2,'B');
define_syscall('syscall_85E1',						0x85E1,'B');
define_syscall('syscall_85F1',						0x85F1,'B');
define_syscall('syscall_8601',						0x8601,'B');
define_syscall('syscall_8611',						0x8611,'B');
define_syscall('longJSR_indirect',					0x8621,'P');
define_syscall('A=AD_value=?',						0x865B,'AB');
define_syscall('longSleep',							0x8679,'W');
define_syscall('threadRunning?',					0x8690,'T');
define_syscall('killThreads',						0x869E,'T');
define_syscall('setThreadId',						0x86AC,'T');
define_syscall('becomeThread_ifNotRunning',			0x86BA,'T');
define_syscall('becomeOnlyThread',					0x86D0,'T');
define_syscall('setBit',							0x8715,'LB');			# <bit number> <buffer offset>; only used with blink offset $40
define_syscall('clearBit',							0x8722,'LB');			# <bit number> <buffer offset>; only used with blink offset $40
define_syscall('bitSet?',							0x873C,'LB');			# <bit number> <buffer offset>; only used with blink offset $40
define_syscall('clearAll',							0x87BE,'GB');
define_syscall('allSet?',							0x87CB,'GB');
define_syscall('allClear?',							0x87D8,'GB');
define_syscall('syscall_880C',						0x880C,'W');
define_syscall('syscall_8885',						0x8885,'W');
define_syscall('syscall_8895',						0x8895,'W');
define_syscall('syscall_88B5',						0x88B5,'W');
define_syscall('updateAudit',						0x88D5,'U');
define_syscall('longJSR',							0x88F5,'R');
define_syscall('longJMP',							0x892F,'R',1);			# NOTE 1: does not return
define_syscall('sys_unknown_spawnThread_1',			0x8948,'R');
define_syscall('memCopy_to_X',						0x89BE,'PB');
define_syscall('memCopy_from_Y',					0x89CE,'PB');
define_syscall('syscall_89DD',						0x89DD,'WB');
define_syscall('syscall_89F8',						0x89F8,'WB');
define_syscall('killThreads_withMask',				0x8A9A,'TW');
define_syscall('findThread?',						0x8AAA,'TW');
define_syscall('memClear',							0x8ABA,'PW');
define_syscall('memSet',							0x8ACA,'PBB');
define_syscall('spawnThread_1',						0x8B3D,'TR');
define_syscall('spawnThread_2',						0x8B5A,'TR');
define_syscall('killSpawnThread_1',					0x8B77,'TR');			# kill threads first, then spawn new one
define_syscall('killSpawnThread_2',					0x8B9D,'TR');
define_syscall('spawnThreadIfNeeded_1',				0x8BC3,'TR');			# don't spaawn if thread id already in use
define_syscall('spawnThreadIfNeeded_2',				0x8BF7,'TR');
define_syscall('memCopy',							0x8C2B,'WWB');
define_syscall('exitThread',						0x99A2,'',2);			# NOTE 2: sycall is JMP target (rather than JSR)
define_syscall('syscall_D799',						0xD799,'WBW');
define_syscall('rotLeft',							0xFDA2,'GB');
define_syscall('fill',								0xFDB4,'GB');
define_syscall('unknownBitgroupOp1',				0xFDC6,'GB');
define_syscall('unknownBitgroupOp2',				0xFDD8,'GB');
define_syscall('MBD_callHandler_A',					0xFDFC,'B');

# non-global

define_label('sys_tilt',							0x5921, 0x39);

define_label('sys_rotLeft_AB',						0x66F5, 0x3B);
define_label('sys_fill_AB',							0x6706, 0x3B);

# global, own analysis

define_label('NE=gameDisabled',						0xF759);
define_label('=bitShifter_lookUpTable',				0x81B6);
define_label('lampOn_blinkOff',						0x8458);
define_label('lampOff_blinkOff',					0x846C);
define_label('sys_longJSR_indirect[X]',				0x862B);
define_label('sys_longJSR_indirect[AX]',			0x8631);
define_label('sys_setBank=3B',						0x90B4);
define_label('sys_setBank[B]',						0x90BC);
define_label('A=[XB]==1?_INX',						0x90E7);
define_label('A=[XB]==1?',							0x90EC);
define_label('BX=loadRef[X]',						0x90C5);
define_label('sys_lock_RAM[B]',						0x9207);
define_label('sys_unlock_RAM',						0x9223);
define_label('sys_lock_RAM',						0x922C);
define_label('CS=badChecksum[XY]',					0x928A);
define_label('Y=adjustmentA??==1',					0x92D4);
define_label('A=adjustmentA??==1',					0x92DE);
define_label('D=adjustmentA??==1',					0x92EC);
define_label('Y=adjustmentA??',						0x92F8);
define_label('sys_kill_thread',						0x9B24);
define_label('sys_findThread[Y]?',					0x9B34);
define_label('sys_findThread[DY]?',					0x9B3D);
define_label('find_thread_in_list',					0x9B55);
define_label('sys_zeroCrossIRQ_clear',				0x9D00);
define_label('sys_clearBit[AB]',					0x9E92);
define_label('sys_twiddle_BitShifter_input',		0x9EA5);
define_label('sys_setBit[AB]',						0x9E7F);
define_label('bit[AB]Set?',							0x9EDD);
define_label('sys_setBit[AB]_withLamps',			0x9EF1);
define_label('BitShifter_setBit[AB]',				0x9F47);
define_label('BitShifter_clearBit[AB]',				0x9F73);
define_label('BitShifter_testBit[AB]',				0x9FA0);
define_label('sys_suspendThread',					0x98BB);
define_label('lamp[A]On?',							0xA0B9);
define_label('sys_memCopy[AXY]',					0xA6B9);
define_label('sys_memClear[AY]',					0xA6C4);
define_label('sys_memClear[XY]',					0xA6D1);
define_label('sys_solCmd[A]_wait',					0xA84D);
define_label('sys_solCmd[A]',						0xA895);
define_label('sys_memSet[ABY]',						0xA6E3);
define_label('sys_pulseFlasher[A]',					0xA9EC);
define_label('sys_bitgroup[D]_clearAll',			0xAE09);
define_label('sys_bitgroup[D]_allSet?',				0xAE19);
define_label('sys_bitgroup[D]_allOff?',				0xAE29);
define_label('sys_bitgroupOp[ABXY]',				0xAE53);
define_label('sys_printString[BXY]',				0xB97B);
define_label('sys_lampFX[A]',						0xCC3A);
define_label('sys_IRQ_timer_handler??',				0xECCA);
define_label('sys_addBonus_1130',					0xFAA8);
define_label('sys_addBonus_3330',					0xFAAE);
define_label('sys_addBonus_5530',					0xFAB4);
define_label('sys_addBonus_9930',					0xFABA);
define_label('sys_addBonus[A]',						0xFABE);

#----------------------------------------------------------------------
# Threads
#----------------------------------------------------------------------

$Thread[0x0004] = 'SYSTHD_Balltrough_handler';		
$Thread[0x0005] = 'SYSTHD_Diagnostics';		
$Thread[0x780D] = 'SYSTHD_OutholeKicker_busy';	
$Thread[0x780F] = 'SYSTHD_Balltrough_disabled';
$Thread[0x007A] = 'SYSTHD_Playfield_qualified';

$Thread[0x12] = 'SYSTHD_tilt_unknown';
$Thread[0x13] = 'SYSTHD_bobTilt_swingDelay';				# flags $38
$Thread[0x14] = 'SYSTHD_bobTilt_switchDebounce';			# flags $18

for (my($i)=0; $i<=0x0F; $i++) {
	$Thread[0x40+$i] = sprintf('SYSTHD_Lock#%02X_handler',$i);
}

$Thread[0x7F] = 'SYSTHD_Startbutton';						# flags $78

#----------------------------------------------------------------------
# Scott Charles (from Dr. WHO)
#----------------------------------------------------------------------

$Error[0x01] = 'ERR_User_break_requested_by_key_press';
$Error[0x02] = 'ERR_LOCKED_CMOS_value_not_in_table';
$Error[0x03] = 'ERR_6809_reserved_vector_threaded';
$Error[0x04] = 'ERR_SWI3_caught';
$Error[0x05] = 'ERR_SWI2_caught';
$Error[0x06] = 'ERR_NMI_caught';
$Error[0x07] = 'ERR_stack_too_deep_for_sleep';
$Error[0x08] = 'ERR_Could_not_allocate_block_for_large_stack!';
$Error[0x09] = 'ERR_free_block:_invalid_argument_0';
$Error[0x0A] = 'ERR_Thread_not_on_list_expected';
$Error[0x0B] = 'ERR_Request_to_Free_Ram_Block_failed';
$Error[0x0C] = 'ERR_Exec_hook_called_utility_requiring_a_thread_id';
$Error[0x0D] = 'ERR_printf:_String_too_long';
$Error[0x0E] = 'ERR_printf:_bad_%_format';
$Error[0x0F] = 'ERR_Coil_queue_overflow';
$Error[0x10] = 'ERR_Bad_pound_clause_embedded_in_string';
$Error[0x11] = 'ERR_Message_number_passed_is_beyond_table';
$Error[0x12] = 'ERR_Head_or_Tail_of_coil_queue_out_of_range';
$Error[0x13] = 'ERR_GI_bit_from_bit_generator_is_bad';
$Error[0x14] = 'ERR_invalid_flash_time_0';
$Error[0x15] = 'ERR_GI_Number_out_of_range';
$Error[0x16] = 'ERR_invalid_bit_specifier';
$Error[0x17] = 'ERR_Lamp_table_invalid_or_not_in_prime_real_estate';
$Error[0x18] = 'ERR_Lamp_string_number_specified_is_too_high';
$Error[0x19] = 'ERR_End_Bracket_while_NOT_in_lamp_string_if_statement';
$Error[0x1A] = 'ERR_Lamp_string_operator_out_of_range';
$Error[0x1B] = 'ERR_Lamp_string_range_op_got_lamps_in_wrong_order';
$Error[0x1C] = 'ERR_endif_encountered_before_"then"_on_if_in_lamp_string';
$Error[0x1D] = 'ERR_Bitshifter:_invalid_buffer_offset';
$Error[0x1E] = 'ERR_get_switch_bit_munged_its_parameters';
$Error[0x1F] = 'ERR_Switch_number_passed_to_switch_primitive_too_high';
$Error[0x20] = 'ERR_Cksum_init_call_to_region_that_is_not_Prime';
$Error[0x21] = 'ERR_long_binary_to_bcd_passed_0_length';
$Error[0x22] = 'ERR_Hook_(indicated_by_U,_in_apfixed)_must_be_in_prime';
$Error[0x23] = 'ERR_Score_req._w/_player_up_invalid,_tilt,_go,_or_diag';
$Error[0x24] = 'ERR_Product_of_local_and_global_score_multipliers_>_255';
$Error[0x25] = 'ERR_Thread_that_just_slept_wrote_to_1st_8_bytes_of_ram';
$Error[0x26] = 'ERR_Bad_score_multiplier_specified';
$Error[0x27] = 'ERR_Table_item_out_of_range_(beyond_end_of_table)';
$Error[0x28] = 'ERR_Printf:__Bad_character_following_backslash';
$Error[0x29] = 'ERR_invalid_lamp_number_0';
$Error[0x2A] = 'ERR_Pointer_for_Printf_will_not_fit_in_16_bits';
$Error[0x2B] = 'ERR_Field_not_in_segment_area';
$Error[0x2C] = 'ERR_Attempt_to_store_bit_for_field,_beyond_last_byte';
$Error[0x2D] = 'ERR_Invalid_time_stamp_passed_to_clock_time_stamp';
$Error[0x2E] = 'ERR_Thread_with_lampFX_number_has_no_lamp_block';
$Error[0x2F] = 'ERR_Bits_in_LF__and_LEFL__flags_must_be_in_same_position';
$Error[0x30] = 'ERR_LEF_FLASH_BYTES_not_large_enought_for_phys._flashers';
$Error[0x31] = 'ERR_Thread_has_P_LEFF_NUMBER_w/o_valid_PID';
$Error[0x32] = 'ERR_invalid_flasher_0_in_lamp_effect';
$Error[0x33] = 'ERR_Lamp_effect_block_freed_(instead_of_sys_lampFX_exit)';
$Error[0x34] = 'ERR_User_field_request_by_proc_w/o_that_field_defined';
$Error[0x35] = 'ERR_Invalid_software_field_number';
$Error[0x36] = 'ERR_Background_display_effect_header_invalid';
$Error[0x37] = 'ERR_sys_displayFX_check_called_for_background_display_effect';
$Error[0x38] = 'ERR_Player_up_number_invalid';
$Error[0x39] = 'ERR_Bad_or_Missing_Master_Scroll_block';
$Error[0x3A] = 'ERR_Master_block_required_for_setup_or_scroll_operation';
$Error[0x3B] = 'ERR_Cannot_locate_previously_setup_scroll_chunk';
$Error[0x3C] = 'ERR_Period_or_Comma_1st_char,_or_after_#_(use_space)';
$Error[0x3D] = 'ERR_Display_scroller_running_with_no_source_type_set';
$Error[0x3E] = 'ERR_No_matrix_bit_set_for_lamp_effect._(string_specified)';
$Error[0x3F] = 'ERR_Addl._lamps_allocted_to_effect_specified_NEW_matrix';
$Error[0x40] = 'ERR_Software_field_flags_need_justification_bits';
$Error[0x41] = 'ERR_Bad_segment_area_specified_to_sys_copy_fixed_field';
$Error[0x42] = 'ERR_Dissolve_requested,_but_background_displayFX_was_not_running';
$Error[0x43] = 'ERR_Invalid_scroll_chunk_pointer';
$Error[0x44] = 'ERR_Stackable_effect_has_flag_conflict_(amode_etc.)';
$Error[0x45] = 'ERR_Endball_called_from_game_over';
$Error[0x46] = 'ERR_Request_for_player_area_byte,_out_of_range';
$Error[0x47] = 'ERR_Multiball_device_number_invalid';
$Error[0x48] = 'ERR_Too_many_multiball_devices_specified';
$Error[0x49] = 'ERR_Irq_Tail_hook_not_in_prime_real_estate';
$Error[0x4A] = 'ERR_No_thread_available_for_ball_serve';
$Error[0x4B] = 'ERR_invalid_Multiball_device_0';
$Error[0x4C] = 'ERR_Unmonitored_locked_hole_had_a_switch_closure';
$Error[0x4D] = 'ERR_Lock_count_on_eject_hole_was_higher_than_1';
$Error[0x4E] = 'ERR_Call_to_trough_handler_for_endball_returned';
$Error[0x4F] = 'ERR_Call_to_trough_handler_for_ball_serve_returned';
$Error[0x50] = 'ERR_audit_complete_called_by_invalid_thread_id';
$Error[0x51] = 'ERR_Could_not_get_thread_block_for_mulitball_device_kickout';
$Error[0x52] = 'ERR_Device_type_number_invalid_for_multiball_device';
$Error[0x53] = 'ERR_Ball_serve_condition_w/_no_balls_in_trough_(you_must_kick_one)';
$Error[0x54] = 'ERR_MULTI_ALL_BALL_CHECK_called_while_auditing_in_progress';
$Error[0x55] = 'ERR_Quick_lampFX_resource_req._by_non-lampFX_thread';
$Error[0x56] = 'ERR_Non-display_effect_called_sys_displayFX_exit';
$Error[0x57] = 'ERR_Non-lamp_effect_called_sys_lampFX_exit';
$Error[0x58] = 'ERR_Effect_stack_pointer_invalid';
$Error[0x59] = 'ERR_Bad_sound_table_entry,_or_too_many_sound_table_entries';
$Error[0x5A] = 'ERR_Bad_sound_script_operator';
$Error[0x5B] = 'ERR_Whirl_field_passed_an_invalid_quadrant_number';
$Error[0x5C] = 'ERR_Cmos_ram_left_unprotected_(sys_lock_cmos_forgotten)';
$Error[0x5D] = 'ERR_HSTD_Table_would_not_initialize_(Check_Default_Table)';
$Error[0x5E] = 'ERR_HSTD_entry_requested_out_of_range';
$Error[0x5F] = 'ERR_Display_field_too_small_for_get_let';
$Error[0x60] = 'ERR_Internal_error_in_GET_LET_threading';
$Error[0x61] = 'ERR_Higher_priority_displayFX_stopped_Enter_your_Initials';
$Error[0x62] = 'ERR_LARGEST_HSTD_TABLE_value_not_large_enough';
$Error[0x63] = 'ERR_def_status_MUST_HAVE_DEF_EQMAY_set';
$Error[0x64] = 'ERR_Could_not_allocate_block_for_test_mode';
$Error[0x65] = 'ERR_Audit_formatting_number_invalid';
$Error[0x66] = 'ERR_adj_name_it_must_specify_TRUE_in_adj_table';
$Error[0x67] = 'ERR_Thread_dispatcher_got_a_non-thread_block_to_dispatch';
$Error[0x68] = 'ERR_Bad_special_help_routine_requested';
$Error[0x69] = 'ERR_Thread_terminated_by_RTS';
$Error[0x6A] = 'ERR_Too_many_audits_for_TOTAL_AUDITS_value_specified';
$Error[0x6B] = 'ERR_Test_report_lost_phasing_w/_help_sequencer';
$Error[0x6C] = 'ERR_Too_many_adjustments_for_ADJ_TOTAL_value';
$Error[0x6D] = 'ERR_Exec_routine_called_sys_get_block';
$Error[0x6E] = 'ERR_User_menu_descriptors_out_of_order';
$Error[0x6F] = 'ERR_Copied_string_too_long_for_thread_block';
$Error[0x70] = 'ERR_Display_Req._from_display_effect_routine';
$Error[0x71] = 'ERR_Sleep_called_from_EXEC_routine';
$Error[0x72] = 'ERR_Switch_hit_reported_on_switch_in_non-scanned_column';
$Error[0x73] = 'ERR_Invalid_audit_RAM';
$Error[0x74] = 'ERR_Exec_level_routine_locked_up_(Detected_by_IRQ)';
$Error[0x75] = 'ERR_ad_replay_start_value_is_not_within_min/max_range';
$Error[0x76] = 'ERR_Switch_test_could_not_allocate_a_ram_block';
$Error[0x77] = 'ERR_Ram_byte_ticket_to_dispense_got_corrupted';
$Error[0x78] = 'ERR_Units_(not_tens)_added_to_score';
$Error[0x79] = 'ERR_Current_thread_stack_overflow';
$Error[0x7A] = 'ERR_Current_thread_stack_underflow';
$Error[0x7B] = 'ERR_DMX_page_allocator_failed';

#----------------------------------------------------------------------';

1;

