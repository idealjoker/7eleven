#======================================================================
#                    W P C _ D M D . A P I 
#                    doc: Thu Jul 18 06:39:55 2024
#                    dlm: Tue Aug 20 15:49:52 2024
#                    (c) 2024 idealjoker@mailbox.org
#                    uE-Info: 203 70 NIL 0 0 72 0 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	Jul 18, 2024: - created
#	Jul 19, 2024: - added info from FreeWPC
#	Jul 20, 2024: - added first own labels
#	Aug 16, 2024: - switch table disassembles error free
#	Aug 17, 2024: - additions
#	Aug 18, 2024: - additions
#	Aug 19, 2024: - additions

#----------------------------------------------------------------------
# RAM Memory Map
#----------------------------------------------------------------------

define_label('_ROM_BANK_SHADOW',		0x11);		# SC
define_label('_BALLTILTED?',			0x86);	
define_label('_GAMEOVER?',				0x87);	

define_label('=LAMPS',					0x2E0);		
define_label('=FLAGS',					0x328);		# 8 bytes
define_label('=ALT_FLAGS',				0x330);		# 8 bytes
define_label('=STATUS_AREA_POINTER',	0x380);		# SC

#----------------------------------------------------------------------
# https://bcd.github.io/freewpc/The-WPC-Hardware.html
#----------------------------------------------------------------------

define_label('_RAM_BASE',				0x0000);	# System RAM (2K)
define_label('_DMD_RAM_BASE',			0x3800);	# Display RAM (1K). Which 1K portion of the 16K SRAM appears here is controlled by writing to two display paging registers, WPC_DMD_HIGH_PAGE and WPC_DMD_LOW_PAGE. On WPC-95 only, up to 3K can be mapped, starting at 0x3000.
define_label('_DEBUG_DATA_PORT',		0x3D60);	# 
define_label('_DEBUG_CONTROL_PORT',		0x3D61);	# 
define_label('_SERIAL_CONTROL_PORT',	0x3E66);	# 
define_label('_SERIAL_DATA_PORT',		0x3E67);	# 
#define_label('_DMD_3200_PAGE',			0x3FB8);	# [WPC-95 only]; 3-0: W: The page of display RAM mapped into the 2nd region, from 0x3200-0x33FF.
#define_label('_DMD_3000_PAGE',			0x3FB9);	# [WPC-95 only]; 3-0: W: The page of display RAM mapped into the 1st region, from 0x3000-0x31FF.
#define_label('_DMD_3600_PAGE',			0x3FBA);	# [WPC-95 only];
define_label('_DMD_3400_PAGE',			0x3FBB);	# [WPC-95 only];
define_label('_DMD_HIGH_PAGE',			0x3FBC);	# 3-0: W: The page of display RAM mapped into the 2nd (6th on WPC95) region, from 0x3A00-0x3BFF.
define_label('_DMD_SCANLINE',			0x3FBD);	# 7-0: W: Request an FIRQ after a particular scanline is drawn 5-0: R: The last scanline that was drawn
define_label('_DMD_LOW_PAGE',			0x3FBE);	# 3-0: W: The page of display RAM mapped into the 1st (5th on WPC95) region, from 0x3800-0x39FF.
#define_label('_DMD_ACTIVE_PAGE',		0x3FBF);	# 3-0: W: The page of display RAM to be used for refreshing the display. Writes to this register take effect just prior to drawing scanline 0.
define_label('_PARALLEL_STATUS_PORT',	0x3FC0);	# 
define_label('_PARALLEL_DATA_PORT',		0x3FC1);	# 
define_label('_PARALLEL_STROBE_PORT',	0x3FC2);	# 
define_label('_SERIAL_DATA_OUTPUT',		0x3FC3);	# 
define_label('_SERIAL_CONTROL_OUTPUT',	0x3FC4);	# 
define_label('_SERIAL_BAUD_SELECT',		0x3FC5);	# 
define_label('_TICKET_DISPENSE',		0x3FC6);	# 
#define_label('_FLIPTRONIC_PORT_A',		0x3FD4);	# 7: W: Enable upper-left flipper hold 6: W: Enable upper-left flipper power 5: W: Enable upper-right flipper hold 4: W: Enable upper-right flipper power 3: W: Enable lower-left flipper hold 2: W: Enable lower-left flipper power 1: W: Enable lower-right flipper hold 0: W: Enable lower-right flipper power 7: R: Upper-left flipper EOS input 6: R: Upper-left flipper cabinet input 5: R: Upper-right flipper EOS input 4: R: Upper-right flipper cabinet input 3: R: Lower-left flipper EOS input 2: R: Lower-left flipper cabinet input 1: R: Lower-right flipper EOS input 0: R: Lower-right flipper cabinet input
#define_label('_FLIPTRONIC_PORT_B',		0x3FD5);	# Not used.
define_label('_SOUND_DATA',				0x3FDC);	# 7-0: R/W: Send/receive a byte of data to/from the sound board.
define_label('_CONTROL_STATUS',			0x3FDD);	# 7: R: WPC sound board read ready 0: R: DCS sound board read ready
define_label('_SOL_GEN_OUTPUT',	        0x3FE0);	# 7-0: W: Enables for solenoids 25-29
define_label('_SOL_HIGHPOWER_OUTPUT',	0x3FE1);	# 7-0: W: Enables for solenoids 1-8
define_label('_SOL_FLASH1_OUTPUT',		0x3FE2);	# 7-0: W: Enables for solenoids 17-24
define_label('_SOL_LOWPOWER_OUTPUT',	0x3FE3);	# 7-0: W: Enables for solenoids 9-16
define_label('_LAMP_ROW_OUTPUT',		0x3FE4);	# 7-0: W: Lamp matrix row output
define_label('_LAMP_COL_STROBE',		0x3FE5);	# 7-0: W: Lamp matrix column strobe At most one bit in this register should be set. If all are clear, then no controlled lamps are enabled.
define_label('_GI_TRIAC',				0x3FE6);	# 7: W: Flipper enable relay 5: W: Coin door enable relay 4-0: W: General illumination enables
define_label('_SW_JUMPER_INPUT',		0x3FE7);	# 7-0: R: Jumper/DIP switch inputs
define_label('_SW_CABINET_INPUT',		0x3FE8);	# 7: R: Fourth coin switch 6: R: Right coin switch 5: R: Center coin switch 4: R: Left coin switch 3: R: Enter (Begin Test) button 2: R: Up button 1: R: Down button 0: R: Escape (Service Credit) button
define_label('_SW_ROW_INPUT',			0x3FE9); 	# Pre-security;	7-0: R: Readings for the currently selected switch column. Bit 0 corresponds to row 1, bit 1 to row 2, and so on. A '1' indicates active voltage level. For a mechanical switch, this means the switch is closed. For an optical switch, this means the switch is open.
#define_label('_PIC_READ',				0x3FE9); 	# WPC-S
define_label('_SW_COL_STROBE',			0x3FEA);	# Pre-security
#define_label('_PIC_WRITE',				0x3FEA); 	# WPC-S; 7-0: W: Switch column strobe. For pre-Security games, exactly one bit must be set. For Security games, writing to this register sends a command to the PIC chip and does not directly control the strobe line.
#define_label('_ALPHA_POS',				0x3FEB); 	# Alphanumeric;	# WPC_EXTBOARD1 0x3FEB *DMD On DMD games, this is a general I/O that is used for machine-specific purposes.
#define_label('_ALPHA_ROW1',			0x3FEC); 	# Alphanumeric;	# 
define_label('_EXTBOARD2',				0x3FEC); 	# DMD; On DMD games, this is a general I/O that is used for machine-specific purposes.
define_label('_EXTBOARD3',				0x3FED); 	# DMD; On DMD games, this is a general I/O that is used for machine-specific purposes.
#define_label('_ALPHA_ROW2',			0x3FEE); 	# Alphanumeric
#define_label('_FLIPPER_COIL_OUTPUT',	0x3FEE); 	# WPC-95
#define_label('_FLIPPER_SWITCH_INPUT',	0x3FEF); 	# WPC-95
define_label('_LEDS',					0x3FF2);	# 7: R/W : The state of the diagnostic LED. >0=Off >1=On
#define_label('_RAM_BANK',				0x3FF3); 	# WPC-95; 3-0: W: The page of RAM currently mapped into the banked region.
define_label('__BITSHIFTER_ADDR',		0x3FF4);	# 15-0: R/W: The base address for the bit shifter. Writing to this address initializes the shifter. Reading from this address after a shift command returns the shifted address.
define_label('_BITSHIFTER_BIT',			0x3FF6);	# 7-0: W: Sets the bit position for a shift command. 7-0: R: Returns the output of the last shift command as a bitmask.
define_label('_BITSHIFTER_BIT2',		0x3FF7);	# 7-0: R/W:
define_label('_PERIPH_TMR_FIRQ_CLEAR',	0x3FF8);	# 
define_label('_ROM_LOCK',				0x3FF9);	# Not used
define_label('_CLK_HOURS_DAYS',			0x3FFA);	# 7-0: R/W : The time-of-day hour counter.
define_label('_CLK_MINS',				0x3FFB);	# 7-0: R/W : The time-of-day minute counter.
define_label('_ROM_BANK',				0x3FFC);	# 5-0: R/W: The page of ROM currently mapped into the banked region (0x4000-0x7FFF). Pages 62 and 63 correspond to the uppermost 32KB, and are not normally mapped because those pages are accessible in the fixed region (0x8000-0xFFFF). Page numbers are consecutive. Page 0 corresponds to the lowest address in a 1MB device. If a smaller ROM is installed, the uppermost bits of this register are effectively ignored.
define_label('_RAM_LOCK',				0x3FFD);	#
define_label('_RAM_LOCKSIZE',			0x3FFE);	#
define_label('_ZEROCROSS_IRQ_CLEAR', 	0x3FFF);	# 7: R: Set to 1 when AC is currently at a zero crossing, or 0 otherwise. 7: W: Writing a 1 here clears the source of the periodic timer interrupt. 4: R/W: Periodic timer interrupt enable >0=Periodic IRQ disabled >1=Periodic IRQ enabled 2: W: Writing a 1 here resets the watchdog. 

#----------------------------------------------------------------------
# Own Analysis
#----------------------------------------------------------------------

define_label('RuntimeError',			0x8298);	# keep in sync with [D711.WPC_DMD]
define_label('RuntimeError_nonFatal',	0x82B6);
define_label('Y=adjustment',			0x82F2);
define_label('A=adjustment',			0x82FF);
define_label('B=adjustment',			0x830C);
define_label('CC=switchClosed',			0x8319);
define_label('syscall_8339',			0x8339);
define_label('Sleep',					0x8346);
define_label('MemClearY',				0x836B);
define_label('MemSetBY',				0x8378);
define_label('SolCmd',					0x8385);
define_label('PulseFlasher',			0x8392);
define_label('SolCmd_wait',				0x839F);
define_label('syscall_83DB',			0x83DB);
define_label('syscall_83E8',			0x83E8);
define_label('LampOn',					0x841C);
define_label('LampOff',					0x842B);
define_label('CC=lampLit',				0x8449);
define_label('SetBit',					0x8480);
define_label('ClearBit',				0x848F);
define_label('CC=bitSet?',				0x84AD);
define_label('AddScore?',				0x851F);
define_label('syscall_8539',			0x8539);
define_label('PlaySound?',				0x8546);
define_label('syscall_8553',			0x8553);
define_label('syscall_85E1',			0x85E1);
define_label('syscall_85F1',			0x85F1);
define_label('SetFlag',					0x85B2);
define_label('OtherPG_ind',				0x8621);
define_label('syscall_865B',			0x865B);
define_label('syscall_86AC',			0x86AC);
define_label('LongSleep',				0x8679);
define_label('syscall_8690',			0x8690);
define_label('syscall_869E',			0x869E);
define_label('syscall_86D0',			0x86D0);
define_label('syscall_8715',			0x8715);
define_label('syscall_8722',			0x8722);
define_label('syscall_873C',			0x873C);
define_label('syscall_87BE',			0x87BE);
define_label('CC=bitgroup_allOn',		0x87CB);
define_label('CC=bitgroup_allOff',		0x87D8);
define_label('syscall_88D5',			0x88D5);
define_label('OtherPG',					0x88F5);
define_label('syscall_892F',			0x892F);
define_label('syscall_8948',			0x8948);
define_label('MemCopyX',				0x89BE);
define_label('syscall_89DD',			0x89DD);
define_label('syscall_8A9A',			0x8A9A);
define_label('syscall_8AAA',			0x8AAA);
define_label('MemSet',					0x8ACA);
define_label('MemClear',				0x8ABA);
define_label('SpawnThread_0',			0x8B3D);
define_label('SpawnThread_1',			0x8B5A);
define_label('SpawnThread_2',			0x8B77);
define_label('SpawnThread_3',			0x8B9D);
define_label('SpawnThread_4',			0x8BC3);
define_label('SpawnThread_5',			0x8BF7);
define_label('MemCopy',					0x8C2B);
define_label('syscall_D799',			0xD799);
define_label('syscall_FDB4',			0xFDB4);
define_label('syscall_FDA2',			0xFDA2);
define_label('syscall_FDC6',			0xFDC6);
define_label('syscall_FDD8',			0xFDD8);
define_label('syscall_FDFC',			0xFDFC);

# non-global

define_label('sys_tilt?',				0x5921, 0x39);

# global, own analysis

define_label('NE=gameDisabled',			0xF759);
define_label('=BitShifter_ext',			0x81B6);
define_label('sys_setBank=3B',			0x90B4);
define_label('sys_setBank_B',			0x90BC);
define_label('BX=loadRef_X',			0x90C5);
define_label('sys_lock_RAM_B',			0x9207);
define_label('sys_unlock_RAM',			0x9223);
define_label('sys_lock_RAM',			0x922C);
define_label('CS=badChecksum_XY',		0x928A);
define_label('Y=adjustmentA?==1',		0x92D4);
define_label('A=adjustmentA?==1',		0x92DE);
define_label('D=adjustmentA?==1',		0x92EC);
define_label('Y=adjustmentA?',			0x92F8);
define_label('sys_exitThread',			0x99A2);
define_label('sys_zeroCrossIRQ_clear',	0x9D00);
define_label('sys_clearBit_AB',			0x9E92);
define_label('sys_prep_BitShifter_AX',	0x9EA5);
define_label('sys_setBit_AB',			0x9E7F);
define_label('CC=bitSet?_ABX',			0x9EDD);
define_label('sys_setBit_ABX',			0x9EF1);
define_label('BitShifter_setBit_ABX',	0x9F47);
define_label('BitShifter_clearBit_ABX',	0x9F73);
define_label('BitShifter_testBit_ABX',	0x9FA0);
define_label('sys_suspendThread',		0x98BB);
define_label('CC=lampOn?_A',			0xA0B9);
define_label('sys_memCopy_AXY',			0xA6B9);
define_label('sys_memClear_AY',			0xA6C4);
define_label('sys_memClear_XY',			0xA6D1);
define_label('sys_solCmd_wait_A',		0xA84D);
define_label('sys_solCmd_A',			0xA895);
define_label('sys_memSet_ABY',			0xA6E3);
define_label('sys_pulseFlasher_A',		0xA9EC);
define_label('sys_printString_BXY',		0xB97B);
define_label('sys_setFlag_A',			0xCC3A);
define_label('syscall_E166',			0xE166);	# prevent bad LOOP
define_label('sys_addBonus_1130',		0xFAA8);
define_label('sys_addBonus_3330',		0xFAAE);
define_label('sys_addBonus_5530',		0xFAB4);
define_label('sys_addBonus_9930',		0xFABA);
define_label('sys_addBonus_A',			0xFABE);

1;
