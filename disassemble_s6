#!/usr/bin/perl
#======================================================================
#					 D I S A S S E M B L E _ S 6 
#					 doc: Fri May 25 13:09:52 2024
#					 dlm: Fri Apr 25 18:01:33 2025
#					 (c) 2014 idealjoker@mailbox.org
#					 uE-Info: 39 0 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# WMS System 6 Game Disassembly Instructions

# HISTORY:
#	May 25, 2024: - created from [disassemble_AlienPoker]
#	May 27, 2024: - added -A
#	May 28, 2024: - negated -a
#	Jun  3, 2024: - made -A silently mandatory (requried for compilation)
#	Jun  7, 2024: - added new -A option for Sys 6A
#	Jun  8, 2024: - added defSwitch() and defLamp()
#	Jun  9, 2024: - adapated to improved switch script decoding
#	Aug 10, 2024: - removed -h (structure hints)
#	Aug 25, 2024: - updated
#	Apr 25, 2025: - added -G)reenROM
#				  - added -f

use lib ($0 =~ m@/[^/]*$@,$`);												# load [D711.pm]
use D711 (6);		

#----------------------------------------------------------------------
# Usage
#----------------------------------------------------------------------

use Getopt::Std;

die("Usage:\t$0\n\t\t[dump -l)abels] [-u)se <label-file>]\n\t\t" .
			"[-i)nclude <file[,...]>\n\t\t" .
			"[list -a)ddressse in output] [list -c)ode bytes]\n\t\t" . 
			"[suppress -g)ap data]\n\t\t" . 
			"[create -f)ree space from FF blocks]\n\t\t" . 
			"[disable code-s)tructure analysis]\n\t\t" .
			"[System 6-A) binary] [-G)reenROM binary]\n\t\t" .
			"<ROM image>\n")
	unless &getopts('AacfGgi:ls') && @ARGV==1;

$D711::print_addrs	=  $opt_a;												# -a) include hex addresses in output
$D711::print_code	=  $opt_c;												# -c) include code bytes in output
$D711::fill_gaps	= !$opt_g;

if (defined($opt_i)) {														# include files with perl code
	my(@linc) = split(',',$opt_i);
	while (@linc) {
		require './' . shift(@linc);
	}	
}

#----------------------------------------------------------------------
# Load ROM Image
#----------------------------------------------------------------------

$start_addr = $opt_G ? 0x7000 : 0x6000;

if (-f $ARGV[0]) 		  { &D711::load_ROM($ARGV[0],$start_addr); }
elsif (-f "$ARGV[0].bin") { &D711::load_ROM("$ARGV[0].bin",$start_addr); }
else 					  { &D711::load_ROM("$ARGV[0]_U14.bin",$start_addr); }

printf(STDERR "[Address range = %04X-%04X]\n",$D711::MIN_ROM_ADDR,$D711::MAX_ROM_ADDR);

#----------------------------------------------------------------------
# Code Disassembly
#----------------------------------------------------------------------

if ($opt_G) { &D711::disassemble_greenROM($opt_A); }
else		{ &D711::disassemble_System6($opt_A); }

#----------------------------------------------------------------------
# Make Human Readable
#----------------------------------------------------------------------

&D711::disassemble_unfollowed_labels();										# left overs
&D711::process_code_structure($D711::MIN_ROM_ADDR,$D711::MAX_ROM_ADDR) 		# _IF, _LOOP
	unless ($opt_s);
&D711::substitute_labels(); 												# resolve labels
&D711::substitute_identifiers();											# rename game-specific ids

&D711::apply_magic_System6($opt_A);											# e.g. ScoreByte
&D711::grow_switch_scripts();												# needs to be done when space is known

#----------------------------------------------------------------------
# Produce Output
#----------------------------------------------------------------------

if ($opt_l) {																# dump label information
	&D711::dump_labels(1);													# fmt == 1 generates code that can be used with -u
	exit(0);																# to make a disassembled file with all labels defined up-front
}

&D711::produce_output($opt_f); 												# include API in output (has to be for compilation)

exit(0);

#======================================================================
# Utilities
#======================================================================

sub defSwitch($$)
{
	my($no,$name) = @_;

	die("defSwitch: invalid switch number $no\n")
		unless ($no>=1 && $no<65);
	$D711::Switch[$no-1] = $name;
}

sub defLamp($$$)
{
	my($row,$col,$name) = @_;

	die("defLamp: invalid lamp row number $row\n")
		unless ($row>=1 && $row<=8);
	die("defLamp: invalid lamp column number $row\n")
		unless ($col>=1 && $col<=8);
	$D711::Lamp[8*($col-1)+$row-1] = $name;
}


