#======================================================================
#                    D 7 1 1 . S Y S T E M 6 
#                    doc: Mon May 27 16:31:28 2024
#                    dlm: Sat Apr 26 10:48:44 2025
#                    (c) 2024 idealjoker@mailbox.org
#                    uE-Info: 35 68 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# System 6 (Green ROM) Disassembly Information

# HISTORY:
#   May 27, 2024: - created 
#	May 28, 2024: - added switch script decoding
#				  - added _bonusScore support
#	Jun  7, 2024: - greatly improved disassembly of switch scripts
#				  - implemented apply_magic_System6() to find
#					all score bytes
#	Jun  8, 2024: - improved error message
#	Jun  9, 2024: - improved switch script handling to grow
#					scripts into empty space
#	Jun 15, 2024: - BUG: sound table was words, not bytes
#				  - improved warning messages
#	Jun 21, 2024: - added direct_code_path() to magic, because this
#					is used commonly to avoid long jumps
#	Jul 20, 2024: - moved isMember() to [D711.pm]
#	Aug 23, 2024: - added support for <_LOOP and >_EXITLOOP pseusdo labels
#	Aug 25, 2024: - generalized support for lexical labels
#	Feb 22, 2025: - BUG: switch script magic produced garbage in Gorgar
#	Mar  2, 2025: - changed identifier
#	Apr 23, 2025: - added divider
#	Apr 24, 2025: - improved SW_outhole handling for Firepower, which
#					does not use standard outhole handler (because of
#					multiball)
#	Apr 25, 2025: - tightened score magic so it works also with the GreenROM
#	Apr 26, 2025: - renamed labels for conistency with [System6.API]
# HISTORY END

#----------------------------------------------------------------------
# System6 API
#----------------------------------------------------------------------

require "$PATH/System$WMS_System.API";

#----------------------------------------------------------------------
# System Switches
#----------------------------------------------------------------------

$Switch[0x00] = 'SW_bobTilt';					 
$Switch[0x01] = 'SW_ballTilt';
$Switch[0x02] = 'SW_creditButton';
$Switch[0x03] = 'SW_coinRight';
$Switch[0x04] = 'SW_coinCenter';
$Switch[0x05] = 'SW_coinLeft';
$Switch[0x06] = 'SW_slamTilt';
$Switch[0x07] = 'SW_HSreset';
$Switch[0x08] = 'SW_outhole';

#----------------------------------------------------------------------
# System Lamps
#----------------------------------------------------------------------

$Lamp[0x30] = 'L_sys_bonusOverflow';	  
$Lamp[0x31] = 'L_sys_BB_1pGame';
$Lamp[0x32] = 'L_sys_BB_2pGame';
$Lamp[0x33] = 'L_sys_BB_3pGame';
$Lamp[0x34] = 'L_sys_BB_4pGame';
$Lamp[0x35] = 'L_sys_BB_match';
$Lamp[0x36] = 'L_sys_BB_ballInPlay';
$Lamp[0x37] = 'L_sys_BB_credits';
$Lamp[0x38] = 'L_sys_BB_playerUp_1';
$Lamp[0x39] = 'L_sys_BB_playerUp_2';
$Lamp[0x3A] = 'L_sys_BB_playerUp_3';
$Lamp[0x3B] = 'L_sys_BB_playerUp_4';
$Lamp[0x3C] = 'L_sys_BB_tilt';
$Lamp[0x3D] = 'L_sys_BB_gameOver';
$Lamp[0x3E] = 'L_sys_BB_samePlayerShootsAgain';
$Lamp[0x3F] = 'L_sys_BB_highScore';

#----------------------------------------------------------------------
# Switch Scripts
#	- consists of preamble with control byte, debounce interval, etc.
#	  followed by conditionals
#	- usually, the last conditional is an SS_OTHERWISE (= always)
#	- this is not the case in TriZone, however, where at least
#	  one of the switch routines does not have an otherwise clause
#	- the solution is to decode only the first conditional and,
#	  if this is not SS_OTHERWISE, continue the script after 
#	  everything else has been disassembled (before fillign the gaps)
#	- stripBang flag is required because def_switch_script is
#	  also called after label resolution (during magic)
#----------------------------------------------------------------------

sub def_switch_script($$@)										
{
	my($sn,$addr,$stripBang) = @_;
	return if $decoded[$addr];

	$Address = $addr;
	my($SC) = BYTE($Address);
	def_byte_hex($sn . '_script','Switch Script',				# script control byte
					'control byte [' . (($SC & 0b0001) ? 'long' : 'short')
									 . (($SC >> 4) ? sprintf(' with %d pinops',($SC >> 4)) : '')
									 . ']');	    
	my($slen) = 2;												# script statement length
	$slen += 4 if ($SC & 0b0001);								# extended script
	$slen += ($SC >> 4);										# pinops
	def_byte_dec('',undef,'debounce timer') if ($SC & 0b0100);	# debounce timer
	def_byteblock_hex(2,'',undef,'solenoid op') if ($SC & 0b1000);	# solenoid command & timer
	def_switch_conditional($slen);

	if ($stripBang) {
		for (my($a)=$addr; $a<$Address; $a++) {
			foreach my $opa (@{$OPA[$a]}) {
				$opa =~ s/(.*)!/\1/;
            }
        }
    }
}

sub grow_switch_scripts()
{
	for (my($i)=0; $i<@SSaddr; $i++) {
		$Address = $SSaddr[$i];
		my($slen) = $SSslen[$i];
		while (!$decoded[$Address]) {
			def_switch_conditional($slen);
			for (my($a)=$SSaddr[$i]; $a<$Address; $a++) {					# remove bangs
				foreach my $opa (@{$OPA[$a]}) {
					$opa =~ s/(.*)!/\1/;
				}
	        }
			last if (BYTE($Address-$slen) == 0);							# script ends with SS_DEFAULT
		}
	}
}

sub def_switch_conditional($)
{
	my($slen) = @_;

	my($bAddress) = $Address;
	$OP[$bAddress] = '.DB';
	$IND[$bAddress] = 8; 
	$TYPE[$bAddress] =	$CodeType_data;
	$REM[$bAddress] = 'conditional branch';
	push(@{$OPA[$bAddress]},(BYTE($Address) == 0)			# conditional
								? 'SS_DEFAULT' 
								: (BYTE($Address) < 0x40) 
									? sprintf('Lamp#%02X',BYTE($Address)) 
									: sprintf('Flag#%02X',BYTE($Address)-0x40));
	$decoded[$Address++] = 1;

	push(@{$OPA[$bAddress]},score_str(BYTE($Address),$Address,$opt_A));
	$decoded[$Address++] = 1;

#	if ($SC & 0b0001) { 													# extended script (code unnecessary)
#		for (my($i)=0; $i<4; $i++) {
#			push(@{$OPA[$bAddress]},sprintf('$%02X!',BYTE($Address)));
#		$decoded[$Address++] = 1;
#		}
#	}

	while ($Address < $bAddress+$slen) {
		push(@{$OPA[$bAddress]},sprintf('$%02X!',BYTE($Address)));
		$decoded[$Address++] = 1;
	}

	if (BYTE($Address-$slen) != 0) {										# other conditional exist, save info for later processing
		push(@SSaddr,$Address);
		push(@SSslen,$slen);
    }
}

#----------------------------------------------------------------------
# Game Disassembly Routine
#----------------------------------------------------------------------

sub disassemble_System6($)
{
	our($opt_A) = @_;														# export into def_switch_script

	$systemConstants{SS_DEFAULT} = 0;										# Switch Script conditional

	$Address = 0x6000;														# Game Definition Table
	def_byte_hex('GAMEROM_CHECKSUM');
	def_word_hex('GAME_NUMBER');
	def_byte_hex('GAMEROM_VERSION');
	def_byte_hex('CMOS_CHECKBYTE');

	def_byte_hex('DEFAULT_HIGHSCORE','Game Adjustments');										# Game Adjustments
	def_byte_hex('DEFAULT_REPLAYLVL_1');
	def_byte_hex('DEFAULT_REPLAYLVL_2');
	def_byte_hex('DEFAULT_REPLAYLVL_3');
	def_byte_hex('DEFAULT_REPLAYLVL_4');
	def_byte_hex('DEFAULT_MAXCREDITS');
	def_byte_hex('DEFAULT_COINSELECT');
	def_byte_hex('DEFAULT_COINSLOT_1');
	def_byte_hex('DEFAULT_COINSLOT_2');
	def_byte_hex('DEFAULT_COINSLOT_3');
	def_byte_hex('DEFAULT_COINS4CREDIT');
	def_byte_hex('DEFAULT_COINS4BONUSCREDIT');
	def_byte_hex('DEFAULT_HIGHSCORE_CREDITS');
	def_byte_hex('DEFAULT_MATCHAWARD');
	def_byte_hex('DEFAULT_SPECIALAWARD');
	def_byte_hex('DEFAULT_REPLAYAWARD');
	def_byte_hex('DEFAULT_TILTWARNINGS');
	def_byte_hex('DEFAULT_BALLS_PER_GAME');
	def_byte_hex('DEFAULT_AD31');
	def_byte_hex('DEFAULT_AD32');
	def_byte_hex('DEFAULT_AD33');
	def_byte_hex('DEFAULT_AD34');
	def_byte_hex('DEFAULT_AD35');
	def_byteblock_hex(40,'DEFAULT_COIN_TABLE');							

	def_byte_hex('MAX_SWITCH','Misc Game Data');												# Game Data
	def_byte_hex('BALLSERVE_SOLCMD_AND_1EB_FLAG');
	def_byte_LampOrFlag('EXTRABALL_LAMP');
	def_byte_hex('MAX_PLAYER');
	def_byte_hex('INTERVALTRIGGER_1');
	def_byte_hex('INTERVALTRIGGER_2');
	def_byte_hex('INTERVALTRIGGER_3');
	def_byte_hex('INTERVALTRIGGER_4');
	def_byte_hex('BLINK_DELAY');
	def_byte_hex('INTERVALTRIGGER_PINOPP_1');
	def_byte_hex('INTERVALTRIGGER_PINOPP_2');
	def_byte_hex('INTERVALTRIGGER_PINOPP_3');
	def_byte_hex('INTERVALTRIGGER_PINOPP_4');
	def_byte_LampOrFlag('SCRIPT_LAMPS');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
	def_bitgrouptable(8,'BITGROUP_TABLE');
	def_byteblock_hex(8,'LAMPS_INITDATA','Lamp/Flag Initialization and Memory Data');
	def_byteblock_hex(2,'FLAGS_INITDATA');
	def_byteblock_hex(8,'BLINK_INITDATA');
	def_byteblock_hex(8,'LAMPS_MEMDATA');
	def_byteblock_hex(2,'FLAGS_MEMDATA');
	def_byteblock_hex(8,'BLINK_MEMDATA');
	def_byteblock_hex_cols(32,2,'SOUND_TABLE','Sound Table');
	def_byteblock_hex(8,'PINOP_SOLCMD_TABLE','PinOp Solenoid Tables');
	def_byteblock_hex(8,'PINOP_SOLOP_TABLE');
	def_byte_hex('BONUSCOUNT_BONUSX_DELAY','Outhole Bonus Data');
	def_byte_hex('BONUSCOUNT_SOUND');
	def_byte_hex('BONUSCOUNT_DELAY');
	def_byte_LampOrFlag('BONUSLAMPS_TABLE');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
	def_byte_LampOrFlag('BONUSX_LAMPS_TABLE');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
	def_byteblock_hex(4,'BONUSX_VALUE_TABLE');
	def_byte_hex('SPECIAL_SCORE','Misc Game Data');
	def_byte_hex('SYSSND_CREDIT','System Sounds');
	def_byte_hex('SYSSND_CREDIT_DELAY');
	def_byte_hex('SYSSND_TILTWARNING');
	def_ptr_hex('GAMELOGIC_TABLE','System Pointers');
	def_ptr_hex('GAMELOGIC_TABLE_END');
	def_ptr_hex('GAMEEVENTS_TABLE');
	def_ptr_hex('GAMEEVENTS_TABLE_END');
	def_code_ptr('GAME_BACKGROUND_HANDLER','game_background_handler','Game Background Event Handler');
	def_code_ptr('BALLSTART_EVENT','ballstart_event_handler','Ball Start Event Handler');
	def_code_ptr('BONUSX_COUNTDOWN_EVENT','bonusX_countdown_event_handler','BonusX Countdown Event Handler');
	def_code_ptr('END_OF_BALL_EVENT','endOfBall_event_handler','End of Ball Event Handler');
	def_ptr_hex('SOUNDSCRIPT_P1','System Soundscripts');
	def_ptr_hex('SOUNDSCRIPT_P2');
	def_ptr_hex('SOUNDSCRIPT_P3');
	def_ptr_hex('SOUNDSCRIPT_P4');
	def_ptr_hex('SOUNDSCRIPT_MATCH');
	def_ptr_hex('SOUNDSCRIPT_HIGHSCORE');
	def_ptr_hex('SOUNDSCRIPT_GAMEOVER');
	def_byteblock_code(3,'IRQ_HANDLER','IRQ hook');
	def_byte_hex('ATTRACT_DELAY','Attract Mode Data');
	def_byte_hex('ATTRACT_SEQ_MAX');
	def_ptr_hex('ATTRACT_DATA');

	$Address = 0x60F5;														# Switch Table
	insert_divider($Address,'Switch Table');
	my($n) = BYTE(0x6044);
	for (my($i)=0; $i<$n; $i++) {							
		my($sn) = defined($Switch[$i]) ? $Switch[$i] : sprintf('Switch%02X',$i);		
		def_code_ptr($sn,$sn . '_handler','Switch Handler');
		if ($i == 8 && WORD($Address) != 0) {								# Switch#08 (outhole)
			def_ptr_hex('bonusScorePtr');
			my($saddr) = $Address;
			$Address = WORD($Address-2);
			def_byte_hex('_bonusScore','Outhole Bonus Value');
			$OPA[$Address-1][0] =~ m{\$(..)};
			$OPA[$Address-1][0] = score_str(hex($1),$Address-1,$opt_A);
			$Address = $saddr;
        } elsif (WORD($Address-2) == 0x7230) {								# Switch Script
			def_ptr_hex($sn . '_scriptPtr');
			my($saddr) = $Address;
			$Address = WORD($Address-2);
			def_switch_script($sn,$Address)
				unless (defined($OP[$Address]));
			$Address = $saddr;												# return to switch table
		} else {															# M6800 Switch Handler
            if (WORD($Address)>0 && WORD($Address)>=$MIN_ROM_ADDR && WORD($Address)<=$MAX_ROM_ADDR) {
				push(@switchScriptCandidateAddr,WORD($Address));
				push(@switchScriptCandidateName,$sn);
				def_ptr_hex($sn . '_scriptPtr');
            } else {														# data
				def_byteblock_hex(2,$sn . '_params');
            }
		}
	}

	$Address = WORD(0x60D0);												# Status Update Table
	my($n) = (WORD(0x60D2) - $Address) / 9;
	if ($n > 0) {
		die unless ($n==int($n));
		insert_divider($Address,'Game Logic Table');
		def_byteblock_hex_cols(9,9,'gameLogic_1');			 
		for (my($i)=2; $i<=$n; $i++) {
			def_byteblock_hex_cols(9,9,"gameLogic_$i");
		}
	}
    
	$Address = WORD(0x60D4);												# Game Event Table
	my($n) = (WORD(0x60D6) - $Address) / 4;
	if ($n > 0) {
		die("$n") unless ($n==int($n));
		insert_divider($Address,'Game Events Table');
		def_byte_LampOrFlag('gameEvents_table');
		def_byte_dec('');
		def_code_ptr('',$Gameevent[0] ? "${Gameevent[0]}_handler" : "gameEvent_1_handler");
		for (my($i)=2; $i<=$n; $i++) {
				def_byte_LampOrFlag('');
				def_byte_dec('');
				def_code_ptr('',$Gameevent[$i-1] ? "${Gameevent[$i-1]}_handler" : "gameEvent_${i}_handler");
		}
	}
    
	insert_divider($Address,'Sound Scripts');
	my($len);
	for (my($p)=0; $p<4; $p++) {
		$Address = WORD(0x60E0+2*$p);										# Sound Scripts
		next if $decoded[$Address];
		def_byte_hex(sprintf('p%dStart_sndList',$p+1));
		def_bytelist_hex(0,'');
	}
	$Address = WORD(0x60E8); 
	unless ($decoded[$Address]) {
		def_byte_hex('match_sndList');
		def_bytelist_hex(0,'');
	}
	$Address = WORD(0x60EA); 
	unless ($decoded[$Address]) {
		def_byte_hex('highScore_sndList');
		def_bytelist_hex(0,'');
	}
	$Address = WORD(0x60EC); 
	unless ($decoded[$Address]) {
		def_byte_hex('gameOver_sndList');
		def_bytelist_hex(0,'');
	}

	$Address = WORD(0x60F3);												# Attract Mode Data
	insert_divider($Address,'Attract Mode Lamp Data');
	my($n) = BYTE(0x60F2) + 1;
	def_byteblock_hex(6,'attract_mode_data');
	for (my($i)=2; $i<=$n; $i++) {
		def_byteblock_hex(6,'');
	}

	for (my($i)=0; $i<@switchScriptCandidateAddr; $i++) {
		next if $decoded[$switchScriptCandidateAddr[$i]];
		def_switch_script($switchScriptCandidateName[$i],$switchScriptCandidateAddr[$i]);
    }
}

sub disassemble_greenROM()
{
	$Address = 0x7000; def_code('sys_reset_game');							# System Calls
	$Address = 0x7045; def_code('sys_gameOver');
	$Address = 0x7062; def_code('sys_background_loop');
	$Address = 0x719A; def_code('sys_enter_audits_and_adjustments');
	$Address = 0x71CB; def_code('sys_solCmdOrPlaySound[A]');
	$Address = 0x71EC; def_code('sys_solCmd[A]');
	$Address = 0x71C9; def_code('sys_exec_switchSolCmd');
	$Address = 0x721F; def_code('sys_B=RAM[X+B]');
	$Address = 0x72A8; def_code('sys_award_SPECIAL');
	$Address = 0x7230; def_code('sys_switch_script');
	$Address = 0x7300; def_code('sys_lampStatusUpdate_then_run_timedScripts');
	$Address = 0x7306; def_code('sys_clearScoreQueue_outhole_handler');
	$Address = 0x730D; def_code('sys_outhole_handler');
	$Address = 0x73E9; def_code('sys_start_ball');
	$Address = 0x740A; def_code('sys_ball_kickout');
	$Address = 0x7426; def_code('sys_end_of_game');
	$Address = 0x7457; def_code('sys_match_handler');
	$Address = 0x746B; def_code('sys_endOfGame_noMatch');
	$Address = 0x7520; def_code('sys_load_playerData');
	$Address = 0x7562; def_code('sys_X=playerData');
	$Address = 0x7571; def_code('sys_creditButton_handler');
	$Address = 0x75C2; def_code('sys_add_player_to_game');
	$Address = 0x75D8; def_code('sys_init_ball');
	$Address = 0x75F0; def_code('sys_clear_scoreQueue');
	$Address = 0x75FE; def_code('sys_coinLeft_handler');
	$Address = 0x7602; def_code('sys_coinCenter_handler');
	$Address = 0x7606; def_code('sys_coinRight_handler');
	$Address = 0x766C; def_code('sys_award_freeGame');
	$Address = 0x76CC; def_code('sys_delay[B]');
	$Address = 0x76D9; def_code('sys_delay[AB]');
	$Address = 0x76DD; def_code('sys_copyRAM');
	$Address = 0x76F1; def_code('sys_lampStatusUpdate');
	$Address = 0x7832; def_code('sys_pinOp_solCmd');
	$Address = 0x79BF; def_code('sys_exitOnGameOverOrTilt');
	$Address = 0x79C6; def_code('sys_exit');
	$Address = 0x79CB; def_code('sys_play_soundScript');
	$Address = 0x7744; def_code('sys_execGameLogicUpdate[X]');
	$Address = 0x777C; def_code('sys_testBit');
	$Address = 0x77A8; def_code('sys_run_timedScripts');
	$Address = 0x77F0; def_code('sys_play_sound');
	$Address = 0x7925; def_code('sys_light_EBlamp');
	$Address = 0x7897; def_code('sys_setBitgroup');
	$Address = 0x780E; def_code('sys_pinOp[A]');
	$Address = 0x78A8; def_code('sys_bitgroupOp[A]_until[B]');
	$Address = 0x7980; def_code('sys_checkAdjustment');
	$Address = 0x792C; def_code('sys_setBit');
	$Address = 0x793D; def_code('sys_clearBit');
	$Address = 0x794A; def_code('sys_blinkLamps');
	$Address = 0x7953; def_code('sys_BX=lampMask[A]');
	$Address = 0x7993; def_code('sys_bobTilt_handler');
	$Address = 0x79A3; def_code('sys_ballTilt_handler');
	$Address = 0x79B6; def_code('sys_tilt_sound');
	$Address = 0x79E4; def_code('sys_score[A]');
	$Address = 0x7A00; def_code('sys_score[A]_now');
	$Address = 0x7AD6; def_code('sys_clear_displays');
	$Address = 0x7AD8; def_code('sys_fill_displays');
	$Address = 0x7AE3; def_code('sys_clear_BB_RAM');
	$Address = 0x7B09; def_code('sys_bookkeeping_menu');
	$Address = 0x7C8F; def_code('sys_start_game');
	$Address = 0x7DF8; def_code('sys_mergeCopy_[X]_to_[Xptr]');
	$Address = 0x7E0B; def_code('sys_splitCopy_[X]_to_[Xptr]');
	$Address = 0x7E1E; def_code('sys_B=shiftLeft4[X,X+1]');
	$Address = 0x7E2D; def_code('sys_splitStore[B]');
	$Address = 0x7E36; def_code('sys_HSreset_handler');
	$Address = 0x7E4C; def_code('sys_IRQ_handler');
	$Address = 0x7E9D; def_code('sys_IRQ_handler_display[A]');

	$Address = 0x7FDC;														# System Data Tables
	insert_divider($Address,'System Data');
	setLabel('system_data-1',$Address-1);
	def_byteblock_hex(16,'system_data');
	def_ptrblock_hex(12,'PIA_list');

	$Address = 0x7FF8;														# CPU vectors
	insert_divider($Address,'CPU Vectors');
	def_code_ptr('IRQ_vector','IRQ_handler','CPU Vector Handler');
	def_code_ptr('SWI_vector','SWI_handler','CPU Vector Handler');
	def_code_ptr('NMI_vector','NMI_handler','CPU Vector Handler');
	def_code_ptr('RST_vector','RST_handler','CPU Vector Handler');
}

#----------------------------------------------------------------------
# Post Disassembly Magic
#----------------------------------------------------------------------

sub score_str($$$)
{
	my($score_byte,$addr,$opt_A) = @_;

	my($sstr) = sprintf('%02X',$score_byte);
	print(STDERR sprintf("score_str: invalid score string $sstr at address \$%04X\n",$addr))
		unless (substr($sstr,1,1) =~ m{[0-58-D]});
	my($mult) = hex(substr($sstr,0,1));
	my($expo) = (hex(substr($sstr,1,1)) & 0x07);
	$expo += 1 if $opt_A;
	my($scoreStr) = "${mult}x1";
	$scoreStr .= '0' while ($expo-- > 0);
	$scoreStr =~ s/000$/K/;
	my($sys) = $opt_A ? 's6A' : 's6';
    return (hex(substr($sstr,1,1)) & 0x08) ? "$scoreStr\{ScoreByte_noSound.$sys\}" 
									  	   : "$scoreStr\{ScoreByte.$sys\}";
}

sub direct_code_path($$)
{
	my($addr,$target_re) = @_;

	my(@branch_ops) = ('BRA','BNE','BEQ','BHI','BLS','BCC','BCS','BVC','BVS','BMI','BPL','BLT','BGE','BGT','BLE');
	my(@jump_ops) 	= ('JMP');
	my(@sbr_ops) 	= ('JSR','BSR');

	return 0 unless isMember($OP[$addr],@branch_ops,@jump_ops,@sbr_ops);		# no path unless jump op
	return 1 if ($OPA[$addr][0] =~ m{$target_re});								# path if reached target
	return 0 if ($OPA[$addr][0] =~ m{^[\<\>]});									# no path on lexical branches
	return 0 if ($OPA[$addr][0] =~ m{^\d+,X$});									# no path on indexed jmps

	die($OPA[$addr][0]) unless defined($Lbl{$OPA[$addr][0]});
	return direct_code_path($Lbl{$OPA[$addr][0]},$target_re);
}
	

sub apply_magic_System6($)
{
	my($opt_A) = @_;

	for (my($addr)=$MIN_ROM_ADDR+2; $addr<=$MAX_ROM_ADDR; $addr++) {			# loop through addresses
		if (direct_code_path($addr,'^sys_score\[A\]$') ||
			direct_code_path($addr,'^sys_score\[A\]_now$')) {
			if ($OP[$addr-2] eq 'LDAA' && $OPA[$addr-2][0] =~ m{^#}) {
				$OPA[$addr-2][0] =~ m{\$(..)};
				$OPA[$addr-2][0] = '#' . score_str(hex($1),$addr,$opt_A);
            } else {
				printf(STDERR "WARNING: unknown score value (register A) for syscall $OPA[$addr][0] at address \$%04X\n",$addr);
            }
        }
		if (direct_code_path($addr,'^sys_switch_script$')) {
			my($script_addr);
			if ($OP[$addr-5] eq 'LDX') {
				if ($OPA[$addr-5][0] =~ m{^#}) {
					if ($' =~ m{\$([0-9A-F]{4})}) {
						$script_addr = hex($1);
					} else {
						$script_addr = $Lbl{$'}
					}
					die unless ($script_addr>=$MIN_ROM_ADDR && $script_addr<$MAX_ROM_ADDR);
					def_switch_script("unknown_$1",$script_addr,1);
				}
			} else {
				printf(STDERR "WARNING: unknown switch script called at address \$%04X\n",$addr);
			}
	    }
    }
}

1; 																# return true
