#======================================================================
#                    D 7 1 1 . S Y S T E M 6 
#                    doc: Mon May 27 16:31:28 2024
#                    dlm: Tue May 28 13:46:20 2024
#                    (c) 2024 idealjoker@mailbox.org
#                    uE-Info: 178 0 NIL 0 0 72 0 2 4 NIL ofnI
#======================================================================

# System 6 (Green ROM) Disassembly Information

# HISTORY:
#   May 27, 2024: - created 
#	May 28, 2024: - added switch script decoding
#				  - added _bonusScore support

#----------------------------------------------------------------------
# System6 API
#----------------------------------------------------------------------

require "$PATH/System$WMS_System.API";

#----------------------------------------------------------------------
# System Switches
#----------------------------------------------------------------------

$Switch[0x00] = 'SW_bobTilt';					 
$Switch[0x01] = 'SW_ballTilt';
$Switch[0x02] = 'SW_creditButton';
$Switch[0x03] = 'SW_coinRight';
$Switch[0x04] = 'SW_coinCenter';
$Switch[0x05] = 'SW_coinLeft';
$Switch[0x06] = 'SW_slamTilt';
$Switch[0x07] = 'SW_HSreset';
$Switch[0x08] = 'SW_outhole';

#----------------------------------------------------------------------
# System Lamps
#----------------------------------------------------------------------

$Lamp[0x30] = 'L_sys_bonusOverflow';	  
$Lamp[0x31] = 'L_sys_BB_1pGame';
$Lamp[0x32] = 'L_sys_BB_2pGame';
$Lamp[0x33] = 'L_sys_BB_3pGame';
$Lamp[0x34] = 'L_sys_BB_4pGame';
$Lamp[0x35] = 'L_sys_BB_match';
$Lamp[0x36] = 'L_sys_BB_ballInPlay';
$Lamp[0x37] = 'L_sys_BB_credits';
$Lamp[0x38] = 'L_sys_BB_playerUp_1';
$Lamp[0x39] = 'L_sys_BB_playerUp_2';
$Lamp[0x3A] = 'L_sys_BB_playerUp_3';
$Lamp[0x3B] = 'L_sys_BB_playerUp_4';
$Lamp[0x3C] = 'L_sys_BB_tilt';
$Lamp[0x3D] = 'L_sys_BB_gameOver';
$Lamp[0x3E] = 'L_sys_BB_samePlayerShootsAgain';
$Lamp[0x3F] = 'L_sys_BB_highScore';

#----------------------------------------------------------------------
# Disassembly Routines
#----------------------------------------------------------------------

sub disassemble_System6()
{
	$Address = 0x6000;														# Game Definition Table
	def_byte_hex('GAMEROM_CHECKSUM');
	def_word_hex('GAME_NUMBER');
	def_byte_hex('GAMEROM_VERSION');
	def_byte_hex('CMOS_CHECKBYTE');

	def_byte_hex('DEFAULT_HIGHSCORE');										# Game Adjustments
	def_byte_hex('DEFAULT_REPLAYLVL_1');
	def_byte_hex('DEFAULT_REPLAYLVL_2');
	def_byte_hex('DEFAULT_REPLAYLVL_3');
	def_byte_hex('DEFAULT_REPLAYLVL_4');
	def_byte_hex('DEFAULT_MAXCREDITS');
	def_byte_hex('DEFAULT_COINSELECT');
	def_byte_hex('DEFAULT_COINSLOT_1');
	def_byte_hex('DEFAULT_COINSLOT_2');
	def_byte_hex('DEFAULT_COINSLOT_3');
	def_byte_hex('DEFAULT_COINS4CREDIT');
	def_byte_hex('DEFAULT_COINS4BONUSCREDIT');
	def_byte_hex('DEFAULT_HIGHSCORE_CREDITS');
	def_byte_hex('DEFAULT_MATCHAWARDS');
	def_byte_hex('DEFAULT_SPECIALAWARD');
	def_byte_hex('DEFAULT_REPLAYAWARD');
	def_byte_hex('DEFAULT_TILTWARNINGS');
	def_byte_hex('DEFAULT_BALLS_PER_GAME');
	def_byte_hex('DEFAULT_AD31');
	def_byte_hex('DEFAULT_AD32');
	def_byte_hex('DEFAULT_AD33');
	def_byte_hex('DEFAULT_AD34');
	def_byte_hex('DEFAULT_AD35');
	def_byteblock_hex(40,'DEFAULT_COIN_TABLE');							

	def_byte_hex('MAX_SWITCH');												# Game Data
	def_byte_hex('BALLSERVE_SOLCMD_AND_1EB_FLAG');
	def_byte_LampOrFlag('EXTRABALL_LAMP');
	def_byte_hex('MAX_PLAYER');
	def_byte_hex('CYCLECOUNTER_1');
	def_byte_hex('CYCLECOUNTER_2');
	def_byte_hex('CYCLECOUNTER_3');
	def_byte_hex('CYCLECOUNTER_4');
	def_byte_hex('BLINK_DELAY');
	def_byte_hex('CYCLECOUNTER_PINOPP_1');
	def_byte_hex('CYCLECOUNTER_PINOPP_2');
	def_byte_hex('CYCLECOUNTER_PINOPP_3');
	def_byte_hex('CYCLECOUNTER_PINOPP_4');
	def_byte_LampOrFlag('SCRIPT_LAMPS');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
	def_bitgrouptable(8,'BITGROUP_TABLE');
	def_byteblock_hex(8,'LAMPS_INITDATA');
	def_byteblock_hex(2,'FLAGS_INITDATA');
	def_byteblock_hex(8,'BLINK_INITDATA');
	def_byteblock_hex(8,'LAMPS_MEMDATA');
	def_byteblock_hex(2,'FLAGS_MEMDATA');
	def_byteblock_hex(8,'BLINK_MEMDATA');
	def_wordblock_hex(32,'SOUND_TABLE');
	def_byteblock_hex(8,'PBPINOPP_SOLCMD_TABLE_1');
	def_byteblock_hex(8,'PBPINOPP_SOLCMD_TABLE_2');
	def_byte_hex('BONUSCOUNT_BONUSX_DELAY');
	def_byte_hex('BONUSCOUNT_SOUND');
	def_byte_hex('BONUSCOUNT_DELAY');
	def_byte_LampOrFlag('BONUSLAMPS_TABLE');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
	def_byte_LampOrFlag('BONUSX_LAMPS_TABLE');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
		def_byte_LampOrFlag('');
	def_byteblock_hex(4,'BONUSX_VALUE_TABLE');
	def_byte_hex('SPECIAL_SCORE');
	def_byte_hex('SND_CREDIT');
	def_byte_hex('SND_CREDIT_DELAY');
	def_byte_hex('SND_TILT');
	def_ptr_hex('STATUSUPDATE_TABLE');
	def_ptr_hex('STATUSUPDATE_TABLE_END');
	def_ptr_hex('GAMEEVENTS_HANDLER_TABLE');
	def_ptr_hex('GAMEEVENTS_HANDLER_TABLE_END');
	def_code_ptr('GAME_BACKGROUND_HANDLER','game_background_handler','Game Background Event Handler');
	def_code_ptr('BALLSTART_EVENT','ballstart_event_handler','Ball Start Event Handler');
	def_code_ptr('BONUSX_COUNTDOWN_EVENT','bonusX_countdown_event_handler','BonusX Countdown Event Handler');
	def_code_ptr('BALLDRAIN_EVENT','balldrain_event_handler','End of Ball Event Handler');
	def_ptr_hex('SOUNDSCRIPT_P1');
	def_ptr_hex('SOUNDSCRIPT_P2');
	def_ptr_hex('SOUNDSCRIPT_P3');
	def_ptr_hex('SOUNDSCRIPT_P4');
	def_ptr_hex('SOUNDSCRIPT_MATCH');
	def_ptr_hex('SOUNDSCRIPT_HIGHSCORE');
	def_ptr_hex('SOUNDSCRIPT_GAMEOVER');
	def_byteblock_code(3,'IRQ_HANDLER');
	def_byte_hex('ATTRACT_DELAY');
	def_byte_hex('ATTRACT_SEQ_MAX');
	def_ptr_hex('ATTRACT_DATA');

	$Address = 0x60F5;														# Switch Table
	insert_divider($Address,'Switch Table');
	my($n) = BYTE(0x6044);
	for (my($i)=0; $i<$n; $i++) {							
		my($sn) = defined($Switch[$i]) ? $Switch[$i] : sprintf('Switch%02X',$i);		
		def_code_ptr($sn,$sn . '_handler','Switch Handler');
		if ($i == 8) {														# Switch#08 (outhole)
			def_ptr_hex('bonusScorePtr');
			my($saddr) = $Address;
			$Address = WORD($Address-2);
			def_byte_hex('_bonusScore');
			$Address = $saddr;
        } elsif (WORD($Address-2) == 0x7230) {								# Switch Script
			def_ptr_hex($sn . '_scriptPtr');
			my($saddr) = $Address;
			$Address = WORD($Address-2);
			unless (defined($OP[$Address])) {
				my($SC) = def_byte_hex($sn . '_script');					# script control byte
				my($slen) = 2;												# script statement length
				$slen += 4 if ($SC & 0b0001);								# extended script
				$slen += ($SC >> 4);										# pinops
				def_byte_hex('') if ($SC & 0b0100); 						# debounce timer
				def_byteblock_hex(2) if ($SC & 0b1000); 					# solenoid command & timer
				do {
					def_byteblock_hex($slen);								# script statement
	            } while (BYTE($Address-$slen) != 0);
            }
			$Address = $saddr;
		} else {															# M6800 Switch Handler
			def_byteblock_hex(2,$sn . '_params');
		}
	}

	$Address = WORD(0x60D0);												# Status Update Table
	my($n) = (WORD(0x60D2) - $Address) / 9;
	if ($n > 0) {
		die unless ($n==int($n));
		insert_divider($Address,'Status Update Table');
		def_byteblock_hex_cols(9,9,'statusUpdate_1');			 
		for (my($i)=2; $i<=$n; $i++) {
			def_byteblock_hex_cols(9,9,"statusUpdate_$i");
		}
	}
    
	$Address = WORD(0x60D4);												# Game Event Table
	my($n) = (WORD(0x60D6) - $Address) / 4;
	if ($n > 0) {
		die("$n") unless ($n==int($n));
		insert_divider($Address,'Game Event Table');
		def_byte_LampOrFlag('gameEvent_table');
		def_byte_dec('');
		def_code_ptr('',$Gameevent[0] ? "${Gameevent[0]}_handler" : "gameEvent_1_handler");
		for (my($i)=2; $i<=$n; $i++) {
				def_byte_LampOrFlag('');
				def_byte_dec('');
				def_code_ptr('',$Gameevent[$i-1] ? "${Gameevent[$i-1]}_handler" : "gameEvent_${i}_handler");
		}
	}
    
	my($len);
	for (my($p)=0; $p<4; $p++) {
		$Address = WORD(0x60E0+2*$p);										# Sound Scripts
		next if $decoded[$Address];
		def_byte_hex(sprintf('p%dStart_sndList',$p+1));
		def_bytelist_hex(0,'');
	}
	$Address = WORD(0x60E8); 
	unless ($decoded[$Address]) {
		def_byte_hex('match_sndList');
		def_bytelist_hex(0,'');
	}
	$Address = WORD(0x60EA); 
	unless ($decoded[$Address]) {
		def_byte_hex('highScore_sndList');
		def_bytelist_hex(0,'');
	}
	$Address = WORD(0x60EC); 
	unless ($decoded[$Address]) {
		def_byte_hex('gameOver_sndList');
		def_bytelist_hex(0,'');
	}

	$Address = WORD(0x60F3);												# Attract Mode Data
	insert_divider($Address,'Attract Mode Lamp Data');
	my($n) = BYTE(0x60F2) + 1;
	def_byteblock_hex(6,'attract_mode_data');
	for (my($i)=2; $i<=$n; $i++) {
		def_byteblock_hex(6,'');
	}
}

sub disassemble_greenROM()
{
	$Address = 0x7000; def_code('sys_reset_game');							# System Calls
	$Address = 0x7045; def_code('sys_gameOver');
	$Address = 0x7062; def_code('sys_background_loop');
	$Address = 0x719A; def_code('sys_enter_audits_and_adjustments');
	$Address = 0x71CB; def_code('sys_solCmdOrPlaySound[A]');
	$Address = 0x71EC; def_code('sys_solCmd[A]');
	$Address = 0x71C9; def_code('sys_exec_switchSolCmd');
	$Address = 0x721F; def_code('sys_B=RAM[X+B]');
	$Address = 0x72A8; def_code('sys_award_SPECIAL');
	$Address = 0x7230; def_code('sys_switch_script');
	$Address = 0x7300; def_code('sys_lampStatusUpdate_then_run_timedScripts');
	$Address = 0x7306; def_code('sys_clearScoreQueue_outhole_handler');
	$Address = 0x730D; def_code('sys_outhole_handler');
	$Address = 0x73E9; def_code('sys_start_ball');
	$Address = 0x740A; def_code('sys_ball_kickout');
	$Address = 0x7426; def_code('sys_end_of_game');
	$Address = 0x7457; def_code('sys_match_handler');
	$Address = 0x746B; def_code('sys_endOfGame_noMatch');
	$Address = 0x7520; def_code('sys_load_playerData');
	$Address = 0x7562; def_code('sys_X=playerData');
	$Address = 0x7571; def_code('sys_creditButton_handler');
	$Address = 0x75C2; def_code('sys_add_player_to_game');
	$Address = 0x75D8; def_code('sys_init_game');
	$Address = 0x75F0; def_code('sys_clear_scoreQueue');
	$Address = 0x75FE; def_code('sys_coinLeft_handler');
	$Address = 0x7602; def_code('sys_coinCenter_handler');
	$Address = 0x7606; def_code('sys_coinRight_handler');
	$Address = 0x766C; def_code('sys_award_freeGame');
	$Address = 0x76CC; def_code('sys_delay[B]');
	$Address = 0x76D9; def_code('sys_delay[AB]');
	$Address = 0x76DD; def_code('sys_copyRAM');
	$Address = 0x76F1; def_code('sys_lampStatusUpdate');
	$Address = 0x7832; def_code('sys_pinOp_solCmd');
	$Address = 0x79BF; def_code('sys_exitOnGameOverOrTilt');
	$Address = 0x79C6; def_code('sys_exit');
	$Address = 0x79CB; def_code('sys_play_soundScript');
	$Address = 0x7744; def_code('sys_execStatusupdate[X]');
	$Address = 0x777C; def_code('sys_testBit');
	$Address = 0x77A8; def_code('sys_run_timedScripts');
	$Address = 0x77F0; def_code('sys_play_sound');
	$Address = 0x7925; def_code('sys_light_EBlamp');
	$Address = 0x7897; def_code('sys_setBitgroup');
	$Address = 0x780E; def_code('sys_pinOp[A]');
	$Address = 0x78A8; def_code('sys_bitgroupOp[A]_until[B]');
	$Address = 0x7980; def_code('sys_checkAdjustment');
	$Address = 0x792C; def_code('sys_setBit');
	$Address = 0x793D; def_code('sys_clearBit');
	$Address = 0x794A; def_code('sys_blinkLamps');
	$Address = 0x7953; def_code('sys_BX=lampMask[A]');
	$Address = 0x7993; def_code('sys_bobTilt_handler');
	$Address = 0x79A3; def_code('sys_ballTilt_handler');
	$Address = 0x79B6; def_code('sys_tilt_sound');
	$Address = 0x79E4; def_code('sys_score[A]');
	$Address = 0x7A00; def_code('sys_score[A]_now');
	$Address = 0x7AD6; def_code('sys_clear_displays');
	$Address = 0x7AD8; def_code('sys_fill_displays');
	$Address = 0x7AE3; def_code('sys_clear_BB_RAM');
	$Address = 0x7B09; def_code('sys_bookkeeping_menu');
	$Address = 0x7C8F; def_code('sys_start_game');
	$Address = 0x7DF8; def_code('sys_mergeCopy_[X]_to_[Xptr]');
	$Address = 0x7E0B; def_code('sys_splitCopy_[X]_to_[Xptr]');
	$Address = 0x7E1E; def_code('sys_B=shiftLeft4[X,X+1]');
	$Address = 0x7E2D; def_code('sys_splitStore[B]');
	$Address = 0x7E36; def_code('sys_HSreset_handler');
	$Address = 0x7E4C; def_code('sys_IRQ_handler');
	$Address = 0x7E9D; def_code('sys_IRQ_handler_display[A]');

	$Address = 0x7FDC;														# System Data Tables
	insert_divider($Address,'System Data');
	setLabel('system_data-1',$Address-1);
	def_byteblock_hex(16,'system_data');
	def_ptrblock_hex(12,'PIA_list');

	$Address = 0x7FF8;														# CPU vectors
	insert_divider($Address,'CPU Vectors');
	def_code_ptr('IRQ_vector','IRQ_handler','CPU Vector Handler');
	def_code_ptr('SWI_vector','SWI_handler','CPU Vector Handler');
	def_code_ptr('NMI_vector','NMI_handler','CPU Vector Handler');
	def_code_ptr('RST_vector','RST_handler','CPU Vector Handler');
}

1; # return true
