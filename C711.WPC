#======================================================================
#                    C 7 1 1 . W P C 
#                    doc: Mon May 26 08:07:03 2025
#                    dlm: Fri Jun 13 12:09:15 2025
#                    (c) 2025 idealjoker@mailbox.org
#                    uE-Info: 17 44 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	May 26, 2025: - created
#	May 27, 2025: - BUG: %SYSCALL used wrong key
#	May 29, 2025: - added code_addr()
#	Jun  1, 2025: - BUG: code_addr() returned wrong address in prime RE
#	Jun  2, 2025: - added unroll_structure() and asm_macros()
#	Jun  8, 2025: - adapted to %System_Option
#	Jun 10, 2025: - added ROM_Size option
#	Jun 13, 2025: - added RPG initialization
# HISTORY END

use strict vars;

our($RPG) = 0xFF;														# initialize RPG

#----------------------------------------------------------------------
# System Options
#	WPC_Version = Al[phanumeric]/DM[D]
#	ROM_Size	= 256KB, 512KB, 1MB
#----------------------------------------------------------------------

our($opt_S,%System_Option,%ALIAS,%ALIAS_REFD);

if (defined($opt_S)) {
	foreach my $o (split(':',$opt_S)) {
		next if $o eq 'WPC';
		my($k,$v) = ($o =~ m{^([^=]+)=(.*)$});
		die("Invalid system option <$k=$v>\n")
			unless isMember($k,'WPC_Version','ROM_Size');
		$System_Option{$k} = defined($v) ? $v : 1;
	}
}

#----------------------------------------------------------------------
# Structured Programming
#----------------------------------------------------------------------

sub unroll_structure()
{
	unroll_asm_structure();
}


#----------------------------------------------------------------------
# Macro Support
#----------------------------------------------------------------------

sub asm_macros()
{
	return asm_6809_macros();
}


#----------------------------------------------------------------------
# System Calls
#----------------------------------------------------------------------

our(%SYSCALL,@SC_ADDR,@SC_ARGS,@SC_NOTE,$ADDR);

sub define_syscall($$@)
{
	my($lbl,$addr,$args,$note) = @_;
##	printf(STDERR "define_syscall($lbl,%04X,$args,$note) ->",$addr);
	$args = '' unless defined($args);
	$note = '' unless defined($note);

	define_label($lbl,$addr);
	push(@SC_ADDR,$addr);
	push(@SC_ARGS,$args);
	push(@SC_NOTE,$note);
	$SYSCALL{$lbl} = $#SC_ADDR;
##	print(STDERR "#$#SC_ADDR ($SC_ADDR[$#SC_ADDR]|$SC_ARGS[$#SC_ARGS]|$SC_NOTE[$#SC_NOTE]\n");
}


#----------------------------------------------------------------------
# ROM to CPU Address Mapping
#----------------------------------------------------------------------

sub code_addr(@)														# 1MB ROM -> page address
{
	my($ROM_addr) = @_;
	$ROM_addr = $ADDR unless defined($ROM_addr);
	return $ROM_addr if ($ROM_addr < 0x4000);							# RAM or IO address
	my($RPG) = int($ROM_addr / 0x4000);
	return ($RPG <= 0x3D) ? ($ROM_addr % 0x4000) + 0x4000
						  : ($ROM_addr - 0x3C*0x4000);
}


sub code_PG(@)															# 1MB ROM -> page id
{
	my($ROM_addr) = @_;
	$ROM_addr = $ADDR unless defined($ROM_addr);
	my($RPG) = int($ROM_addr / 0x4000);
	return ($RPG <= 0x3D) ? $RPG : 'FF';
}


sub code_ref(@)															# 1MB ROM -> pg:address
{
	my($ROM_addr) = @_;
	$ROM_addr = $ADDR unless defined($ROM_addr);
	my($RPG) = int($ROM_addr / 0x4000);
	return ($RPG <= 0x3D) ? sprintf('$%02X:%04X',$RPG,($ROM_addr % 0x4000) + 0x4000)
						  : sprintf('$FF:%04X',($ROM_addr - 0x3D*0x4000));
}

1; 
