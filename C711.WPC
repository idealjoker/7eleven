#======================================================================
#                    C 7 1 1 . W P C 
#                    doc: Mon May 26 08:07:03 2025
#                    dlm: Fri Jul 25 11:29:35 2025
#                    (c) 2025 idealjoker@mailbox.org
#                    uE-Info: 348 48 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	May 26, 2025: - created
#	May 27, 2025: - BUG: %SYSCALL used wrong key
#	May 29, 2025: - added code_addr()
#	Jun  1, 2025: - BUG: code_addr() returned wrong address in prime RE
#	Jun  2, 2025: - added unroll_structure() and asm_macros()
#	Jun  8, 2025: - adapted to %System_Option
#	Jun 10, 2025: - added ROM_Size option
#	Jun 13, 2025: - added RPG initialization
#	Jun 16, 2025: - added compile_pragma()
#				  - added .STR
#	Jun 22, 2025: - BUG: opt_t was not declared
#	Jun 27, 2025: - BUG: .STR were not encoded correctly
#	Jul  1, 2025: - added .STR## for strings w/o 0 termination
#	Jul  2, 2025: - added checkSumWPC()
#	Jul  3, 2025: - added compilation_magic()
#	Jul 25, 2025: - added syntax checking for PRAGMAs in  non-compiled code
# HISTORY END

use strict vars;

our($RPG) = 0xFF;														# initialize RPG

#----------------------------------------------------------------------
# System Options
#	WPC_Version = alpha/89
#	ROM_Size	= 256KB, 512KB, 1MB
#----------------------------------------------------------------------

our($opt_S,%System_Option,%ALIAS,%ALIAS_REFD);

if (defined($opt_S)) {
	foreach my $o (split(':',$opt_S)) {
		next if $o eq 'WPC';
		my($k,$v) = ($o =~ m{^([^=]+)=(.*)$});
		die("Invalid system option <$k=$v>\n")
			unless isMember($k,'WPC_Version','ROM_Size');
		$System_Option{$k} = defined($v) ? $v : 1;
	}
}

#----------------------------------------------------------------------
# Compilation Magic
#----------------------------------------------------------------------

sub compilation_magic()
{
	s{\@CHECKSUM_INFO}{\@CHECKSUM_INFO 0 0};								# make sure 3 bytes are allocated for CHECKSUM_INFO
}

#----------------------------------------------------------------------
# Checksum Handling
#----------------------------------------------------------------------

our(@ROM,$MIN_ROM_ADDR,$MAX_ROM_ADDR);

sub checkSumWPC()
{
	my($sum) = 0;

	for (my($a)=$MIN_ROM_ADDR; $a<=$MAX_ROM_ADDR; $a++) {
		$sum += defined($ROM[$a]) ? $ROM[$a] : 0xFF;
    }
    return $sum & 0xFFFF;
}

#----------------------------------------------------------------------
# Structured Programming
#----------------------------------------------------------------------

sub unroll_structure()
{
	unroll_asm_structure();
}


#----------------------------------------------------------------------
# Macro Support
#----------------------------------------------------------------------

sub asm_macros()
{
	return asm_6809_macros();
}


#----------------------------------------------------------------------
# System Calls
#----------------------------------------------------------------------

our(%SYSCALL,@SC_ADDR,@SC_ARGS,@SC_NOTE,$ADDR);

sub define_syscall($$@)
{
	my($lbl,$addr,$args,$note) = @_;
##	printf(STDERR "define_syscall($lbl,%04X,$args,$note) ->",$addr);
	$args = '' unless defined($args);
	$note = '' unless defined($note);

	define_label($lbl,$addr);
	push(@SC_ADDR,$addr);
	push(@SC_ARGS,$args);
	push(@SC_NOTE,$note);
	$SYSCALL{$lbl} = $#SC_ADDR;
##	print(STDERR "#$#SC_ADDR ($SC_ADDR[$#SC_ADDR]|$SC_ARGS[$#SC_ARGS]|$SC_NOTE[$#SC_NOTE]\n");
}


#----------------------------------------------------------------------
# ROM to CPU Address Mapping
#----------------------------------------------------------------------

sub code_addr(@)														# 1MB ROM -> page address
{
	my($ROM_addr) = @_;
	$ROM_addr = $ADDR unless defined($ROM_addr);
	return $ROM_addr if ($ROM_addr < 0x4000);							# RAM or IO address
	my($RPG) = int($ROM_addr / 0x4000);
	return ($RPG <= 0x3D) ? ($ROM_addr % 0x4000) + 0x4000
						  : ($ROM_addr - 0x3C*0x4000);
}


sub code_PG(@)															# 1MB ROM -> page id
{
	my($ROM_addr) = @_;
	$ROM_addr = $ADDR unless defined($ROM_addr);
	my($RPG) = int($ROM_addr / 0x4000);
	return ($RPG <= 0x3D) ? $RPG : 'FF';
}


sub code_ref(@)															# 1MB ROM -> pg:address
{
	my($ROM_addr) = @_;
	$ROM_addr = $ADDR unless defined($ROM_addr);
	my($RPG) = int($ROM_addr / 0x4000);
	return ($RPG <= 0x3D) ? sprintf('$%02X:%04X',$RPG,($ROM_addr % 0x4000) + 0x4000)
						  : sprintf('$FF:%04X',($ROM_addr - 0x3D*0x4000));
}


our(@IF_STACK,$MODE);

sub compile_pragma()
{
	our($OP,@OP_ARG);
    return undef unless ($OP =~ m{^\.});												# not a PRAGMA

	return 1 if compile_common_pragma();
	if ($IF_STACK[$#IF_STACK] < 0) {													# not compiling code => syntax check
		die("Unknown mode-$MODE .PRAGMA <$OP @OP_ARG> on line $.\n")
			unless isMember($OP,'.M6809_MODE','.DATA_MODE') ||
				   isMember($OP,'.DR','.DBR','.DBRB','.DBRWB','.DBBRB') ||
				   ($OP =~ m{^.STR\d*$}) ||
                   isMember($OP,'.ORG','.ASSUME_DP','.DP','.SET_DP');
		return 1;                   
	}
	
	our(@ROM,$MIN_ROM_ADDR,$MAX_ROM_ADDR,$MODE,$FIRST_ADDR,$DP,@LINE,$opt_v,$opt_1,$opt_t);

	#------------------------------
	# Mode Checking
	#------------------------------

	if ($MODE==0 && $OP eq '.M6809_MODE') {    
		die("Syntax: .M6809_MODE (<@_> at input line $.)\n")
			unless (@OP_ARG == 0);
		$MODE = 1;
		return 1;
	}

	if ($OP eq '.DATA_MODE') {	  
		die("Syntax: .DATA_MODE (<@_> at input line $.)\n")
			unless (@OP_ARG == 0);
		$MODE = 0;																		# don't set to mode 3, because after any data mode byte, there can be any mode
		return 1;
    }

    #----------------
    # Data Definition
    #----------------

   	if (($MODE == 0) || ($MODE == 3)) {
		if ($OP eq '.DR') { 																# .DR (define WPC code ref)
			die("Syntax: .DR WPC-ref (<@_> at input line $.)\n")
				unless (@OP_ARG == 2);
			set_label_type(1);
			$ROM[$ADDR++] = $OP_ARG[0]; $ROM[$ADDR++] = '16-BIT VALUE'; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; shift(@OP_ARG);
			die(".DBR invalid WPC reference page (<@_> at input line $.)\n")
				unless ($ROM[$ADDR]<=0x3D) || ($ROM[$ADDR]==0xFF);
			return 1;
		}
	
		if ($OP eq '.DBR') {																# .DBR (define byte followed by WPC ref)
			die("Syntax: .DBR byte-val WPC-ref (<@_> at input line $.)\n")
				unless (@OP_ARG == 3);
			set_label_type(3);
			$ROM[$ADDR++] = $OP_ARG[0]; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; $ROM[$ADDR++] = '16-BIT VALUE'; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; shift(@OP_ARG);
			die(".DBR invalid WPC reference page (<@_> at input line $.)\n")
				unless ($ROM[$ADDR]<=0x3D) || ($ROM[$ADDR]==0xFF);
			return 1;
		}
	
		if ($OP eq '.DBRB') {																# .DBRB (define byte, WPC ref, followed by bytes)
			die("Syntax: .DBRB byte-val WPC-ref (<@_> at input line $.)\n")
				unless (@OP_ARG >= 5);
			set_label_type(3);
			$ROM[$ADDR++] = $OP_ARG[0]; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; $ROM[$ADDR++] = '16-BIT VALUE'; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; 
			die(".DBR invalid WPC reference page (<@_> at input line $.)\n")
				unless ($ROM[$ADDR]<=0x3D) || ($ROM[$ADDR]==0xFF);
			for (shift(@OP_ARG); @OP_ARG > 0; shift(@OP_ARG)) {
				$ROM[$ADDR++] = $OP_ARG[0]; 
			}
			return 1;
		}
	
		if ($OP eq '.DBRWB') {																# .DBRWB (define byte, WPC ref, word, followed by bytes)
			die("Syntax: .DBRWB byte-val WPC-ref (<@_> at input line $.)\n")
				unless (@OP_ARG >= 6);
			set_label_type(3);
			$ROM[$ADDR++] = $OP_ARG[0]; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; $ROM[$ADDR++] = '16-BIT VALUE'; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; shift(@OP_ARG);
			die(".DBR invalid WPC reference page (<@_> at input line $.)\n")
				unless ($ROM[$ADDR]<=0x3D) || ($ROM[$ADDR]==0xFF);
			$ROM[$ADDR++] = $OP_ARG[0]; $ROM[$ADDR++] = '16-BIT VALUE';
			for (shift(@OP_ARG); @OP_ARG > 0; shift(@OP_ARG)) {
				$ROM[$ADDR++] = $OP_ARG[0]; 
			}
			return 1;
		}
	
		if ($OP eq '.DBBRB') {																# .DBBRB (define 2 bytes, WPC ref, followed by bytes)
			die("Syntax: .DBBRB byte-val byte-vale WPC-ref byte-val[...] (<@_> at input line $.)\n")
				unless (@OP_ARG >= 5);
			set_label_type(3);
			$ROM[$ADDR++] = $OP_ARG[0]; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; $ROM[$ADDR++] = '16-BIT VALUE'; shift(@OP_ARG);
			$ROM[$ADDR++] = $OP_ARG[0]; 
			die(".DBBRB invalid WPC reference page (<@_> at input line $.)\n")
				unless ($ROM[$ADDR-1]<=0x3D) || ($ROM[$ADDR-1]==0xFF);
			for (shift(@OP_ARG); @OP_ARG > 0; shift(@OP_ARG)) {
				$ROM[$ADDR++] = $OP_ARG[0];
			}
			return 1;
		}
	
		if ($OP =~ m{^.STR}) {																# .STR[len] (define string)
			my($tl) = $';
			my($str) = m{\.STR\d*\s+'(.*)'\s*$}; 												# extract string from original source line
			($str) = ($OP_ARG[0] =~ m{^'(.*)'$})											# possibly an ALIAS, in which case OP_ARG[0] is the substituted string
				if (length($str) == 0);
			die("Syntax: .STR 'string' (<'$str'> at input line $.)\n")						# not either
				unless (length($str) > 0);
			set_label_type(3);
			die("Syntax: .STR 'string' (<'$str'> at input line $.)\n")						# regular string
				unless (@OP_ARG >= 1 && length($str) > 0);
			my($sl) = 0;
			for (my($i)=0; $i<length($str); $i++) {
				if (substr($str,$i,2) eq '\\\\') {
					$sl++;
					$ROM[$ADDR++] = ord('\\');
					$i += 1;
				} elsif (substr($str,$i,1) eq '\\') {
					$sl++;
					$ROM[$ADDR++] = hex(substr($str,$i+1,2));
					$i += 2;
				} else {
					$sl++;
					$ROM[$ADDR++] = ord(substr($str,$i,1));
				}
			}
			if (length($tl)>0) {
				die("Invalid string length <$sl> for $OP at input line $.\n")
					unless $sl == $tl;
			} else {
				$ROM[$ADDR++] = 0x00;														# terminate it
			}
			return 1;
	    }
	}

    #-----------------
    # Address Handling
    #-----------------

    if ($OP eq '.ORG') {                                                               		# .ORG
    	$ADDR = $OP_ARG[0];
		if ($ADDR =~ m{^\$?([0-9A-Fa-f]{2}):\$?([0-9A-Fa-f]{4})$}) {
			die("Syntax: .ORG PG:ADDR (<@_> at input line $.)\n")
				unless defined($2);
			my($pg) = hex($1);
			my($ad) = hex($2);
			die("Cannot decode <$OP_ARG[0]> at input line $.\n")
				unless numberp($pg) && numberp($ad);
			$RPG  = $pg;
			$ADDR = ($pg == 0xFF) ? (0x3C*0x4000 + $ad)
								  : ($pg*0x4000 + ($ad - 0x4000));
			die(sprintf(".ORG ROM address \$%05X out of valid range [\$%05X-\$%05X] at input line $.\n",$ADDR,$MIN_ROM_ADDR,$MAX_ROM_ADDR))
				unless ($ADDR >= $MIN_ROM_ADDR && $ADDR <= $MAX_ROM_ADDR);
		} else {
			die("Syntax: .ORG <PG:ADDR> (<@_> at input line $.)\n");
        }

        $FIRST_ADDR = $ADDR if ($ADDR < $FIRST_ADDR);

		if (defined($ROM[$ADDR])) {
			my($nBytes) = 0;
			while (defined($ROM[$ADDR + ++$nBytes])) {}
			if ($opt_v || $opt_t) {
				printf(STDERR "%5d: WARNING: ROM overflow (<.ORG \$%04X>) at input line $.\n",$LINE[$ADDR],$ADDR);
			} else {
				die(sprintf("ROM overflow ($nBytes bytes; <.ORG \$%04X> replacing $ROM[$ADDR]) at input line $.\n",$ADDR))
					unless $opt_1;
			}
		}
        return 1;
    }

    if (isMember($OP,'.ASSUME_DP','.DP','.SET_DP')) {									# set direct page register for compiler
		if ($OP_ARG[0] =~ m{^([\$%]?)([0-9A-Fa-f]+)$}) {
			   if ($1 eq '$') { $DP = hex($2); }										# decimalize
			elsif ($1 eq '%') { $DP = eval('0b' . $2); }
			else			  { $DP = $2; }
			die("Cannot decode number <$OP_ARG[0]> at input line $.\n")
	            unless numberp($DP);
	        return 1;
	    } else {
	    	die("Syntax: $OP addr-MSB (<$OP @OP_ARG> at input line $.)\n");
	    }
    }

	die("Unknown mode-$MODE .PRAGMA <$OP @OP_ARG> on line $.\n");
}

1; 
