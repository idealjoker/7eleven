#!/usr/bin/perl
#======================================================================
#					 D I S A S S E M B L E _ W P C _ D M D 
#					 doc: Thu Jul 18 06:30:12 2024
#					 dlm: Sun Aug 18 14:14:41 2024
#					 (c) 2024 idealjoker@mailbox.org
#					 uE-Info: 148 0 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# WMS WPC Game Disassembly Instructions

# HISTORY:
#	Jul 18, 2024: - created in Zermatt
#	Aug  9, 2024: - continued
#	Aug 10, 2024: - continued

use lib ($0 =~ m@/[^/]*$@,$`);												# load [D711.pm]
use D711 ('WPC_DMD');		

#----------------------------------------------------------------------
# Usage
#----------------------------------------------------------------------

use Getopt::Std;

die("Usage:\t$0\n\t\t[dump -l)abels] [-u)se <label-file>]\n\t\t" .
			"[-i)nclude <file[,...]>\n\t\t" .
			"[list -a)ddressse in output] [list -c)ode bytes]\n\t\t" . 
			"[suppress -g)ap data]\n\t\t" . 
			"[suppress code-s)tructure analysis]\n\t\t" .
			"<ROM image>\n")
	unless &getopts('acgi:ls') && @ARGV==1;

$D711::print_addrs	=  $opt_a;												# -a) include hex addresses in output
$D711::print_code	=  $opt_c;												# -c) include code bytes in output
$D711::fill_gaps	= !$opt_g;

#----------------------------------------------------------------------
# Load ROM
#----------------------------------------------------------------------

$D711::_cur_RPG = 0x20;
&D711::load_ROM($ARGV[0],0x4000,$D711::_cur_RPG,16);						# Load ROM: first game page (512KB ROM)
&D711::load_ROM($ARGV[0],0x8000,0x3E,32);									# Load ROM: System pages

if (defined($opt_i)) {														# include files with perl code AFTER ROM is loaded
	my(@linc) = split(',',$opt_i);
	while (@linc) {
		require './' . shift(@linc);
	}	
}

#----------------------------------------------------------------------
# Disassemble ROM
#----------------------------------------------------------------------

&D711::init_WPC_DMD();
&D711::disassemble_WPC_DMD();												# Code Disassembly

#----------------------------------------------------------------------
# Make Human Readable
#----------------------------------------------------------------------

&D711::process_code_structure(0x8000,0xFFFF)								# if, while, ...
	unless ($opt_s);
&D711::substitute_labels(0x8000,0xFFFF); 									# resolve labels
&D711::substitute_identifiers(0x8000,0xFFFF);								# rename game-specific ids
&D711::apply_magic_WPC_DMD(0x8000,0xFFFF);  	                            # e.g. ScoreByte

for (my($rpg)=0x20; $rpg<0x3E; $rpg++) {
#	print(STDERR "select_WPC_RPG($rpg)\n");
	&D711::select_WPC_RPG($rpg);
	&D711::process_code_structure(0x4000,0x7FFF)							# if, while, ...
		unless ($opt_s);
	&D711::substitute_labels(0x4000,0x7FFF); 								# resolve labels
	&D711::substitute_identifiers(0x4000,0x7FFF);							# rename game-specific ids
	&D711::apply_magic_WPC_DMD(0x4000,0x7FFF);                              # e.g. ScoreByte
}

#----------------------------------------------------------------------
# Produce Output
#----------------------------------------------------------------------

if ($opt_l) {																# dump label information
	&D711::dump_labels();													# fmt == 1 generates code that can be used with -u
	exit(0);																# to make a disassembled file with all labels defined up-front
}

&D711::select_WPC_RPG(0x20);												# 1st game pg with headers
my($decoded) = &D711::produce_output(0x4000,0x7FFF,1);
for (my($rpg)=0x21; $rpg<0x3E; $rpg++) {									# remaining game pages without headers
	&D711::select_WPC_RPG($rpg);		
	$decoded += &D711::produce_output(0x4000,0x7FFF,0);
}
$decoded += &D711::produce_output(0x8000,0xFFFF,0);							# WPC System

printf("; %.1f KB decoded\n",$decoded/1024);

exit(0);

#======================================================================
# Utilities
#======================================================================

sub defSwitch($$)
{
	my($no,$name) = @_;

	die("defSwitch: invalid switch number $no\n")
		unless ($no>=0 && $no<65);
	$D711::Switch[$no] = $name;
}

sub defLamp($$$)
{
	my($row,$col,$name) = @_;

	die("defLamp: invalid lamp row number $row\n")
		unless ($row>=1 && $row<=8);
	die("defLamp: invalid lamp column number $row\n")
		unless ($col>=1 && $col<=8);
	$D711::Lamp[8*($col-1)+$row] = $name;
}

sub defFlag($$)
{
	my($no,$name) = @_;

	die("defFlag: invalid flag number $no\n")
		unless ($no>=0 && $no<65);
	$D711::Flag[$no] = $name;
}

sub defLabel($$$)
{
	my($pg,$addr,$lbl) = @_;

	D711::select_WPC_RPG($pg);
	D711::define_label($lbl,$addr);
}

sub defAdjustment($$)
{
	my($no,$name) = @_;

	die("defFlag: invalid adjustment number $no\n")
		unless ($no>=0 && $no<65);
	$D711::Adj[$no] = $name;
}

