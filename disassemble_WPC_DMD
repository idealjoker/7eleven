#!/usr/bin/perl
#======================================================================
#					 D I S A S S E M B L E _ W P C _ D M D 
#					 doc: Thu Jul 18 06:30:12 2024
#					 dlm: Wed Mar 19 06:00:23 2025
#					 (c) 2024 idealjoker@mailbox.org
#					 uE-Info: 23 51 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# WMS WPC Game Disassembly Instructions

# HISTORY:
#	Jul 18, 2024: - created in Zermatt
#	Aug  9, 2024: - continued
#	Aug 10, 2024: - continued
#	Aug 30, 2024: - re-made -l use fmt 1
#	Aug 31, 2024: - moved API loading here from [D711.WPC_DMD]
#	Sep  1, 2024: - added undocumented -Q option for beautification of Makefiles
#	Sep  3, 2024: - added -L
#	Mar 11, 2025: - adapted to updated [WPC_DMD.API]
#	Mar 14, 2025: - adapted to new function names without _DMD
#	Mar 15, 2025: - adapted to start_page
#	Mar 19, 2025: - adapted to freespace autodetect
# END OF HISTORY

#----------------------------------------------------------------------
# Usage
#----------------------------------------------------------------------

use Getopt::Std;

die("Usage:\t$0\n\t\t[dump -l)abels] [-u)se <label-file>]\n\t\t" .
			"[-L)ist labels]\n\t\t" .
			"[-i)nclude <file[,...]>\n\t\t" .
			"[list -a)ddressse in output] [list -c)ode bytes]\n\t\t" . 
			"[suppress -g)ap data]\n\t\t" . 
			"[suppress code-s)tructure analysis]\n\t\t" .
			"<ROM image>\n")
	unless &getopts('acgi:lLQs') && @ARGV==1;

use lib ($0 =~ m@/[^/]*$@,$`);												# load [D711.pm]
use D711 ('WPC(DMD)','$opt_Q = 1;');										# suppress D711 splash message

$D711::print_addrs	=  $opt_a;												# -a) include hex addresses in output
$D711::print_code	=  $opt_c;												# -c) include code bytes in output
$D711::fill_gaps	= !$opt_g;

#----------------------------------------------------------------------
# Load ROM
#----------------------------------------------------------------------

$D711::start_page = 0x20;
&D711::load_ROM($ARGV[0],0x4000,$D711::start_page,16);						# Load ROM: first game page (512KB ROM)
&D711::load_ROM($ARGV[0],0x8000,0x3E,32);									# Load ROM: System pages

#----------------------------------------------------------------------
# Disassemble ROM
#----------------------------------------------------------------------

&D711::init_WPC(split(',',$opt_i));											# load API & -i args
&D711::disassemble_MBD_system();
&D711::disassemble_syscalls();
&D711::disassemble_CPU_vectors();
&D711::disassemble_system_pointers();
&D711::disassemble_switch_tables();

#----------------------------------------------------------------------
# Make Human Readable
#----------------------------------------------------------------------

&D711::process_code_structure(0x8000,0xFFFF)								# if, while, ...
	unless ($opt_s);
&D711::substitute_labels(0x8000,0xFFFF); 									# resolve labels
&D711::substitute_identifiers(0x8000,0xFFFF);								# rename game-specific ids
&D711::apply_magic_WPC(0x8000,0xFFFF);  		                            # e.g. &skip

for (my($rpg)=$D711::start_page; $rpg<0x3E; $rpg++) {
	&D711::select_WPC_RPG($rpg);
	&D711::process_code_structure(0x4000,0x7FFF)							# if, while, ...
		unless ($opt_s);
	&D711::substitute_labels(0x4000,0x7FFF); 								# resolve labels
	&D711::substitute_identifiers(0x4000,0x7FFF);							# rename game-specific ids
	&D711::apply_magic_WPC(0x4000,0x7FFF);                              	# e.g. &split
}

#----------------------------------------------------------------------
# Produce Output
#----------------------------------------------------------------------

if ($opt_L) {																# dump label information
	&D711::dump_labels(0);													# fmt == 1 generates code that can be used with -u
	exit(0);																# to make a disassembled file with all labels defined up-front
}

if ($opt_l) {																# dump label information
	&D711::dump_labels(1);													# fmt == 1 generates code that can be used with -u
	exit(0);																# to make a disassembled file with all labels defined up-front
}

&D711::select_WPC_RPG($D711::start_page);									# 1st game pg with headers
my($decoded) = &D711::produce_output(0x4000,0x7FFF,1);	
for (my($rpg)=$D711::start_page+1; $rpg<0x3E; $rpg++) {						# remaining game pages without headers
	&D711::select_WPC_RPG($rpg);		
	$decoded += &D711::produce_output(0x4000,0x7FFF,0);
}
$D711::_cur_RPG = 0xFF;														# allow free space to be found in system code
$decoded += &D711::produce_output(0x8000,0xFFFF,0);							# WPC System

printf("; %.1f KB decoded\n",$decoded/1024);
printf("; %.1f KB free\n",$D711::freeBytes/1024)
	if ($D711::freeBytes);

exit(0);

