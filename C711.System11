#======================================================================
#                    C 7 1 1 . S Y S T E M 1 1 
#                    doc: Mon Jun  2 09:55:01 2025
#                    dlm: Fri Jul 25 11:28:51 2025
#                    (c) 2025 idealjoker@mailbox.org
#                    uE-Info: 410 48 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	Jun  2, 2025: - created
#	Jun  4, 2025: - added option parsing
#	Jun  6, 2025: - BUG: rom_addr() returned 0 on empty args
#	Jun 10, 2025: - BUG: %System_Option parsing had errors
#	Jun 12, 2025: - BUG: U26_size needs capitalization
#	Jun 16, 2025: - added compile_pragma()
#	Jul  3, 2025: - added compilation_magic()
#	Jul 16, 2025: - adapted @COMPILATION_INFO to -n
#	Jul 25, 2025: - added syntax checking for PRAGMAs in  non-compiled code
# HISTORY END

use strict vars;

#----------------------------------------------------------------------
# Compilation Magic
#----------------------------------------------------------------------

sub compilation_magic() {}

#----------------------------------------------------------------------
# Structured Programming
#----------------------------------------------------------------------

sub unroll_structure()
{
	unroll_asm_structure();													# in [C711.M6800]
	unroll_wvm_structure();													# in [C711.VM]
}

#----------------------------------------------------------------------
# Macro Support
#----------------------------------------------------------------------

sub asm_macros()
{
	my($retval) = asm_6800_macros();
	return $retval if $retval;
    return asm_wvm_macros();
}

#----------------------------------------------------------------------
# System Calls
#----------------------------------------------------------------------

sub define_syscall($$@)
{
	die("define_syscall() not implemented for Sytstem 11");
}

#----------------------------------------------------------------------
# ROM to CPU Address Mapping
#----------------------------------------------------------------------

our($ADDR);

sub code_addr(@)															# ROM addr = CPU addr
{
	my($ROM_addr) = @_;
	$ROM_addr = $ADDR unless (@_);
##	print(STDERR "code_addr(@_) -> $ROM_addr\n");
	return $ROM_addr;
}

#----------------------------------------------------------------------
# Compiler Pragmas
#----------------------------------------------------------------------

our(@IF_STACK,$MODE);

sub compile_pragma()
{
	our($OP,@OP_ARG);
    return undef unless ($OP =~ m{^\.});

	return 1 if compile_common_pragma();
	return 1 if compile_vm_pragma();
	if ($IF_STACK[$#IF_STACK] < 0) {										# not compiling code => syntax check
		die("Unknown mode-$MODE .PRAGMA <$OP @OP_ARG> on line $.\n")
			unless isMember($OP,'.S7R','.ZSTR','.ORG') ||
		  		   ($OP =~ m{^.STR\d*$});
		return 1;		  		   
	}

	our($MODE,@ROM,$MIN_ROM_ADDR,$MAX_ROM_ADDR,$FIRST_ADDR,@LINE,$opt_1,$opt_v,$opt_t);
	our($opt_n,$FREE_SP_ADDR);

	if (($MODE == 0) || ($MODE == 3)) {		

	    #--------------------------------------------------
	    # 7-Segment Strings
	    #   - hard-coded font from the Internet somewhere
	    #--------------------------------------------------

		if ($OP eq '.S7R') {																# .S7R (define 7-segment string)
			my($str) = m{\.S7R\s+'(.*)'\s*$};												# extract string from original source line
			($str) = ($OP_ARG[0] =~ m{^'(.*)'$})											# possibly an ALIAS, in which case OP_ARG[0] is the substituted string
				if (length($str) == 0);     
			die("Syntax: .S7R '7-segment string' ((<'$str'> +$_+ at input line $.)\n")
				unless (@OP_ARG >= 1 && length($str) > 0);
			set_label_type(3);
			for (my($i)=my($j)=0; 1; $i++,$j++) {
				my($c) = substr($str,$i,1);
				last unless (ord($c) > 0);
				if ($c eq '0')					{ $ROM[$ADDR++] = 0x3F; }					# this defines the font
				elsif ($c eq '1' || $c eq  'I') { $ROM[$ADDR++] = 0x06; }
				elsif ($c eq '2' || $c eq  'Z') { $ROM[$ADDR++] = 0x5B; }
				elsif ($c eq '3')				{ $ROM[$ADDR++] = 0x4F; }
				elsif ($c eq '4')				{ $ROM[$ADDR++] = 0x66; }
				elsif ($c eq '5' || $c eq  'S') { $ROM[$ADDR++] = 0x6D; }
				elsif ($c eq '6')				{ $ROM[$ADDR++] = 0x7D; }
				elsif ($c eq '7')				{ $ROM[$ADDR++] = 0x07; }
				elsif ($c eq '8' || $c eq  'B') { $ROM[$ADDR++] = 0x7F; }
				elsif ($c eq '9')				{ $ROM[$ADDR++] = 0x6F; }
				elsif ($c eq 'A')				{ $ROM[$ADDR++] = 0x77; }
				elsif ($c eq 'b')				{ $ROM[$ADDR++] = 0x7C; }
				elsif ($c eq 'C' || $c eq  'K') { $ROM[$ADDR++] = 0x39; }
				elsif ($c eq 'c')				{ $ROM[$ADDR++] = 0x58; }
				elsif ($c eq 'd')				{ $ROM[$ADDR++] = 0x5E; }
				elsif ($c eq 'E')				{ $ROM[$ADDR++] = 0x79; }
				elsif ($c eq 'F')				{ $ROM[$ADDR++] = 0x71; }
				elsif ($c eq 'G')				{ $ROM[$ADDR++] = 0x3D; }
				elsif ($c eq 'H')				{ $ROM[$ADDR++] = 0x76; }
				elsif ($c eq 'h')				{ $ROM[$ADDR++] = 0x74; }
				elsif ($c eq 'i')				{ $ROM[$ADDR++] = 0x04; }
				elsif ($c eq 'J')				{ $ROM[$ADDR++] = 0x1E; }
				elsif ($c eq 'L')				{ $ROM[$ADDR++] = 0x38; }
				elsif ($c eq 'N')				{ $ROM[$ADDR++] = 0x37; }
				elsif ($c eq 'n')				{ $ROM[$ADDR++] = 0x54; }
				elsif ($c eq 'o')				{ $ROM[$ADDR++] = 0x5C; }
				elsif ($c eq 'P')				{ $ROM[$ADDR++] = 0x73; }
				elsif ($c eq 'q' || $c eq 'g')	{ $ROM[$ADDR++] = 0x67; }
				elsif ($c eq 'R')				{ $ROM[$ADDR++] = 0x31; }
				elsif ($c eq 'r')				{ $ROM[$ADDR++] = 0x50; }
				elsif ($c eq 't')				{ $ROM[$ADDR++] = 0x78; }
				elsif ($c eq 'U' || $c eq 'V')	{ $ROM[$ADDR++] = 0x3E; }
				elsif ($c eq 'u')				{ $ROM[$ADDR++] = 0x1C; }
				elsif ($c eq 'Y')				{ $ROM[$ADDR++] = 0x6E; }
				elsif ($c eq ' ')				{ $ROM[$ADDR++] = 0x00; }
				elsif ($c eq '-')				{ $ROM[$ADDR++] = 0x40; }
				elsif ($c eq '_')				{ $ROM[$ADDR++] = 0x08; }
				elsif ($c eq ']')				{ $ROM[$ADDR++] = 0x0F; }
				elsif ($c eq '~')				{ $ROM[$ADDR++] = 0x01; }
				elsif ($c eq '=')				{ $ROM[$ADDR++] = 0x48; }
				elsif ($c eq '"')				{ $ROM[$ADDR++] = 0x22; }
				elsif ($c eq '`')				{ $ROM[$ADDR++] = 0x02; }
				elsif ($c eq "'")				{ $ROM[$ADDR++] = 0x20; }
				elsif ($c eq '/')				{ $ROM[$ADDR++] = 0x52; }
				elsif ($c eq '|')				{ $ROM[$ADDR++] = 0x30; }
				elsif ($c eq ')')				{ $ROM[$ADDR++] = 0x43; }
				elsif ($c eq '(')				{ $ROM[$ADDR++] = 0x61; }
				elsif ($c eq '*')				{ $ROM[$ADDR++] = 0x63; }
				elsif ($c eq '&')				{ $ROM[$ADDR++] = 0x5F; }
				elsif ($c eq '^')				{ $ROM[$ADDR++] = 0x21; }
				elsif ($c eq '%')				{ $ROM[$ADDR++] = 0x3D; }
				elsif ($c eq '}')				{ $ROM[$ADDR++] = 0x46; }
				elsif ($c eq '{')				{ $ROM[$ADDR++] = 0x3D; }
				elsif ($c eq '?')				{ $ROM[$ADDR++] = 0x4B; }
				elsif ($c eq '<')				{ $ROM[$ADDR++] = 0x18; }
				elsif ($c eq '>')				{ $ROM[$ADDR++] = 0x0C; }
				elsif ($c eq '\\') {
					$i++;
					if (substr($str,$i,1) eq '\\') {
						$ROM[$ADDR++] = 0x64;
					} else {
						my($code) = substr($str,$i,2);
						die("Invalid string escape sequence <\\$code> at input line $.\n")
							unless (length($code)==2 && hex($code)>=0 && hex($code)<=0xFF);
						$ROM[$ADDR++] = hex($code);
						$i++;
					}
				} # if \\
				else {
					die("Invalid 7-segment string character <$c> at input line $.\n");
				}
			} # for
			return 1;
	    }

    #------------------------------------------------------------------------------------------
    # 14-Segment Strings / String Encoding / encode_string / encode_char
    #
    # Encoding:
    #   - bit-7 set:
    #       48-127                      add a period
    #   - bit-7 clear:
    #       $00-$2F 0-47                <space>                     NB: this includes ASCII space and tab, both used in Pinbot
    #       $30-$39 48-57   176-185     <0>-<9>                     7-segment font; ASCII compatible encoding
    #       $3A-$40 58-64               <space>     
    #       $41-$5A 65-90   193-218     <A>-<Z>                     ASCII compatible encoding
    #       $5B-$62 91-98   219-226     <0>-<3>,<5>-<7>,<9>         14-segment font (fancy)
    #       $63     99      227         <all segments lit>
    #       $64-$68 100-104 228-232     <<>,<=>,<>>,<?>,<@>         ASCII block; @ is 7-segment font
    #       $69-$6B 105-107 233-235     <$>,<%>,<&>                 ASCII block
    #       $6C-$71 108-113 236-241     <,>,<.>,<+>,<->,</>,<\>     
    #       $72-$74 114-116 242-244     <]>,<^>,<_>                 ASCII block
    #       $75-$77 117-119 245-247     <{>,<*>,<}>
    #       $78     120     248         <">                         quotation start (right-aligned)
    #       $79     121     249         <[>     
    #       $7A     122     250         <">                         quotation end (left-aligned)
    #       $7B     123     251         <@>                         14-segment font
    #       $7C     124     252         <8+|>
    #       $7D     125     253         <NE arrow>
    #       $7E     126     254         <SE arrow>
    #       $7F     127     255         <SW arrow>
    #       $80     128                 <NW arrow>
    #       $81     129                 <overline>
    #       $82     130                 <'>
    #       $83-$AF 131-175             <space>
    #       $B0-$FF 176-255             <0.>,<1.>,...,<SW arrow.>   period added after base symbol
    #-----------------------------------------------------------------------------------------

		if ($OP =~ m{^.STR}) {																# .STR[len] (define string)
			my($len) = $';
			die("Syntax: .STR[len] '14-segment string' at input line $.\n")
				if numberp($len) && $len<=0;
			my($str) = m{\.STR\d*\s+'(.*)'\s*$};											# extract string from original source line
			($str) = ($OP_ARG[0] =~ m{^'(.*)'$})											# possibly an ALIAS, in which case OP_ARG[0] is the substituted string
				if (length($str) == 0);
			die("Syntax: .STR[len] '14-segment string' (<'$str'> at input line $.)\n")		# not either
				unless (length($str) > 0);
			set_label_type(3);
			if ($str eq '@FREE_SP') {													# @COMPILER VAR: free space
				$FREE_SP_ADDR = $ADDR;
			} elsif ($str eq '@COMPILATION_INFO') {										# COMPILATION_INFO
				$str = $opt_n; 															
            }
			if ($len > 0) {
				my($nop) = $str;
				$nop =~ s/\.//g; 															# remove periods
				$nop =~ s/\\../X/g;															# remove octal chars
				die("Syntax: .STR$len '$len-long 14-segment string' (<'$str'> at input line $.)\n") # regular string
					unless (@OP_ARG >= 1 && length($nop) == $len);
			} else {
				die("Syntax: .STR '14-segment string' (<'$str'> at input line $.)\n")		# regular string
					unless (@OP_ARG >= 1 && length($str) > 0);
			}
			for (my($i)=0; $i<length($str); $i++) {
				my($c) = substr($str,$i,1);
				if ($c eq '.') {
					die("Invalid 14-segment string (<'$str'> at input line $.)\n")
						unless ($i > 0);
					$ROM[$ADDR-1] |= 0x80;
				} else {
					my($o) = ord($c);
					if ($o>=ord('0') && $o<=ord('9')) {
						$ROM[$ADDR++] = $o;
					} elsif ($o>=ord('A') && $o<=ord('Z')) {
						$ROM[$ADDR++] = $o;
					} elsif ($o>=ord('<') && $o<=ord('@')) {
						$ROM[$ADDR++] = $o - ord('<') + 100;
					} elsif ($o>=ord('$') && $o<=ord('&')) {
						$ROM[$ADDR++] = $o - ord('$') + 105;
					} elsif ($o>=ord(']') && $o<=ord('_')) {
						$ROM[$ADDR++] = $o - ord(']') + 114;
					} elsif ($c eq ' ') { $ROM[$ADDR++] = 32;
					} elsif ($c eq ',') { $ROM[$ADDR++] = 108;
					} elsif ($c eq '.') { $ROM[$ADDR++] = 109;
					} elsif ($c eq '+') { $ROM[$ADDR++] = 110;
					} elsif ($c eq '-') { $ROM[$ADDR++] = 111;
					} elsif ($c eq '/') { $ROM[$ADDR++] = 112;
					} elsif ($c eq '{') { $ROM[$ADDR++] = 117;
					} elsif ($c eq '*') { $ROM[$ADDR++] = 118;
					} elsif ($c eq '}') { $ROM[$ADDR++] = 119;
					} elsif ($c eq '[') { $ROM[$ADDR++] = 121;
					} elsif ($c eq '\\') {
						$i++;
						if (substr($str,$i,1) eq '\\') {
							$ROM[$ADDR++] = 113;
						} elsif (substr($str,$i,1) eq "'") { 
							$ROM[$ADDR++] = 130;
						} else {
							my($code) = substr($str,$i,2);
							die("Invalid string escape sequence <\\$code> at input line $.\n")
								unless (length($code)==2 && hex($code)>=0 && hex($code)<=0xFF);
							$ROM[$ADDR++] = hex($code);
							$i++;
						}
					} else {
						die("Invalid character (ord = $o) (<'$str'> at input line $.)\n");
						$ROM[$ADDR++] = $o;
					}
				}
			}
			return 1;
	    }

    #------------------------------------------------------------------------------------------
    # Compressed 14-Segment Strings (Z-Strings)
    #
    #	16-long character strings,
    #		consisting only of chacaters A-Z, space, 0, 1, 2, 3 and 5, 
    #		and having a space in the last position
	#	that are compressed into 10 bytes
	#
    # Encoding (before inverting):
    #       $00                         <space>
    #       $01-$1A                     <A>-<Z>     
    #       $1B-$1E                     <0>-<3>     fancy font
    #       $1F                         <5>         fancy font
    #
    # Notes:
    #   - encoding governed by unpacking efficiency
	#	- code is inverted to allow checking for space in last position (Z-Strings)
	#	- regular strings with periods in positions 5-10 are misinterpreted as Z-strings
	#	  and cannot be displayed
    #-----------------------------------------------------------------------------------------

		my($str);
		if ($OP eq '.ZSTR') {
			($str) = m{\.ZSTR\s+'(.*)'\s*$};											   # extract string from original source line
			($str) = ($OP_ARG[0] =~ m{^'(.*)'$})											# possibly an ALIAS, in which case OP_ARG[0] is the substituted string
				if (length($str) == 0);
			die("Syntax: .ZSTR '16-character string' (<'$str'> at input line $.)\n")    
				unless (length($str) == 16);
			die(sprintf("Invalid non-space character <%s> in last positon of z-string (<'$str'> at input line $.)\n",substr($str,15)))
				unless (substr($str,15) eq ' ');
	
			set_label_type(3);
	
		ENCODE_PART_2:
			my(@ZSbit);
			for (my($i)=0; $i<8; $i++) {
				my($c) = ($i >= length($str)) ? ' ' : substr($str,$i,1);
				my($o) = ord($c);
	
				if ($c eq ' ') {						$o = 0; }
				elsif ($o>=ord('0') && $o<=ord('3')) {	$o = $o - ord('0') + 0x1B; }
				elsif ($o==ord('5'))				 {	$o = ord('4') - ord('0') + 0x1B; }
				elsif ($o>=ord('A') && $o<=ord('Z')) {	$o = $o - ord('A') + 1; }
				else { die("Invalid z-string character <$c> (<'$str'> at input line $.)\n"); }
	
#			printf(STDERR "bit%d: %08b (%s)\n",$i,$o,$c);
	
				$ZSbit[0][$i] = 1 unless ($o>>4)&0x01;
				$ZSbit[1][$i] = 1 unless ($o>>3)&0x01;
				$ZSbit[2][$i] = 1 unless ($o>>2)&0x01;
				$ZSbit[3][$i] = 1 unless ($o>>1)&0x01;
				$ZSbit[4][$i] = 1 unless ($o>>0)&0x01;
			}
	
			for (my($i)=0; $i<5; $i++) {
				my($ZSB) = 0;
				$ZSB |= 0x01 if $ZSbit[$i][0];
				$ZSB |= 0x02 if $ZSbit[$i][1];
				$ZSB |= 0x04 if $ZSbit[$i][2];
				$ZSB |= 0x08 if $ZSbit[$i][3];
				$ZSB |= 0x10 if $ZSbit[$i][4];
				$ZSB |= 0x20 if $ZSbit[$i][5];
				$ZSB |= 0x40 if $ZSbit[$i][6];
				$ZSB |= 0x80 if $ZSbit[$i][7];
				$ROM[$ADDR++] = $ZSB;
			}
	
			if (length($str) > 8) {
				$str = substr($str,8);
				undef(@ZSbit);
				goto ENCODE_PART_2;
			}
	
			return 1;
	    }
    } # mode == 0 or 3
	
	#-----------------------------------------------------------
	# Address Management
	# 	- do not move this to the beginning of the routine
	#-----------------------------------------------------------

    if ($OP eq '.ORG') {                                                               		# .ORG
    	$ADDR = $OP_ARG[0];

		if ($ADDR =~ m{^([\$%]?)([0-9A-Fa-f]+)$}) {
			die("Syntax: .ORG ROM-addr (<@_> at input line $.)\n")
				unless defined($2);
			   if ($1 eq '$') { $ADDR = hex($2); }										# decimalize
			elsif ($1 eq '%') { $ADDR = eval('0b' . $2); }
			else			  { $ADDR = $2; }
			die("Cannot decode number <$OP_ARG[0]> at input line $.\n")
				unless numberp($ADDR);
			die(sprintf(".ORG address \$%04X out of range [\$%04X-\$%04X] at input line $.\n",$ADDR,$MIN_ROM_ADDR,$MAX_ROM_ADDR))
				unless ($ADDR >= $MIN_ROM_ADDR && $ADDR <= $MAX_ROM_ADDR);
		} else {
			die("Syntax: .ORG ROM-addr (<@_> at input line $.)\n");
        }

        $FIRST_ADDR = $ADDR if ($ADDR < $FIRST_ADDR);

		if (defined($ROM[$ADDR])) {
			my($nBytes) = 0;
			while (defined($ROM[$ADDR + ++$nBytes])) {}
			if ($opt_v || $opt_t) {
				printf(STDERR "%5d: WARNING: ROM overflow (<.ORG \$%04X>) at input line $.\n",$LINE[$ADDR],$ADDR);
			} else {
				die(sprintf("ROM overflow ($nBytes bytes; <.ORG \$%04X> replacing $ROM[$ADDR]) at input line $.\n",$ADDR))
					unless $opt_1;
			}
		}
        return 1;
    }

	die("Unknown mode-$MODE .PRAGMA <$OP @OP_ARG> on line $.\n");
}

#----------------------------------------------------------------------
# System Options
#	IVM 	 = 0 .. 10			IVM stage
#	U26_Size = 16KB, 32KB		U26 ROM size (16KB default)
#----------------------------------------------------------------------

our($opt_S,%System_Option,%ALIAS,%ALIAS_REFD);

if (defined($opt_S)) {
	foreach my $o (split(':',$opt_S)) {
		next if $o eq '11';
		my($k,$v) = ($o =~ m{^\s*([^=\s]+)\s*=\s*([^\s]*)\s*$});
		die("Invalid system option <$o>\n")
			unless isMember($k,'IVM','U26_Size');
		$System_Option{$k} = defined($v) ? $v : 1;
	}
}

if (defined($System_Option{IVM})) {
	die("Invalid IVM system option value <$System_Option{IVM}>\n")
		unless numberp($System_Option{IVM}) &&
				$System_Option{IVM}>=0 &&
				$System_Option{IVM}<=10;
	my($i);     
	for ($i=1; $i<=$System_Option{IVM}; $i++) {
		$ALIAS{"IVM_STAGE$i"} = 'ALIAS_IS_DEFINED';
		$ALIAS_REFD{"IVM_STAGE$i"}++;
	}
	while ($i < 20) {
		$ALIAS_REFD{"IVM_STAGE$i"} = -99;							# prevent compiler warnings
		$i++;
	}
}				

if (defined($System_Option{U26_Size})) {
	die("Invalid U26_Size system option value <$System_Option{U26_Size}>\n")
		unless isMember($System_Option{U26_Size},'16KB','32KB');
}

1; 
