#======================================================================
#                    C 7 1 1 _ E N C O D E R . B I T M A S K 
#                    doc: Fri May 31 11:52:25 2024
#                    dlm: Mon Jul 28 20:44:35 2025
#                    (c) 2023 idealjoker@mailbox.orgXSxsq
#                    uE-Info: 27 29 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#   May 31, 2024: - created
#	Jun  8, 2024: - adapted to new interface
#	Jun 26, 2024: - BUG: BITB #L_2x{BitMask} did not work
#	Feb 16, 2025: - added support for multiple arguments
#				  - BUG: Lamp and Flag code did not work
#	Jul 14, 2025: - BUG: changes in C711 mean that the Lamps, Flags, Switches
#						 have not been substituted yet any more!
#	Jul 28, 2025: - adapted to changed 2nd arg

# NOTES:
#	- when this routine is called, lamps and flags have already
#	  been substituted (Jul 14, 2025; not sure this is true any more)
#	- the code here is only for arguments #2, #3, etc.

sub BitMask($$)
{
    my($args,$addr) = @_;														# works for Flags and Lamps, the latter of which by this stage have been decimalized
    my($line) = $LINE[$addr];

	my($mask);
	foreach my $str (split('[,|]',$args)) {
		if (defined($ALIAS{$str})) {
			$ALIAS_REFD{$str}++;
			$str = $ALIAS{$str};
		}
		if ($str =~ m{^Lamp#([0-9A-Fa-f]{2})$}) {
			my($byte,$bit) = (substr($1,0,1),substr($1,1,1));
			$bit = hex($bit); $bit-=8 if ($bit > 7);
			die("Invalid lamp number at input line $line\n")
				if ($byte > 3 || $bit > 7);
			$mask |= (1<<$bit);
		} elsif ($str =~ m{^Flag#([0-9A-Fa-f]{2})$}) {
			my($byte,$bit) = (substr($1,0,1),substr($1,1,1));
			$bit = hex($bit); $bit-=8 if ($bit > 7);
			die("Invalid flag number at input line $line\n")
				if ($byte > 3 || $bit > 7);
			$mask |= (1<<$bit);
		} elsif ($str =~ m{^Switch#([0-9A-Fa-f]{2})$}) {
			my($byte,$bit) = (substr($1,0,1),substr($1,1,1));
			$bit = hex($bit); $bit-=8 if ($bit > 7);
			die("Invalid switch number at input line $line\n")
				if ($byte > 3 || $bit > 7);
			$mask |= (1<<$bit);
		} else {
			die("Invalid argument <$str> for {BitMask} at input line $line\n")
				unless numberp($str) && ($str>=0);
			my($bit) = $str % 8;
			$mask |= (1<<$bit);
	    }
	}
	return $mask;
}

1;

