#======================================================================
#                    C 7 1 1 . P I N O P . S 6 
#                    doc: Sat Jun  8 12:22:52 2024
#                    dlm: Sat Mar  1 16:49:25 2025
#                    (c) 2023 idealjoker@mailbox.org
#                    uE-Info: 93 0 NIL 0 0 72 0 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	Oct 27, 2024: - created
#	Oct 30, 2024: - added line numbers to errors
#	Feb 19, 2025: - renamed bitgroup ops set->fill, clear->empty
#				  - BUG: fill had been alias for advance before
#	Mar  1, 2025: - renamed empty() to clear() again

#eg blink(L_name){PinOp}

sub PinOp_s6($$)
{
	my($str,$src_line) = @_;

	my($op,$arg) = ($str =~ m{^(.*)\((.*)\)$});
	die("PinOp: cannot decode '$str' at input line $src_line\n")
		unless defined($arg);
##	print(STDERR "PinOp_s6: $op($arg)\n");

	if ($op eq 'setBit') {
		if ($arg =~ m/^Lamp#([0-9A-Fa-f]{2})/) {
			return hex($1);
        } elsif ($arg =~ m/^Flag#([0-9A-Fa-f]{2})/) {
			return hex($1) + 0x40;
        } else {
			die("PinOp_s6: cannot decode bit argument '$arg' at input line $src_line\n");
        }
	} 

	if ($op eq 'clearBit') {
		if ($arg =~ m/^Lamp#([0-9A-Fa-f]{2})/) {
			return hex($1) | 0x80;
        } elsif ($arg =~ m/^Flag#([0-9A-Fa-f]{2})/) {
			return hex($1) + 0x40 | 0x80;
        } else {
			die("PinOp_s6: cannot decode bit argument '$arg' at input line $src_line\n");
        }
    }

	if ($op eq 'rotRight') {
		if ($arg =~ m/^Bitgroup#(0?[0-7])/) {
			return hex($1) | 0x50;
        } else {
			die("PinOp_s6: cannot decode bitgroup argument '$arg' at input line $src_line\n");
        }
    }

	if ($op eq 'rotLeft') {
		if ($arg =~ m/^Bitgroup#(0?[0-7])/) {
			return hex($1) | 0x58;
        } else {
			die("PinOp_s6: cannot decode bitgroup argument '$arg' at input line $src_line\n");
        }
    }

	if ($op eq 'advance') {  # what is fill?  like rotate, but doesn't carry over back to the start (?)
		if ($arg =~ m/^Bitgroup#([0-9A-Fa-f]{1})/) {
			return hex($1) | 0x60;
        } else {
			die("PinOp_s6: cannot decode bitgroup argument '$arg' at input line $src_line\n");
        }
    }

	# 6F ?  probably the opposite of advance

	if ($op eq 'clear') {
		if ($arg =~ m/^Bitgroup#(0?[0-7])/) {
			return hex($1) | 0x70;
        } else {
			die("PinOp_s6: cannot decode bitgroup argument '$arg' at input line $src_line\n");
        }
    }

	if ($op eq 'fill') {  # what is 'fill' is this actaully 'set' ?
		if ($arg =~ m/^Bitgroup#(0?[0-7])/) {
			return hex($1) | 0x78;
        } else {
			die("PinOp_s6: cannot decode bitgroup argument '$arg' at input line $src_line\n");
        }
    }

	# 80-CF: clearBit (above)

	# D0 + D8: not used per @Slochar

	if ($op eq 'drain') { # what is 'drain' ?
		if ($arg =~ m/^Bitgroup#(0?[0-7])/) {
			return hex($1) | 0xE0;
        } else {
			die("PinOp_s6: cannot decode bitgroup argument '$arg' at input line $src_line\n");
        }
    }

	if ($op eq 'fire') {
		if ($arg =~ m/^SolOp#0?([0-7])/) {
			return hex($1) | 0xE8;
		} else {
			die("PinOp_s6: cannot decode Solop argument '$arg' at input line $src_line\n");
		}
	}

	if ($op eq 'blink') {
		if ($arg =~ m/^Scriptlamp#(0?[0-7])/) {
			return hex($1) | 0xF0;
        } else {
			die("PinOp_s6: cannot decode Scriptlamp argument '$arg' at input line $src_line\n");
        }
	} 

	if ($op eq 'toggle') {  # note: toggle blinking, not toggle the light itself
		if ($arg =~ m/^Scriptlamp#(0?[0-7])/) {
			return hex($1) | 0xF8;
        } else {
			die("PinOp_s6: cannot decode Scriptlamp argument '$arg' at input line $src_line\n");
        }
	} 

	die("PinOps_s6: cannot decode '$str'\n");
}

1;

