#======================================================================
#                    D 7 1 1 . M 6 8 0 9 
#                    doc: Tue Jul 16 07:22:07 2024
#                    dlm: Mon Mar 17 01:39:19 2025
#                    (c) 2024 idealjoker@mailbox.org
#                    uE-Info: 735 100 NIL 0 0 72 74 2 4 NIL ofnI
#======================================================================

#----------------------------------------------------------------------
# Motorola 6809 Disassembler
#----------------------------------------------------------------------

# HISTORY:
# 	Jul 16, 2024: - craeated from [D711.M6800] aboard Glacier Exprss
# 	Jul 17, 2024: - continued in Zermatt
# 	Jul 18, 2024: - continued in Zermatt
#	Jul 19, 2024: - continued in Zurich
#	Jul 20, 2024: - debugging until all CPU vectors can be disassembled
#	Aug 10, 2024: - added support for @INLINE_ARG_SBR
#	Aug 11, 2024: - debugging
#	Aug 12-15: 	  - debugging
#	Aug 16, 2024: - cosmetics
#	Aug 17, 2024: - debugged R type
#				  - added A type
#	Aug 18, 2024: - added P type
#				  - changed most _EXT to _IMM2
#	Aug 19, 2024: - BUG: _IMM2 were wrong
#	Aug 20, 2024: - added space after exitThread
#	Aug 22, 2024: - mark branch auto addresses with preceding .
#	Aug 25, 2024: - op_LREL did not work
#				  - improved labels of SpawnThread syscalls
#	Aug 27, 2024: - generalized syscalls for !exitThread
#				  - line spacing bugs
#	Aug 28, 2024: - BUG: syscall byte arguments allowed label substitution
#	Aug 29, 2024: - moved extra space after RTS, JMP, etc to [D711.WPC_DMD]
#					because during magic processing the indentation is known
#	Sep  1, 2024: - BUG: legal flag numbers are different
#	Sep  4, 2024: - added support for DMD# type
#	Sep 16, 2024: - BUG: sys_unknown_spawnThread_1 had wrong handler label
#	Sep 21, 2024: - BUG: line spacing
#				  - moved insert_empty_line to [D711.pm]
#	Mar 11, 2025: - added data definitions to op_EXT()
#	Mar 15: 2025: - BUG: op_EXT() did not work correctly
# HISTORY END

# NOTES:
#	- in this disassembler, op_EXT is used for code addresses and op_IMM2 for data 

sub op_INH($$$$)																	# operation with inherent (implied) addressing
{
	my($opc,$opa,$ind,$op) = @_;
	return undef unless (BYTE($addr) == $opc);
	$OP[$opa] = $op; $IND[$opa] = $ind;
	$decoded[$addr++] = 1;
	return 1;
}

sub op_IMM(@)																		# operation with immediate addressing (page 1 only)
{
	my($opc,$ind,$op) = @_;
	return undef unless (BYTE($addr) == $opc);
	$OP[$addr] = $op; $IND[$addr] = $ind;
	push(@{$OPA[$addr]},sprintf('#$%02X',BYTE($addr+1)));
	$decoded[$addr++] = $decoded[$addr++] = 1;
	return 1;
}

sub op_IMM2($$$$)																	# operation with immediate 2-byte addressing (16-bit registers, not addresses)
{
	my($opc,$opa,$ind,$op) = @_;
	return undef unless (BYTE($addr) == $opc);
	$OP[$opa] = $op; $IND[$opa] = $ind;
	push(@{$OPA[$opa]},sprintf('#$%04X',WORD($addr+1)));
	$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
	return 1;
}

sub op_DIR($$$$)																	# operation with direct addressing (relative to DP register)
{
	my($opc,$opa,$ind,$op) = @_;
	return undef unless (BYTE($addr) == $opc);
	my($op_DIR) = BYTE($addr+1);
	$OP[$opa] = $op; $IND[$opa] = $ind;
	push(@{$OPA[$opa]},sprintf('$%02X',BYTE($addr+1)));
	$decoded[$addr++] = $decoded[$addr++] = 1;
	return 1;
}

sub op_EXT($$$$@)																	# operation with extended addressing (similar to IMM2, addresses assumed, return addr)
{
	my($opc,$opa,$ind,$op,$data_bytes) = @_;
	return undef unless (BYTE($addr) == $opc);
	my($trg_addr) = WORD($addr+1);
	if ($trg_addr >= 0x4000) {														# ROM address
		if (!$decoded[$trg_addr]) {													# not yet decoded
			if ($data_bytes == 2) {													# data word (not code)
				label_address($trg_addr,'!data');									
				$IND[$trg_addr] = $data_indent; $TYPE[$trg_addr] =	$CodeType_data;
				$OP[$trg_addr] = '.DW';
				$OPA[$trg_addr][0] = sprintf('$%04X',WORD($trg_addr));
				$decoded[$trg_addr] = $decoded[$trg_addr+1] = 1;
			} elsif ($data_bytes == 1) {											# data byte (not code)
				label_address($trg_addr,'!data');									
				$IND[$trg_addr] = $data_indent; $TYPE[$trg_addr] =	$CodeType_data;
				$OP[$trg_addr] = '.DB';
				$OPA[$trg_addr][0] = sprintf('$%02X',BYTE($trg_addr));
				$decoded[$trg_addr] = 1;
	        } else {																# code
	        	if ($trg_addr >= 0x8000) {
	        		label_address($trg_addr,'syscall')
	        	} else {
	        		label_address($trg_addr,'library')
	        	}
	        }
	    }
	} else {																		# RAM or IO address
		label_address($trg_addr,'');
	}
	$OP[$opa] = $op; $IND[$opa] = $ind;
	push(@{$OPA[$opa]},sprintf('$%04X',$trg_addr));
	$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
	return $trg_addr ? $trg_addr : '0 but true';									# return address!!
}

sub op_REL($$$$$)																	# operation with 1-byte relative addressing (page 1 only)
{
	my($opc,$ind,$op,$lbl_root,$follow_code) = @_;
#	print(STDERR "op_rel($opc,$ind,$op,$lbl_root,$follow_code)\n");
	return undef unless (BYTE($addr) == $opc);
	my($trg_addr) = $addr + 2 + ((BYTE($addr+1) < 128) ? BYTE($addr+1) : BYTE($addr+1)-256);
	$OP[$addr] = $op; $IND[$addr] = $ind;
	$OPA[$addr][0] = label_address($trg_addr,'.' . $op); 							# mark with . for code analysis (local label)
	$decoded[$addr++] = $decoded[$addr++] = 1;
	if ($follow_code) {
		disassemble_asm($ind,$trg_addr,$lbl_root,undef,$follow_code);
	}
	return 1;
}

sub op_LREL($$$$$$)																	# operation with 2-byte relative addressing
{
	my($opc,$opa,$ind,$op,$lbl_root,$follow_code) = @_;
	return undef unless (BYTE($addr) == $opc);
	my($trg_addr) = $addr + 3 + ((WORD($addr+1) < 32768) ? WORD($addr+1) : WORD($addr+1)-65536);
	$OP[$opa] = $op; $IND[$opa] = $ind;
	$OPA[$opa][0] = label_address($trg_addr,$op);									# do not mark with a . since those are not used for IF and LOOP
	$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
	if ($follow_code) {
		disassemble_asm($ind,$trg_addr,$lbl_root,undef,$follow_code);
	}
	return $trg_addr ? $trg_addr : '0 but true';
}

sub op_IDX($$$$)																	# operation with indexed addressing
{
	my($opc,$opa,$ind,$op) = @_;
	return undef unless (BYTE($addr) == $opc);
	$OP[$opa] = $op; $IND[$opa] = $ind;

	my($PB) = BYTE($addr+1);														# postbyte
	my($IR) = ($PB & 0b01100000) >> 5;												# index register
	$IR = 'X' if ($IR == 0);
	$IR = 'Y' if ($IR == 1);
	$IR = 'U' if ($IR == 2);
	$IR = 'S' if ($IR == 3);
	$PB &= 0b10011111;																# remove IR from PB

	if ($PB == 0b10000100) {														# no offset, direct
		push(@{$OPA[$opa]},sprintf(',%s',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10010100) {														# no offset, indirect
		push(@{$OPA[$opa]},sprintf('[,%s]',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if (($PB & 0b10000000) == 0) {													# 5-bit signed offset, direct
		my($ofs) = $PB & 0b00011111;
		$ofs = $ofs - 32 if ($ofs >= 16);						
		push(@{$OPA[$opa]},sprintf('%d,%s',$ofs,$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10001000) {														# 8-bit signed offset, direct
		my($ofs) = BYTE($addr+2);
		$ofs = $ofs - 256 if ($ofs >= 128);						
		push(@{$OPA[$opa]},sprintf('%d,%s',$ofs,$IR));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr - 3;
    }
	if ($PB == 0b10011000) {														# 8-bit signed offset, indirect
		my($ofs) = BYTE($addr+2);
		$ofs = $ofs - 256 if ($ofs >= 128);						
		push(@{$OPA[$opa]},sprintf('[%d,%s]',$ofs,$IR));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-3;
    }
	if ($PB == 0b10001001) {														# 16-bit signed offset, direct
		my($ofs) = WORD($addr+2);
		$ofs = $ofs - 65536 if ($ofs >= 32768);						
		push(@{$OPA[$opa]},sprintf('%d,%s',$ofs,$IR));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-4;
    }
	if ($PB == 0b10011001) {														# 16-bit signed offset, indirect
		my($ofs) = WORD($addr+2);
		$ofs = $ofs - 65536 if ($ofs >= 32768);						
		push(@{$OPA[$opa]},sprintf('[%d,%s]',$ofs,$IR));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-4;
    }
	if ($PB == 0b10000110) {														# A-register offset, direct
		push(@{$OPA[$opa]},sprintf('A,%s',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10010110) {														# A-register offset, indirect
		push(@{$OPA[$opa]},sprintf('[A,%s]',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10000101) {														# B-register offset, direct
		push(@{$OPA[$opa]},sprintf('B,%s',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10010101) {														# B-register offset, indirect
		push(@{$OPA[$opa]},sprintf('[B,%s]',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10001011) {														# D-register offset, direct
		push(@{$OPA[$opa]},sprintf('D,%s',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10010011) {														# D-register offset, indirect
		push(@{$OPA[$opa]},sprintf('[D,%s]',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10000000) {														# post-increment by 1, direct
		push(@{$OPA[$opa]},sprintf(',%s+',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10000001) {														# post-increment by 2, direct
		push(@{$OPA[$opa]},sprintf(',%s++',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10010001) {														# post-increment by 2, indirect
		push(@{$OPA[$opa]},sprintf('[,%s++]',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10000010) {														# post-decrement by 1, direct
		push(@{$OPA[$opa]},sprintf(',%s-',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10000011) {														# post-decrement by 2, direct
		push(@{$OPA[$opa]},sprintf(',%s--',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10010011) {														# post-decrement by 2, indirect
		push(@{$OPA[$opa]},sprintf('[,%s--]',$IR));
		$decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-2;
    }
	if ($PB == 0b10001100) {														# PC-relative 8-bit signed offset, direct
		my($ofs) = BYTE($addr+2);
		$ofs = $ofs - 256 if ($ofs >= 128);						
		push(@{$OPA[$opa]},sprintf('%d,PCR',$ofs));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-3;
    }
	if ($PB == 0b10011100) {														# PC-relative 8-bit signed offset, indirect
		my($ofs) = BYTE($addr+2);
		$ofs = $ofs - 256 if ($ofs >= 128);						
		push(@{$OPA[$opa]},sprintf('[%d,PCR]',$ofs));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-3;
    }
	if ($PB == 0b10001101) {														# PC-relative 16-bit signed offset, direct
		my($ofs) = WORD($addr+2);
		$ofs = $ofs - 65536 if ($ofs >= 32768);						
		push(@{$OPA[$opa]},sprintf('%d,PCR',$ofs));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-4;
    }
	if ($PB == 0b10011101) {														# PC-relative 16-bit signed offset, indirect
		my($ofs) = WORD($addr+2);
		$ofs = $ofs - 65536 if ($ofs >= 32768);						
		push(@{$OPA[$opa]},sprintf('[%d,PCR]',$ofs));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-4;
    }
	if ($PB == 0b10011111) {														# extended indirect
		push(@{$OPA[$opa]},sprintf('[$%04X]',WORD($addr+2)));
		$decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = $decoded[$addr++] = 1;
		return $addr-4;
    }
		
	printf(STDERR "; WARNING: invalid postbyte %02X for $op indexed mode at address %04X\n",BYTE($addr+1),$addr)
		if ($verbose > 0);
	return undef;
}

sub op_PP($$$)																		# PUSH/PULL op (page 1 only)
{																					# retvals: undef (no match), 1 (continue), 0 (return on PULL)
	my($opc,$ind,$op) = @_;
	return undef unless (BYTE($addr) == $opc);
	$OP[$addr] = $op; $IND[$addr] = $ind;

	my($PB) = BYTE($addr+1);														# postbyte
	my($rv) = 1;
	my($regs);
	$regs .= 'CC,' if ($PB & 0x01);
	$regs .= 'A,'  if ($PB & 0x02);
	$regs .= 'B,'  if ($PB & 0x04);
	$regs .= 'DP,' if ($PB & 0x08);
	$regs .= 'X,'  if ($PB & 0x10);
	$regs .= 'Y,'  if ($PB & 0x20);
	$regs .= 'U,'  if ($PB & 0x40) && ($op =~ m{S$});
	$regs .= 'S,'  if ($PB & 0x40) && ($op =~ m{U$});
	$regs .= 'PC,',$rv = 0 if ($PB & 0x80);											# implied RTS
	if (length($regs) == 0) {
		printf(STDERR "; WARNING: $op with empty register list at address %04X\n",$addr)
			if ($verbose > 0);
		push(@{$OPA[$addr]},'NO_REGS');
    } else {
		push(@{$OPA[$addr]},substr($regs,0,length($regs)-1));						# remove trailing comma
    }
	
	$decoded[$addr++] = $decoded[$addr++] = 1;
	return $rv;
}

sub op_2REGS($$$)																	# EXG/TFR
{
	my($opc,$ind,$op) = @_;
	return undef unless (BYTE($addr) == $opc);
	$OP[$addr] = $op; $IND[$addr] = $ind;

    my(@R) = ('D','X','Y','U','S','PC',undef,undef,'A','B','CC','DP');
	my($R1) = $R[BYTE($addr+1) >> 4];												# postbyte
	my($R2) = $R[BYTE($addr+1) & 0x0F];

	unless (defined($R1) && defined($R2)) {
		printf(STDERR "; WARNING: invalid postbyte %02X for $op indexed mode at address %04X\n",BYTE($addr+1),$addr)
			if ($verbose > 0);
		return undef;
    }

	push(@{$OPA[$addr]},"$R1,$R2");
	$decoded[$addr++] = $decoded[$addr++] = 1;
	return 1;
}

#----------------------------------------------------------------------
# Main Disassembly Routines
#----------------------------------------------------------------------

sub disassemble_syscall($$)
{
	my($sc,$rv) = @_;

	if (numberp($Lbl{$SYSCALL[$sc]})) {															# numeric label => address above 8000
		return undef unless ($Lbl{$SYSCALL[$sc]} == $rv);
	} else {
		my($rpg,$saddr) = split(':',$Lbl{$SYSCALL[$sc]});										# compond label => rom page & address between 40000 and 80000
		$rpg = hex($rpg); $saddr = hex($saddr);
		return undef unless ($saddr == $rv && $rpg == $_cur_RPG);
	}
	my($oaddr) = $addr-3;																		# address of OP
	$OP[$oaddr] = '!';
	for (my($i)=0; $i<length($SC_ARGS[$sc]); $i++) {     
		if (substr($SC_ARGS[$sc],$i,1) eq 'W') { 												# W: word (not addr!)
			push(@{$OPA[$oaddr]},sprintf('$%04X!',WORD($addr)));
			$decoded[$addr++] = $decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'P') {											# P: pointer (address)
			push(@{$OPA[$oaddr]},label_address(WORD($addr),''));
			$decoded[$addr++] = $decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'B') {											# B: byte
			push(@{$OPA[$oaddr]},sprintf('$%02X!',BYTE($addr)));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'S') {											# S: switch
			die(sprintf("Invalid switch argument Switch#%02X",BYTE($addr)))
				unless (BYTE($addr)>=0 && BYTE($addr)<=65);
			push(@{$OPA[$oaddr]},sprintf('Switch#%02X',BYTE($addr)));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'O') {											# O: sOlenoid
			die(sprintf("Invalid solenoid Sol#%d",BYTE($addr)))
				unless (BYTE($addr)>=1 && BYTE($addr)<=65);
			push(@{$OPA[$oaddr]},sprintf('Sol#%d',BYTE($addr)));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'L') {											# L: Lamp
			die(sprintf("Invalid lamp argument Lamp#%d",BYTE($addr)))
				unless (BYTE($addr)>=1 && BYTE($addr)<=65);
			push(@{$OPA[$oaddr]},sprintf('Lamp#%d',BYTE($addr)));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'E') {											# E: Error
			push(@{$OPA[$oaddr]},sprintf('Error#%02X',BYTE($addr)));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'G') {											# G: Bitgroup
			push(@{$OPA[$oaddr]},sprintf('Bitgroup#%02X',BYTE($addr)));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'F') {											# F: Flag
			my($fno) = BYTE($addr) - 0x40;														# Flag#00-3F
			$fno -= 0x40 if $fno > 0x40; 														# Flag#40-7F
			die(sprintf("Invalid flag argument Flag#%02X",$fno))
				unless ($fno>=0x00 && $fno<0x80);
			push(@{$OPA[$oaddr]},sprintf('Flag#%02X',$fno));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'T') {											# T: Thread
			push(@{$OPA[$oaddr]},sprintf('Thread#%04X',WORD($addr)));
			$decoded[$addr++] = $decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'A') {											# A: Adjustment
			die(sprintf("Invalid adjustment argument Adj#%02X",BYTE($addr)))
				unless (BYTE($addr)>=0 && BYTE($addr)<=255);
			push(@{$OPA[$oaddr]},sprintf('Adj#%02X',BYTE($addr)));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'U') {											# U: aUdit
			push(@{$OPA[$oaddr]},sprintf('Audit#%04X',WORD($addr)));
			$decoded[$addr++] = $decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'D') {											# D: DMD animation
			push(@{$OPA[$oaddr]},sprintf('DMD#%02X',BYTE($addr)));
			$decoded[$addr++] = 1;
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'C') {											# C: code ptr (W)
			my($taddr) = WORD($addr); $decoded[$addr++] = $decoded[$addr++] = 1;
			push(@{$OPA[$oaddr]},sprintf('$%04X',$taddr));

			my($tlbl) = sprintf("library_%04X",$taddr);
			$tlbl = $LBL[$taddr] if defined($LBL[$taddr]);
			setLabel($tlbl,$taddr);
			if ($follow_code) {
				disassemble_asm($ind,$taddr,$lbl_root,undef,$follow_code);
			}
		} elsif (substr($SC_ARGS[$sc],$i,1) eq 'R') {											# R: code reference (WB)
			my($taddr) = WORD($addr); $decoded[$addr++] = $decoded[$addr++] = 1;
			my($trpg)  = BYTE($addr); $decoded[$addr++] = 1;

			my($orpg) = select_WPC_RPG($trpg);
			my($tlbl) = sprintf('library_%04X',$taddr);
			my($divider);
			if ($LBL[hex(substr($OPA[$oaddr][0],1,4))] =~ m{^[^_]*[sS]pawnThread}) {			# spawnThread system calls
#				printf(STDERR "tlbl = $tlbl ($LBL[hex(substr($OPA[$oaddr][0],1,4))])\n");
				$tlbl = sprintf('Thread#%s_handler',substr($OPA[$oaddr][1],-4));
				$divider = 'Thread Handler';
			}
			$tlbl = $LBL[$taddr] if defined($LBL[$taddr]);
			$tlbl = setLabel($tlbl,$taddr);
		    
			if ($follow_code) {
				disassemble_asm($ind,$taddr,$tlbl,$divider,$follow_code);
			}
			select_WPC_RPG($orpg);
			push(@{$OPA[$oaddr]},$tlbl);
			push(@{$OPA[$oaddr]},sprintf('$%02X',$trpg));
		} else {
			die("invalid inline argument spec <$SC_ARGS[$sc]>");
		}
    }
    return 1;
}

sub disassemble_asm(@) 																			# disassemble 6809 CPU code (always follow code)
{
	my($ind,$addr,$lbl_root,$divider_label,$follow_code) = @_;
#	printf(STDERR "disassemble_asm($ind,%04X,$lbl_root,$divider_label,$follow_code)\n",$addr);
	$follow_code = 1 unless defined($follow_code);
	return disassemble_asm_nbytes($ind,$addr,$lbl_root,9e99,$follow_code,$divider_label);		# follow_code = 1
}

sub disassemble_asm_nbytes(@)																	# disassemble 6809 CPU code with byte limit
{
	local($ind,$addr,$lbl_root,$max_bytes,$follow_code,$divider_label) = @_;
#	printf(STDERR "disassemble_asm($ind,%02X:%04X,$lbl_root,$max_bytes,$follow_code,$divider_label)\n",$_cur_RPG,$addr);

	unless (defined(BYTE($addr))) { 												# outside loaded ROM range
		return if ($WMS_System==6 || $WMS_System==7);								# okay for Sys 6 & Sys 7 (OS separate)
		printf(STDERR "; WARNING: disassembly address %04X outside ROM range\n",$addr)
			if ($verbose > 0);
		$unclean = 1;
		return;
	}
	if ($decoded[$addr] && !defined($OP[$addr])) {								   # not at start of instruction
		printf("ABORT: disassembly M6809 code at %02X:%04X within already disassembled instruction code ($OP[$addr-1],$OP[$addr-2],$OP[$addr-3])\n" .
			   "\t[$lbl_root]\n",$_cur_RPG,$addr)
			if ($verbose > 0);
		$unclean = 1;
		return;
	}
	insert_divider($addr,$divider_label);  
	$N_LABELS[$addr]++;

	my($start_addr) = $addr;
#	printf(STDERR "start_addr = %04X\n",$start_addr);
	while ($addr-$start_addr < $max_bytes) {
		my($rv);
##		printf(STDERR "M6809 disassembling opcode %02X at %02X:%04X (decoded = $decoded[$addr])\n",BYTE($addr),$_cur_RPG,$addr)
##			if ($addr>=0xD0BB && $addr<0xD0E3);
		unless (defined(BYTE($addr))) {
			printf(STDERR "; WARNING: disassembly address %04X outside ROM range\n",$addr)
				if ($verbose > 0);
			$unclean = 1;
			return;
		}
		return if ($decoded[$addr]);
##		printf(STDERR "M6809 disassembling opcode %02X at %02X:%04X\n",BYTE($addr),$_cur_RPG,$addr);
#		printf("disassemble_asm(%04X) %d bytes to go\n",
#			$addr,$max_bytes-$addr+$start_addr) if ($max_bytes < 1000);
		$TYPE[$addr] = $CodeType_asm;

		next if op_DIR(0x00,$addr,$ind,'NEG'); 		next if op_DIR(0x03,$addr,$ind,'COM');		# page 1 opcodes
		next if op_DIR(0x04,$addr,$ind,'LSR'); 		next if op_DIR(0x06,$addr,$ind,'ROR');
		next if op_DIR(0x07,$addr,$ind,'ASR'); 		next if op_DIR(0x08,$addr,$ind,'ASL');
		next if op_DIR(0x09,$addr,$ind,'ROL'); 		next if op_DIR(0x0A,$addr,$ind,'DEC');
		next if op_DIR(0x0C,$addr,$ind,'INC'); 		next if op_DIR(0x0D,$addr,$ind,'TST');
		return if op_DIR(0x0E,$addr,$ind,'JMP'); 	next if op_DIR(0x0F,$addr,$ind,'CLR');

		next if op_INH(0x12,$addr,$ind,'NOP'); 	next if op_INH(0x13,$addr,$ind,'SYNC');
		return if op_LREL(0x16,$addr,$ind,'LBRA',$lbl_root,$follow_code); 
		next if op_LREL(0x17,$addr,$ind,'LBSR',$lbl_root,$follow_code);

		next if op_INH(0x19,$addr,$ind,'DAA'); 
		next if op_IMM(0x1A,$ind,'ORCC'); 		next if op_IMM(0x1C,$ind,'ANDCC');
		next if op_INH(0x1D,$addr,$ind,'SEX'); 
		next if op_2REGS(0x1E,$ind,'EXG'); 		next if op_2REGS(0x1F,$ind,'TFR');

		return if op_REL(0x20,$ind,'BRA',$lbl_root,$follow_code); 
		next if op_REL(0x21,$ind,'BRN',$lbl_root,0); 
		next if op_REL(0x22,$ind,'BHI',$lbl_root,$follow_code); 
		next if op_REL(0x23,$ind,'BLS',$lbl_root,$follow_code); 
		next if op_REL(0x24,$ind,'BCC',$lbl_root,$follow_code); 
		next if op_REL(0x25,$ind,'BCS',$lbl_root,$follow_code); 
		next if op_REL(0x26,$ind,'BNE',$lbl_root,$follow_code); 
		next if op_REL(0x27,$ind,'BEQ',$lbl_root,$follow_code); 
		next if op_REL(0x28,$ind,'BVC',$lbl_root,$follow_code); 
		next if op_REL(0x29,$ind,'BVS',$lbl_root,$follow_code); 
		next if op_REL(0x2A,$ind,'BPL',$lbl_root,$follow_code); 
		next if op_REL(0x2B,$ind,'BMI',$lbl_root,$follow_code); 
		next if op_REL(0x2C,$ind,'BGE',$lbl_root,$follow_code); 
		next if op_REL(0x2D,$ind,'BLT',$lbl_root,$follow_code); 
		next if op_REL(0x2E,$ind,'BGT',$lbl_root,$follow_code); 
		next if op_REL(0x2F,$ind,'BLE',$lbl_root,$follow_code); 

		next if op_IDX(0x30,$addr,$ind,'LEAX'); 	next if op_IDX(0x31,$addr,$ind,'LEAY');
		next if op_IDX(0x32,$addr,$ind,'LEAS'); 	next if op_IDX(0x33,$addr,$ind,'LEAU');

		next if defined(op_PP(0x34,$ind,'PSHS'));
		if (defined($rv = op_PP(0x35,$ind,'PULS'))) {
			if ($rv == 0) {										# PC pulled
				$REM[$addr-2] = 'RTS';
				return;
			}
			next;
		}
		next if defined(op_PP(0x36,$ind,'PSHU'));
		if (defined($rv = op_PP(0x37,$ind,'PULU'))) {
			if ($rv == 0) {										# PC pulled
				$REM[$addr-2] = 'RTS';
				return;
			}
			next;
		}
		return if op_INH(0x39,$addr,$ind,'RTS');	next if op_INH(0x3A,$addr,$ind,'ABX');
		return if op_INH(0x3B,$addr,$ind,'RTI');	next if op_INH(0x3C,$addr,$ind,'CWAI'); 
		next if op_INH(0x3D,$addr,$ind,'MUL'); 		return if op_INH(0x3F,$addr,$ind,'SWI'); 

		next if op_INH(0x40,$addr,$ind,'NEGA'); 	next if op_INH(0x43,$addr,$ind,'COMA');
		next if op_INH(0x44,$addr,$ind,'LSRA'); 	next if op_INH(0x46,$addr,$ind,'RORA');
		next if op_INH(0x47,$addr,$ind,'ASRA'); 	next if op_INH(0x48,$addr,$ind,'ASLA');
		next if op_INH(0x49,$addr,$ind,'ROLA'); 	next if op_INH(0x4A,$addr,$ind,'DECA');
		next if op_INH(0x4C,$addr,$ind,'INCA'); 	next if op_INH(0x4D,$addr,$ind,'TSTA'); 
		next if op_INH(0x4F,$addr,$ind,'CLRA');

		next if op_INH(0x50,$addr,$ind,'NEGB'); 	next if op_INH(0x53,$addr,$ind,'COMB');
		next if op_INH(0x54,$addr,$ind,'LSRB'); 	next if op_INH(0x56,$addr,$ind,'RORB');
		next if op_INH(0x57,$addr,$ind,'ASRB'); 	next if op_INH(0x58,$addr,$ind,'ASLB');
		next if op_INH(0x59,$addr,$ind,'ROLB'); 	next if op_INH(0x5A,$addr,$ind,'DECB');
		next if op_INH(0x5C,$addr,$ind,'INCB'); 	next if op_INH(0x5D,$addr,$ind,'TSTB'); 
		next if op_INH(0x5F,$addr,$ind,'CLRB');

		next if op_IDX(0x60,$addr,$ind,'NEG'); 		next if op_IDX(0x63,$addr,$ind,'COM');
		next if op_IDX(0x64,$addr,$ind,'LSR'); 		next if op_IDX(0x66,$addr,$ind,'ROR');
		next if op_IDX(0x67,$addr,$ind,'ASR'); 		next if op_IDX(0x68,$addr,$ind,'ASL');
		next if op_IDX(0x69,$addr,$ind,'ROL'); 		next if op_IDX(0x6A,$addr,$ind,'DEC');
		next if op_IDX(0x6C,$addr,$ind,'INC'); 		next if op_IDX(0x6D,$addr,$ind,'TST'); 
		return if $rv = op_IDX(0x6E,$addr,$ind,'JMP');
		next if op_IDX(0x6F,$addr,$ind,'CLR');

		next if op_EXT(0x70,$addr,$ind,'NEG',1); 	next if op_EXT(0x73,$addr,$ind,'COM',1);
		next if op_EXT(0x74,$addr,$ind,'LSR',1); 	next if op_EXT(0x76,$addr,$ind,'ROR',1);
		next if op_EXT(0x77,$addr,$ind,'ASR',1); 	next if op_EXT(0x78,$addr,$ind,'ASL',1);
		next if op_EXT(0x79,$addr,$ind,'ROL',1); 	next if op_EXT(0x7A,$addr,$ind,'DEC',1);
		next if op_EXT(0x7C,$addr,$ind,'INC',1); 	next if op_EXT(0x7D,$addr,$ind,'TST',1); 
		if ($rv = op_EXT(0x7E,$addr,$ind,'JMP')) {												# handle JMP target syscalls
			for (my($sc)=0; $sc<@SYSCALL; $sc++) {
				die($SYSCALL[$sc]) unless defined($Lbl{$SYSCALL[$sc]});
				next unless $SC_NOTE[$sc] == 2;													# NOTE 2: JMP target syscall
				last if disassemble_syscall($sc,$rv);
			}
			disassemble_asm($ind,$rv,$lbl_root,undef,$follow_code)								# disassemble JMP target (syscall or not)
				if $follow_code;
			return;
        }
		next if op_EXT(0x7F,$addr,$ind,'CLR',1);

		next if op_IMM(0x80,$ind,'SUBA'); 			next if op_IMM(0x81,$ind,'CMPA');
		next if op_IMM(0x82,$ind,'SBCA'); 			next if op_IMM2(0x83,$addr,$ind,'SUBD');
		next if op_IMM(0x84,$ind,'ANDA'); 			next if op_IMM(0x85,$ind,'BITA');
		next if op_IMM(0x86,$ind,'LDA'); 			next if op_IMM(0x88,$ind,'EORA');
		next if op_IMM(0x89,$ind,'ADCA'); 			next if op_IMM(0x8A,$ind,'ORA');
		next if op_IMM(0x8B,$ind,'ADDA'); 			next if op_IMM2(0x8C,$addr,$ind,'CMPX');
		next if op_REL(0x8D,$ind,'BSR',$lbl_root,$follow_code); 
		next if op_IMM2(0x8E,$addr,$ind,'LDX'); 	

		next if op_DIR(0x90,$addr,$ind,'SUBA'); 	next if op_DIR(0x91,$addr,$ind,'CMPA');
		next if op_DIR(0x92,$addr,$ind,'SBCA'); 	next if op_DIR(0x93,$addr,$ind,'SUBD');
		next if op_DIR(0x94,$addr,$ind,'ANDA'); 	next if op_DIR(0x95,$addr,$ind,'BITA');
		next if op_DIR(0x96,$addr,$ind,'LDA'); 		next if op_DIR(0x97,$addr,$ind,'STA'); 	
		next if op_DIR(0x98,$addr,$ind,'EORA');		next if op_DIR(0x99,$addr,$ind,'ADCA'); 	
		next if op_DIR(0x9A,$addr,$ind,'ORA');		next if op_DIR(0x9B,$addr,$ind,'ADDA'); 	
		next if op_DIR(0x9C,$addr,$ind,'CMPX');		next if op_DIR(0x9D,$addr,$ind,'JSR');
		next if op_DIR(0x9E,$addr,$ind,'LDX'); 		next if op_DIR(0x9F,$addr,$ind,'STX'); 	

		next if op_IDX(0xA0,$addr,$ind,'SUBA'); 	next if op_IDX(0xA1,$addr,$ind,'CMPA');
		next if op_IDX(0xA2,$addr,$ind,'SBCA'); 	next if op_IDX(0xA3,$addr,$ind,'SUBD');
		next if op_IDX(0xA4,$addr,$ind,'ANDA'); 	next if op_IDX(0xA5,$addr,$ind,'BITA');
		next if op_IDX(0xA6,$addr,$ind,'LDA'); 		next if op_IDX(0xA7,$addr,$ind,'STA'); 	
		next if op_IDX(0xA8,$addr,$ind,'EORA');		next if op_IDX(0xA9,$addr,$ind,'ADCA'); 	
		next if op_IDX(0xAA,$addr,$ind,'ORA');		next if op_IDX(0xAB,$addr,$ind,'ADDA'); 	
		next if op_IDX(0xAC,$addr,$ind,'CMPX');		next if op_IDX(0xAD,$addr,$ind,'JSR');
		next if op_IDX(0xAE,$addr,$ind,'LDX'); 		next if op_IDX(0xAF,$addr,$ind,'STX'); 	

		next if op_EXT(0xB0,$addr,$ind,'SUBA',1); 	next if op_EXT(0xB1,$addr,$ind,'CMPA',1);
		next if op_EXT(0xB2,$addr,$ind,'SBCA',1); 	next if op_EXT(0xB3,$addr,$ind,'SUBD',1);
		next if op_EXT(0xB4,$addr,$ind,'ANDA',1); 	next if op_EXT(0xB5,$addr,$ind,'BITA',1);
		next if op_EXT(0xB6,$addr,$ind,'LDA',1); 	next if op_EXT(0xB7,$addr,$ind,'STA',1); 	
		next if op_EXT(0xB8,$addr,$ind,'EORA',1);	next if op_EXT(0xB9,$addr,$ind,'ADCA',1); 	
		next if op_EXT(0xBA,$addr,$ind,'ORA',1);	next if op_EXT(0xBB,$addr,$ind,'ADDA',1); 	
		next if op_EXT(0xBC,$addr,$ind,'CMPX',2);
		if ($rv = op_EXT(0xBD,$addr,$ind,'JSR')) {												# JSR to fixed address => handle syscalls
			my($oaddr) = $addr - 3;
			my($sc);
			for ($sc=0; $sc<@SYSCALL; $sc++) {
				die($SYSCALL[$sc]) unless defined($Lbl{$SYSCALL[$sc]});
				next if $SC_NOTE[$sc] == 2;														# NOTE 2: JMP target syscall
				last if disassemble_syscall($sc,$rv);
			}
			disassemble_asm($ind,$rv,$lbl_root,undef,$follow_code)								# disassemble subroutine code (syscall or not)
				if ($follow_code);
			if ($SC_NOTE[$sc] == 1) {															# NOTE 1: no-return syscall
				insert_empty_line($oaddr);
				return;
			}
		    next;																				# continue disassembly after JSR
   		}
		next if op_EXT(0xBE,$addr,$ind,'LDX',2); 	next if op_EXT(0xBF,$addr,$ind,'STX',2); 	

		next if op_IMM(0xC0,$ind,'SUBB'); 			next if op_IMM(0xC1,$ind,'CMPB');
		next if op_IMM(0xC2,$ind,'SBCB'); 			next if op_IMM2(0xC3,$addr,$ind,'ADDD');
		next if op_IMM(0xC4,$ind,'ANDB'); 			next if op_IMM(0xC5,$ind,'BITB');
		next if op_IMM(0xC6,$ind,'LDB'); 			next if op_IMM(0xC8,$ind,'EORB');
		next if op_IMM(0xC9,$ind,'ADCB'); 			next if op_IMM(0xCA,$ind,'ORB');
		next if op_IMM(0xCB,$ind,'ADDB'); 			next if op_IMM2(0xCC,$addr,$ind,'LDD');
		next if op_IMM2(0xCE,$addr,$ind,'LDU'); 	

		next if op_DIR(0xD0,$addr,$ind,'SUBB'); 	next if op_DIR(0xD1,$addr,$ind,'CMPB');
		next if op_DIR(0xD2,$addr,$ind,'SBCB'); 	next if op_DIR(0xD3,$addr,$ind,'ADDD');
		next if op_DIR(0xD4,$addr,$ind,'ANDB'); 	next if op_DIR(0xD5,$addr,$ind,'BITB');
		next if op_DIR(0xD6,$addr,$ind,'LDB'); 		next if op_DIR(0xD7,$addr,$ind,'STB'); 	
		next if op_DIR(0xD8,$addr,$ind,'EORB');		next if op_DIR(0xD9,$addr,$ind,'ADCB'); 	
		next if op_DIR(0xDA,$addr,$ind,'ORB');		next if op_DIR(0xDB,$addr,$ind,'ADDB'); 	
		next if op_DIR(0xDC,$addr,$ind,'LDD');		next if op_DIR(0xDD,$addr,$ind,'STD');
		next if op_DIR(0xDE,$addr,$ind,'LDU'); 		next if op_DIR(0xDF,$addr,$ind,'STU'); 	

		next if op_IDX(0xE0,$addr,$ind,'SUBB'); 	next if op_IDX(0xE1,$addr,$ind,'CMPB');
		next if op_IDX(0xE2,$addr,$ind,'SBCB'); 	next if op_IDX(0xE3,$addr,$ind,'ADDD');
		next if op_IDX(0xE4,$addr,$ind,'ANDB'); 	next if op_IDX(0xE5,$addr,$ind,'BITB');
		next if op_IDX(0xE6,$addr,$ind,'LDB'); 		next if op_IDX(0xE7,$addr,$ind,'STB'); 	
		next if op_IDX(0xE8,$addr,$ind,'EORB');		next if op_IDX(0xE9,$addr,$ind,'ADCB'); 	
		next if op_IDX(0xEA,$addr,$ind,'ORB');		next if op_IDX(0xEB,$addr,$ind,'ADDB'); 	
		next if op_IDX(0xEC,$addr,$ind,'LDD');		next if op_IDX(0xED,$addr,$ind,'STD');
		next if op_IDX(0xEE,$addr,$ind,'LDU'); 		next if op_IDX(0xEF,$addr,$ind,'STU'); 	

		next if op_EXT(0xF0,$addr,$ind,'SUBB',1); 	next if op_EXT(0xF1,$addr,$ind,'CMPB',1);
		next if op_EXT(0xF2,$addr,$ind,'SBCB',1); 	next if op_EXT(0xF3,$addr,$ind,'ADDD',2);
		next if op_EXT(0xF4,$addr,$ind,'ANDB',1); 	next if op_EXT(0xF5,$addr,$ind,'BITB',1);
		next if op_EXT(0xF6,$addr,$ind,'LDB',1); 	next if op_EXT(0xF7,$addr,$ind,'STB',1); 	
		next if op_EXT(0xF8,$addr,$ind,'EORB',1);	next if op_EXT(0xF9,$addr,$ind,'ADCB',1); 	
		next if op_EXT(0xFA,$addr,$ind,'ORB',1);	next if op_EXT(0xFB,$addr,$ind,'ADDB',1); 	
		next if op_EXT(0xFC,$addr,$ind,'LDD',2);	next if op_EXT(0xFD,$addr,$ind,'STD',2);
		next if op_EXT(0xFE,$addr,$ind,'LDU',2); 	next if op_EXT(0xFF,$addr,$ind,'STU',2); 	

		if (BYTE($addr) == 0x10) {																	# page 2 opcodes
			$decoded[$addr++] = 1;

			next if op_LREL(0x21,$addr-1,$ind,'LBRN',$lbl_root,0);
			next if op_LREL(0x22,$addr-1,$ind,'LBHI',$lbl_root,$follow_code);
			next if op_LREL(0x23,$addr-1,$ind,'LBLS',$lbl_root,$follow_code);
			next if op_LREL(0x24,$addr-1,$ind,'LBCC',$lbl_root,$follow_code);
			next if op_LREL(0x25,$addr-1,$ind,'LBCS',$lbl_root,$follow_code);
			next if op_LREL(0x26,$addr-1,$ind,'LBNE',$lbl_root,$follow_code);
			next if op_LREL(0x27,$addr-1,$ind,'LBEQ',$lbl_root,$follow_code);
			next if op_LREL(0x28,$addr-1,$ind,'LBVC',$lbl_root,$follow_code);
			next if op_LREL(0x29,$addr-1,$ind,'LBVS',$lbl_root,$follow_code);
			next if op_LREL(0x2A,$addr-1,$ind,'LBPL',$lbl_root,$follow_code);
			next if op_LREL(0x2B,$addr-1,$ind,'LBMI',$lbl_root,$follow_code);
			next if op_LREL(0x2C,$addr-1,$ind,'LBGE',$lbl_root,$follow_code);
			next if op_LREL(0x2D,$addr-1,$ind,'LBLT',$lbl_root,$follow_code);
			next if op_LREL(0x2E,$addr-1,$ind,'LBGT',$lbl_root,$follow_code);
			next if op_LREL(0x2F,$addr-1,$ind,'LBLE',$lbl_root,$follow_code);
	
			return if op_INH(0x3F,$addr-1,$ind,'SWI2'); 
	
			next if op_IMM2(0x83,$addr-1,$ind,'CMPD');	next if op_IMM2(0x8C,$addr-1,$ind,'CMPY');
			next if op_IMM2(0x8E,$addr-1,$ind,'LDY');
			next if op_DIR(0x93,$addr-1,$ind,'CMPD');	next if op_DIR(0x9C,$addr-1,$ind,'CMPY');
			next if op_DIR(0x9E,$addr-1,$ind,'LDY'); 	next if op_DIR(0x9F,$addr-1,$ind,'STY');
			next if op_IDX(0xA3,$addr-1,$ind,'CMPD');	next if op_IDX(0xAC,$addr-1,$ind,'CMPY');
			next if op_IDX(0xAE,$addr-1,$ind,'LDY'); 	next if op_IDX(0xAF,$addr-1,$ind,'STY');
			next if op_EXT(0xB3,$addr-1,$ind,'CMPD',2);	next if op_EXT(0xBC,$addr-1,$ind,'CMPY',2);
			next if op_EXT(0xBE,$addr-1,$ind,'LDY',2); 	next if op_EXT(0xBF,$addr-1,$ind,'STY',2);
	
			next if op_IMM2(0xCE,$addr-1,$ind,'LDS');
			next if op_DIR(0xDE,$addr-1,$ind,'LDS'); 	next if op_DIR(0xDF,$addr-1,$ind,'STS');
			next if op_IDX(0xEE,$addr-1,$ind,'LDS'); 	next if op_IDX(0xEF,$addr-1,$ind,'STS');
	        next if op_EXT(0xFE,$addr-1,$ind,'LDS',2);	next if op_EXT(0xFF,$addr-1,$ind,'STS',2);

			printf("ABORT: Unknown M6809 opcode \$%04X at addr \$%02X:%04X\n",WORD($addr),$_cur_RPG,$addr)
				if ($verbose > 0);
			$OP[$addr-1] = '.DW'; $IND[$addr-1] = $ind;
			$OPA[$addr-1][0] = sprintf('$%04X!',WORD($addr-1));
			$REM[$addr-1] = 'WARNING: Unknown M6809 opcode';
			$decoded[$addr++] = 1;
			$unclean = 1;
	        return;

        }
		
		if (BYTE($addr) == 0x11) {																	# page 3 opcodes
			$decoded[$addr++] = 1;

			return if op_INH(0x113F,$addr-1,$ind,'SWI3'); 
		    
			next if op_IMM2(0x83,$addr-1,$ind,'CMPU');	next if op_IMM2(0x8C,$addr-1,$ind,'CMPS');
			next if op_DIR(0x93,$addr-1,$ind,'CMPU');	next if op_DIR(0x9C,$addr-1,$ind,'CMPS');
			next if op_IDX(0xA3,$addr-1,$ind,'CMPU');	next if op_IDX(0xAC,$addr-1,$ind,'CMPS');
	        next if op_EXT(0xB3,$addr-1,$ind,'CMPU',2);	next if op_EXT(0xBC,$addr-1,$ind,'CMPS',2);

			printf("ABORT: Unknown M6809 opcode \$%04X at addr \$%02X:%04X\n",WORD($addr),$_cur_RPG,$addr)
				if ($verbose > 0);
			$OP[$addr-1] = '.DW'; $IND[$addr-1] = $ind;
			$OPA[$addr-1][0] = sprintf('$%04X!',WORD($addr-1));
			$REM[$addr-1] = 'WARNING: Unknown M6809 opcode';
			$decoded[$addr++] = 1;
			$unclean = 1;
	        return;
        }

        printf("ABORT: Unknown M6809 opcode \$%02X at addr %02X:%04X (start addr = %04X)\n",BYTE($addr),$_cur_RPG,$addr,$start_addr)
        	if ($verbose > 0);
		$OP[$addr] = '.DB'; $IND[$addr] = $ind;
		$OPA[$addr][0] = sprintf('$%02X!',BYTE($addr));
		$REM[$addr] = 'WARNING: Unknown M6809 opcode';
		$decoded[$addr++] = 1;
		$unclean = 1;
		return;
	}
}
1;
