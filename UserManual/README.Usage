======================================================================
		    R E A D M E . U S A G E 
		    doc: Fri May 24 11:26:20 2024
		    dlm: Tue May 28 19:40:38 2024
		    (c) 2024 idealjoker@mailbox.org
		    uE-Info: 72 0 NIL 0 0 72 3 2 8 NIL ofnI
======================================================================

COPYRIGHT AND LICENSE

		    (c) 2019 IDEALJOKER@MAILBOX.ORG

This software is openly licensed via CC BY-NC-SA 4.0. This license
enables users to distribute, remix, adapt, and build upon the
material in any medium or format for noncommercial purposes only, and
only so long as attribution is given to the creator. If you remix,
adapt, or build upon the material, you must license the modified
material under identical terms. (For details, see
https://creativecommons.org/licenses/by-nc-sa/4.0/). 

======================================================================

CHANGE LOG
    May 10, 2019: - disassembler library created
    Jan  4, 2020: - compiler created
    May 25, 2024: - initial GitHub release
    May 28, 2024: - updated docu

======================================================================

7ELEVEN PROGRAMMING LANGUAGE

7eleven is a suite of tools for disassembling and compiling code for
Williams System 6 -- 11 pinball games, implemented in the perl
programming language. While all games use M6800 assembly language,
beginning with System 7, the games also use a byte code that is
interpreted by the Williams Virtual Machine (WVM). In order to allow
code optimization 7eleven implements a special-purpose programming
language with native support for structured programming and WVM code,
rather than implementing extensions in a macro assembler.

The 7eleven programming language includes four different types of
statements: 

1) M6800 assembly statements (upper case, e.g. LDAA #$01), including
conditional assembly (. prefix, e.g. .IFDEF .. .ENDIF)

2) M6800 extensions (upper case, _ prefix) for structured programming
(e.g. _IF .. _ENDIF) and other purposed (e.g. _WVM_MODE, _TESTFLAG[A])

3) WVM statements (mixed case, e.g. killThreads #$FF Thread#22)

4) WVM extensions (mixed case, _ prefix) for structured programming
(e.g. _Loop .. _While)

The 7eleven programming language also supports a set of native WVM
byte-sized data types, including Switches, Lamps, Flags, Adjustments,
Solenoids, Threads, and Bit Groups. Since pinball programming uses a
lot of byte-code interpreters the 7eleven programming language can be
extended with encoding plugins for labels, which allows constructs like
LDAA #100K{ScoreByte}. In addition to ScoreByte, other standard plugins
include SolCmd, InvertByte, LSB and MSB. Multi-byte data types include
fixed and variable-length character strings for 7- and 16-segment
displays. 

======================================================================

7ELEVEN TOOLS

NB: The 7eleven tools cannot be run in the current working directory!

-----------
1. Compiler
-----------

Usage: C711 
    [system -6/-7 source] [-I)VM <stage>]
    [-1)st pass [-f)ind in range <from-addr,to-addr>]]
    [-2)nd pass [-o)ptimization info <file>]]
    [ROM output -s <suffix>] [create -e)qual-sized (32K) ROM images]
    [m-i)n/m-a)x ROM <hex addr>] [suppress chec-k)sum verification]
    [prepend image with -g)ap of <x> KB of FF bytes]
    [-D)EFINE <symbol>]
    [suppress -w)arnings] [-v)erbose (show warnings)]
    [output code -l)isting] [-x) output D711 .dasm file]
    [-d)ump labels] [dump -J)SR targets] [dump -R)OM before resolving labels]
    [-c)hecksum info] [report free -m)emory blocks]
    [trace -C)onditional assembly]
    [-t)rust_but_verify <ROM_image[,...]> [check already during label -r)esolution]]
    <source file>

Examples:
    1) Create ROM image from source 
	    C711 PEMBOT.s11			creates PEMBOT_U26.bin and PEMBOT_U27.bin
    2) Two-stage compilation with optimization
	    C711 -1 PEMBOT.s11			creates .OPTINFO_PEMBOT.s11
	    C711 -2 PEMBOT.s11			creates PEMBOT_U26.bin and PEMBOT_U27.bin

---------------
2. Disassembler
---------------

7eleven contains a powerful disassembly library (D711.pm) that works
with System 7 -- 11 games. However, only System 6 games can be
disassembled easily automatically, whereas System 7 -- 11 games require
manual intervention. Therefore, the 7eleven distribution only contains
a ready-made disassembler for System 6 games, called disassemble_s6.
Contact idealjoker@mailbox.org if you are interested in a disassembler
for System 7 or 11. 

Usage: disassemble_s6
		[dump -l)abels] [-u)se <label-file>]
		[include -A)PI in output]
		[write code-structuring -h)ints to <file>]
		[-i)nclude <file[,...]>
		[list -a)ddressse in output] [list -c)ode bytes]
		[suppress -g)ap data]
		[suppress code-s)tructure analysis]
		<ROM image>


In order to disassemble a System 6 game the only requirement is a file
with the ROM image --- e.g. Gorgar.bin. The command

	disassemble_s6 -a Gorgar.bin > Gorgar.s6

creates the file Gorgar.s6, which contains the game assembly code with
ROM addresses. The game binary can be re-created with the command

	C711 Gorgar.s6

which creates the file Gorgar_U14.bin. In order to verify that the
output is correct, use "cmp Gorgar.bin Gorgar_U14.bin". There should not
be any output.


The file Gorgar.s6 contains about 1000 lines of assembly code. To help
the user orient themselves, there are comment headers. The utility
command "mkIndex" lists these headers, essentially a table of contents.
Another way to improve readability of the code is to use names, instead
of numbers, for the switches and lamps. The first 9 switches (#0-8) are
system switches and the lamps in columns 7 & 8 (#48-63) are system
lamps, and those are always named. The names for the remaining switches
and lamps are found in the game manual and they can be defined in the
file "Gorgar.defs" as follows:

	$D711::Switch[9]  = 'SW_left_outlane';                     
	$D711::Switch[10] = 'SW_D_rollover';
	...
	$D711::Lamp[0] = 'L_samePlayerShootsAgain';                 
	$D711::Lamp[1] = 'L_Special_left';
	...

Note that internally the switches and lamps are numbered starting at
zero, which means that the internal switch numbers are one lower than
the numbers listed in the manual. After this file has been created, a
more readable source can be generated with

	disassemble_s6 -a -i Gorgar.defs Gorgar > Gorgar.s6
	

It is important to note that the automatic disassembly is not perfect.
There are usually blocks of data marked ANALYSIS_GAP in the assembly
source code and these have to be fully to make the code relocatable.
In the case of Gorgar, there is a 4-byte analysis gap at address $6235
and free space at the end of the ROM is filled with zeroes starting at
address $65A7. A search for "6253" yields the following code:

	<64FC>		LDX	#$6235
	<64FF>		STX	__switch_params
	<6501>          JMP     sys_switch_script

from which it s clear that the analysis gap at $6235 is a switch script.
After adding a label at that address and removing the ANALYSIS_GAP lines
at the end of the ROM, the disassembly is complete.


Note that the addresses at the beginning of each line are ignored by
"C711". Therefore it is best to remove them before starting to make
changes to the assembly source. This can be done with any reasonably
powerful text editor or, alternatively, an assembly file without
addresses can be created with "disassemble_s6" without the "-a" option.
It may furthermore be useful to also use the "-A" option, which adds the
API (labels of RAM locations and system calls) to the top of the
assembly source. 
	
------------
3. Utilities
------------

annotate_PinMAME_trace
     Annotate PinMAME TRACE output to help debugging
     NOTES:
	   - input from "TRACE <FILE> A B X" output
	   - also removes all backend calls (ISR) from output
	   - annotations:
		   - thread switching
		   - thread parking
		   - WVM/IVM operations (interpreter)

cpx
    Translate cmp -l output to hex
    EXAMPLE
	cmp -l image1.bin image2.bin | cpx

mkIndex
    Create "table of contents" from full-line comments in 7eleven source files
    EXAMPLE
	mkIndex Gorgar.s6 > Gorgar.index
    
render_char
    Render 16-bit hex code as done by Sys 11 alphanumeric displays
    EXAMPLES:
	render_char 3F00    -> 0
	render_char 7708    -> A
