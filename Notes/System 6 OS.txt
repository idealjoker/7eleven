# Switch Events

The OS expects a listing of switch handlers to tart at $60F5, in order staring with switch 0 (the tilt bob).  Each listing consists of two words: the address of the code to call when the switch is hit, and two bytes of parameters to pass along (in both __switch_params and X), allowing the handler to be re-used.

The first 8 standard switches also have standard sys_ calls, but the rest can be whatever you desire, as long as they `JMP 	sys_updateGameLogic_and_runGameEvents` at the end, or `JMP sys_switch_script` to let a switch script handle the rest.  (There is no option for a switch script to switch back to assembly)

In most situations, however, it is common to use "switch scripts" to save rom space.

# Switch Scripts

Switch scripts are a precursor to WVM, designed to perform a limited range of common operations with minimal rom usage.

To use them,  point your switch handler at sys_switch_script, and then fill the parameters with the address of your script.

Your script will start with a configuration byte, and then at least one branch.

Example: 
    <623E>	SW_spinner_script:              _SwitchScriptConfig_ Debounce(68-tics) Fire(S_gor:3-tics)
    <623F>	                                .DB L_spinner 1x1K{ScoreByte_noSound.s6} 
    <6241>	                                .DB SS_DEFAULT 1x100{ScoreByte_noSound.s6} 

## Configuration Byte

This byte controls the makeup of the following branches, and configures some other misc useful things
You can use the _SwitchScriptConfig to generate them, or code them by hand.

- bit 0: enables Extended Scripting
- bit 1: allows solenoids triggered by script to fire in tilt/game over
- bit 2: the next byte contains debounce settings (todo: make debounce encoder)
- bit 3: fires a solenoid (see SolCmd) 
- bits 4-7: amount of PinOp script bytes at the end of each branch

## Debounce Config 

Kills switch processing for a short period of time before running the script as a form of basic debounce
    _SwitchScriptConfig Debounce(<num>-tics) will generate this byte automatically

or:  
    .DB <Number of tics to debounce for>

## Solenoid Config

Fires a solenoid when the switch is hit, with a configurable delay.

    _SwitchScriptConfig Fire(<SolCmd>) After(<num>-tics) will generate this automatically

Two bytes, the first (SolCmd) specifies which solenoid to fire (lower nibble) and how long to fire it for (upper nibble).  The second is a delay before the solenoid fires.

### SolCmd encoder

(see C711.SolCmd.s6)

## Branches

Branches are evaluated in order until one's condition is met, and the final one is considered the default if none above it match.

Scripts must have at least a condition and a ScoreByte, followed by (if configured) an extended script and the specified number of PinOps.

The condition may be a lamp, flag, or adjustment check, and if that lamp is on/flag is set, then the branch will execute.  The final branch's condition must be SS_DEFAULT.

## LMC Adjustment check

(todo, clean this up and make an encoder)

@Slochar says: 
    LMC stands for Liberal-Moderate-Conservative - as in settings. If bit 7 of the LMC byte is set,
    bits 654 will contain which game adjust setting to check. There is no bounds checking for
    settings 36 or 37, which (stock) do not exist but the OS could be modified to support them. The
    lower nibble is the value you are expecting to be &#39;true&#39; - $90 would be adjustment 1 (31 in
    audits), when set for 0, process the script. $a2 would be adjustment 2, when value 2, do script.

### Script

Scripts consist of 3 parts: the score, the optional Complex Script, and then Pinops

#### ScoreByte 

One byte, determining, specifying how many points to score (or 0 for no score).

(see C711.ScoreByte.s6)

#### Extended/Complex Script

If enabled via the config byte, the first four bytes after the ScoreByte in a branch will be used to perform extend script abilites:

1. a secondary condition (ANDed with the main condition of the branch)- evaluated by sys_testBit (not the same as the main branch condition logic)
2. a SoundCmd to play
3. a PinOp to perform
4. special operations:
  - first nibble: score multiplier for the branch's ScoreByte
	- bit 4: awards EB
	- bit 5: awards Special
	- bit 6: ?
	- bit 7: ?

nop can be used to skip the first three bytes, the special op would be 0x01 for a no-op

#### PinOps

Length = the high nibble of the config byte.  Each byte is a PinOp, or nop can be used to fill in unneeded slots.

(see C711.PinOp.s6 for a list of PinOps)


# Solenoid Tables

These two tables combined allow a sequence of coils to be fired via a single PinOp

## PINOP_SOLCMD_TABLE

List of 8 SolCmds, referenced by SolOp table below

(todo: decompile this)

## PINOP_SOLOP_TABLE

This table is referenced by the solenoid PinOp.   Each entry contains an index in the SolCmd table to start at (lower nibble), and a count of how many SolCmds to run (higher nibble).  (useful for, eg, resetting drop target banks)

(todo: make an encoder)

# Sounds

There are a few different ways sounds are triggered.  

The simplest is that all scoring automatically triggers a specific sound based on what digit it is- the first five entries in the SOUND_TABLE control this (0 = 10s digit)

You can also play a SoundCmd (see encoder) in an Extended Script.

In assembly, you can trigger any sound directly by calling sys_solCmdOrPlaySound.

Sound Scripts allow you to combine a sequence of sounds easily.

## SoundCmd encoder

Plays a sound, with option to repeat it up to 15 times.  See encoder for syntax.  

todo: generate these when decompiling


## SOUND_TABLE

Table of 16 configurable sounds and how long they last (will block other sounds until it finishes)

First byte: 5 bits for what command to send to the sound board, ORed with 0x80 (lower would be a SolCmd (are these allowed here too (?)))
Second byte: sound length in tics

(todo: decode these)

## Sound Scripts

(?) how are these triggered?

Allows configuring a sequence of sounds to play.  
First byte: length in tics between triggering each entry in the list
Rest of the bytes: sound to play (see SOUND_TABLE), FF for no sound, or 00 to end the script

The sounds to play can also be SolCmds

(todo: decode these)

example:

<6393>	highScore_sndList:              .DB $42 
<6394>	                                .DB $99 $FF $FF $FF 
<6398>	                                .DB $00 
<6398>	
<6399>	gameOver_sndList:               .DB $30 
<639A>	                                .DB $93 $9A $9A $9A $9A $9A $93 
<63A1>	                                .DB $00 

## Background Sounds

(?)

# Lamps and Flags

The OS has 8 columns of lamps, and another 2 columns of flags, which operate like lamps but aren't physically present in the machine- these can be useful for easily storing simple game state

## Blink

There is also a 'blink' matrix that corresponds to the lamp matrix- if you turn on a cell in the blink matrix it will cause that lamp to flash.  The blink speed is hardcoded as BLINK_DELAY (is this value in tics(?)), and cannot be changed during gameplay (?)

You can use sys_blinkLamp to turn a blink bit on.  Using set/clearBit on a lamp will disable blinking.  See also: blink PinOp

Per @slochar, 

    Lamps are used as status indicators in a game to save memory. It is important to note that during
    a blink cycle in which a lamp is off, the game considers its status off as well. The routines that
    concern themselves with checking lamps take this into consideration and OR the information
    from the blink matrix with the main lamp matrix when determining status. A lamp is considered
    ON if its bit is set in the lamp matrix.

(?): This is a bit unclear- is the bit in the lamp matrix memory actually being toggled when the blink is on?  Or does the lamp matrix driver code check both?  (this is what my custom OS does, and feels like it makes more sense)  

(?): he also says that "a lamp is ON if its bit is set", but then also "the routines that check lamps OR the blink matrix"... so, which is it?

## Lamp/Flag Initialization and Memory Data

The matrices will be filled with INITDATA when a game is started.  

At the end of the ball, the matrix state is stored in p_data1-4.

At the beginning of the next ball, if a bit is set in MEMDATA, it'll be restored from p_data1-4


## Bit Groups

Bit groups are variable length sequences of bits in the lamp and flag matrices, allowing for common bulk operations such as advancing and rotating sets of lights (see PinOps)

System 6 supports 8 different bit groups, configered in the BITGROUP_TABLE via a start and end range (inclusive)

## Script Lamps

"Script lamps" are a lookup table of 8 lights that can be referenced via the Blink/Toggle Pinops.  If you need to commonly do operations on certain lamps, put them here.  Otherwise you'll need to use assembly to do it.  


# Game Logic

After a switch script runs, the OS will also run any Game Logic PinOp scripts whose conditions are met.  This is useful to do common processing.

You can configure a number of them at the address specified by GAMELOGIC_TABLE and GAMELOGIC_TABLE_END

(todo: make an encoder for these based on @Slochar's "background script" notes)

	- 9  bytes per entry:
		B1=XY	adjustment condition, true if adX == Y; 0 means ignore
		B2		1st lamp/flag condition, 0 means ignore
		B3		2nd lamp/flag condition
		B4,B7	1st condition/pinop pair, cond or PinOp=0 means ignore
		B5,B8	2st condition/pinop pair
    B6,B9 3st condition/pinop pair

# Game Events

After a switch script runs, and the Game Logic runs, any configured game events will also trigger, based on the state of its lamp/flag.

Each one is made of 3 parts, the lamp/flag that controls it, a delay in 16ms units, and the address of the handler to be run.  

(note the delay uses one of the two timers, if available, and if not, bad things can happen...)

example:
<6350>	gameEvents_table:               .DB Flag#03 
<6351>	                                .DB 0 
<6352>	                                .DW gameEvent_1_handler 

<6354>	                                .DB Flag#0A 
<6355>	                                .DB 0 
<6356>	                                .DW gameEvent_2_handler 

## System Events

The os also has some pre-specified events that you can configure a callback for:

### Ball Start

Configured via BALLSTART_EVENT
Details: (?)

### Ball End

Called after bonus countdown completes.
Configured via END_OF_BALL_EVENT
Details: 

### Bonus X Countdown

Configured via BONUSX_COUNTDOWN_EVENT
Details: (?)

### Background Processing

Configured via GAME_BACKGROUND_HANDLER

Runs repeatedly when no other processing is happening- usually very frequent but may be delayed.

Needs to preserve all registers

# Timers

There are two gameEvent timers, along with a soundAndDelay timer and solenoids timer which are used by OS.

They each have a one byte _timer field in memory, that counts down (?) until (?) it reaches zero, at a rate of... (?), and a _handler field which can be pointed at some code to run when they reach zero (?).

# Interval Triggers

Configured via INTERVAL_TRIGGER_1-4 and INTERVAL_TRIGGER_PINOP_1-4, and associated with the last four flags (0C-0F).

Each counter decrements once per tic when the ball is in play.  

When the counter reaches 0, the counter will be reset to INTERVAL_TRIGGER_1-4, and if the flag is set the configured PinOp will trigger.

Note: GAME_BACKGROUND_HANDLER is run before the counters are processed, so it can be used to manipulate them.  

(todo: decode pinops)

# Memory Map

## _GameVarE0-N
Freely available memory at the top of stack, at least 3 available

## _gameStatusFlags
01: gameOver 
02:gameTilted  
04:EBpending 
08: EBearned 
10:balltimeOverflow(1min passed) 
80:playfield qualified

# Sys Calls

## sys_reset_game
## sys_gameOver
## sys_background_loop
## sys_enter_audits_and_adjustments
## sys_solCmdOrPlaySound[A]
## sys_solCmd[A]
## sys_exec_switchSolCmd
## sys_B=RAM[X+B]
## sys_award_SPECIAL
## sys_switch_script
## sys_lampStatusUpdate_then_run_timedScripts
## sys_clearScoreQueue_outhole_handler
## sys_outhole_handler
## sys_start_ball
## sys_ball_kickout
## sys_end_of_game
## sys_match_handler
## sys_endOfGame_noMatch
## sys_load_playerData
## sys_X=playerData
## sys_creditButton_handler
## sys_add_player_to_game
## sys_init_ball
## sys_clear_scoreQueue
## sys_coinLeft_handler
## sys_coinCenter_handler
## sys_coinRight_handler
## sys_award_freeGame
## sys_delay[B]
## sys_delay[AB]
## sys_copyRAM
## sys_lampStatusUpdate
## sys_pinOp_solCmd
## sys_exitOnGameOverOrTilt
## sys_exit
## sys_play_soundScript
## sys_execGameLogicUpdate[X]
whenever a change to the lamps has been made, sys_updateGameLogic must be called
- automatically called at the end of every switch script and handler (?)
## sys_testBit[A]
(?) how is data returned
		00		NE
		01-3F	EQ when lamp lit but not blinking
		40-4F	EQ when flag set but not suppressed in __dontUse
		50-7F	invalid?
		80		NE (weirdly, this is not the opposite of 00)
		81-BF	NE when lamp lit but not blinking
		C0-CF	NE when flag set but not suppressed in __dontUse
		50-7F	invalid?
## sys_run_timedScripts
## sys_play_sound
## sys_light_EBlamp
## sys_setBitgroup
## sys_pinOp[A]
## sys_bitgroupOp[A]_until[B]
## sys_checkAdjustment
## sys_setBit[A]
		- sets main buffer
		- clears blink buffer
## sys_clearBit[A]
		- clears both main and blink buffers
## sys_blinkLamp[A]
		- sets blink buffer
		- does not affect main buffer (current lamp state)
		- lamps do NOT blink in sync
## sys_BX=lampMask[A]
## sys_bobTilt_handler
## sys_ballTilt_handler
## sys_tilt_sound
## sys_score[A]
## sys_score[A]_now
## sys_clear_displays
## sys_fill_displays
## sys_clear_BB_RAM
## sys_bookkeeping_menu
## sys_start_game
## sys_mergeCopy_[X]_to_[Xptr]
## sys_splitCopy_[X]_to_[Xptr]
## sys_B=shiftLeft4[X,X+1]
## sys_splitStore[B]
## sys_HSreset_handler
## sys_IRQ_handler
## sys_IRQ_handler_display[A]