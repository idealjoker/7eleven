======================================================================
                    N O T E S / R E A D M E . W P C 
                    doc: Wed Aug 28 09:00:38 2024
                    dlm: Mon Jun  2 10:52:23 2025
                    (c) 2024 idealjoker@mailbox.orgn
                    uE-Info: 54 11 NIL 0 0 72 0 2 4 NIL ofnI
======================================================================

=Memory Map=
				    
-Overview-
				    
$0000-$1FFF 	8KB RAM (battery backed)
$2000-$2FFF 	unused?
$3000-$37FF 	WPC-95 DMD frames (4 extra frames)
$3800-$3FFF 	DMD frame (memory mapped; _DMD_LOW_PAGE)
$3A00-$3BFF 	DMD frame (memory mapped; _DMD_HIGH_PAGE)
$3C00-$3FFF 	ASIC registers
$4000-$7FFF 	16KB banked ROM
$8000-$FFFF 	32KB system ROM
					  
					  
-ROM Paging-
    
- 1MB ROM space on WPC board
	- organized into 64x16KB pages (PG#00-3F)
	- 32KB (PG#3E-3F) permanently mapped to $8000-$FFFF
	- 16KB (current game page) mapped to $4000-$7FFF
	- up to 992MB (62 pages) for game assets
    
- 1MB ROM chip (27C080/27C801):
	- address range: $00000 - $FFFFF
	- PG#00-3D (30 pages, 480KB)
	- PG#3E-3F (2 pages, 32KB)

- T2 uses 512KB ROM chip (27C040/27C401):
	- address range: $00000 - $7FFFF
	- PG#20-3D (30 pages, 480KB)
	- PG#3E-3F (2 pages, 32KB)
	- May/2025: NOS AT28C040 EEPROM replacement available for $295 on eBay

- FH uses 256KB ROM chip (27C020/27C201):
	- address range: $00000 - $3FFFF
	- PG#30-3D (14 pages, 224KB)
	- PG#3E-3F (2 pages, 32KB)	 


-Labels-

- every label has a hex page id (00-3D, FF) and a name

- label definitions:
	- .LBL <name> <pg:addr>
	- name:

- label references:
	- [pg:]name
	- pg prefix can be omitted for labels on same page
	- pg prefix can be omitted for labels in prime RE 


-ROM Map-

$00000-$03FFF		PG#00
$04000-$07FFF		PG#01
$08000-$0CFFF		PG#02
$0D000-$0FFFF		PG#03

$1xxxx				PG#04-07
$2xxxx				PG#08-0B
$3xxxx				PG#0C-0F
$4xxxx				PG#10-13
$5xxxx				PG#14-17
$6xxxx				PG#18-1C
$7xxxx				PG#1D-1F
$8xxxx				PG#20-23
$9xxxx				PG#24-27
$Axxxx				PG#28-2C
$Bxxxx				PG#2D-2F
$Cxxxx				PG#30-33
$Dxxxx				PG#34-37
$Exxxx				PG#38-3C

$F0000-$F3FFF		PG#3D
$F4000-$F7FFF		PG#3E
$F8000-$FCFFF		PG#FF
$FD000-$FFFFF		PG#FF

PG 		= int(ROM_addr / 0x4000)
ADDR	= (ROM_addr % 0x4000) + 0x4000


----------------------------------------------------------------------

=Truth Values=

- CC means previous test succeeded
- truth value syscalls marked with ? at end (e.g. bitSet?)

----------------------------------------------------------------------

=Lamps and Flags (Bits)=

- the Bitshifter uses 1-based bit numbers
- Lamps are numbered from 1 for consistency with manual
- Flags are NOT numbered from 1 

	Bit Id			7eleven     
	----------------------------
	$00-$3F 		Lamp#01-40  
	$40-$7F 		Flag#00-3F (Flag#00 is not usable?)
	$80-$BF 		illegal
	$C0-$FF         Flag#40-7F (Flag#40 is not usable?)

	NOTES:
		- 

	!lampOn
		- turns on logical lamp bit and M08 (main matrix)
		- if lamp already blinking, leave it blinking


-Blinking-

- use setBit, bitSet? syscalls with blink buffer offset ($40)
	!setBit L_Lock_left $40
	!bitSet? L_EscapeRoute_10M $40


-Bit Buffers / Lamp Matrices-

	offset	meaning
	------------------------------------------------------------
	$00 	logical matrix
	$08 	primary lamp matrix (used for blinking?)
	$10 	masked from primary ($08)
	$18 	override data
	$20 	masked from previous ($08,$18)
	$28 	override data
	$30 	masked from previous ($08,$18,$28)
	$38 	override data
	$40 	blink matrix
	$48 	Flag#00-3F
	$50     Flag#40-7F

----------------------------------------------------------------------

=Bit Groups=

- 1 byte id
- 1 byte buffer offset
	$00		lamps
	$40		blink buffer
- Bitgroup#01 includes all controlled lamps

sys_bitgroupOp_ABXY
	A	ROM page of hook routine
	B	0C(rotLeft) 0E(fill), 04(???)
	X	bitgroup + buffer offset
	Y	address of hook routine

----------------------------------------------------------------------

=Multiball Devices (MBDs) / Locks=

- Notes:
	- abstraction: query library for number of balls in play, lock status, etc
	- monitoring only -- no solenoids are fired
	- event driven: each lock has an event handler that is called with an event
	  code
	- dispatchers: different subsystems use !MBD_callHandler_A <CMD> to call
	  the event handler routine 
	- MSW_lock_handler:
		- switch handler used for all locks with the lock number (1-based)
		  encoded in the switch table
		- dispatcher defining events $04 - $09, triggered by switch state
		  changes

- T2 Lock list
		0	Invalid Lock 
		1	Balltrough
		2	Left Scoop
		3	Upper Scoop
		4	Skull Popper
		5	Cannon

- lock data table
	- =LOCKTABLE is WPC table with ^payloaddata for each lock
	- 4-12 bytes per entry: (4 for Lock#00, 11 for BallTrough, 10 for scoops)
		0			lock type (00 for Lock#00 (invalid), 01 for trough, 02 for scoops)
		1-3			event handler reference (3 bytes)
		trough
			4-5		pointer to list of trough switches
			6		SolCmd
			7		pointer to table with 2 bytes
			8-10	???
		scoops
			4-9		???

- lock data in RAM
	- ^MBD_LOCK_DATA in RAM
	- _MBD_NUM_LOCKS rows
	- 5 bytes per entry:
		0	set to $80 on switch closure of lock when byte 1 == 0
		1	LOCK ENABLED when (0, ignore switch closures, except to mark them in byte 0)
		2	NUMBER OF LOCKED BALLS (0 or 1)
		3	Flags (MSW_lock_handler)
		4	Switch (<3B:72D7>   MBD_LT02(scoop)_unknownLockOp[3B]:)

- Lock Event Handlers
	- usage: !MBD_callHandler_A <CMD>
	- Handler Codes
 	    ------------------------------------------------------------------------------------------
		code	dispatcher					function
 	    ------------------------------------------------------------------------------------------
		$01		Balltrough_eventDispatcher	eject ball from trough
				serve_ball_and_exit
		$02		Balltrough_eventDispatcher	ball has ended (ends by jumping to sys_endBall_and_exit))
		$03		Balltrough_eventDispatcher	ball has drained
		$04		MSW_lock_handler 			switch not active (just opened), no ball locked logically (error condition)
		$05		MSW_lock_handler			ball ejected sucessfully
				MBD_LT02(scoop)_eject
		$06		MSW_lock_handler			ball eject failed (switch closed less than 1s after it opened; error condition)
		$07		MSW_lock_handler			switch active (switch just closed)
		$08		MSW_lock_handler			ball locked successfully (switch remains closed after delay)
		$09		MSW_lock_handler			lock lost (switch opened after closing)
		$0A		MBD_LT02(scoop)_eject		ball failed to eject??
		$0B	   	MBD_LT02(scoop)_eject		retry sucess??
		$0C		MBD_LT02(scoop)_eject		retry failure??
		$0D		MBD_LT02(scoop)_eject		eject retry??
		$0F		MBD_LT03_eject				ball ejected
				library_7563			
		$12		MBD_LT03_eject
		$13		MBD_LT03_eject				all balls ejected??
		$14		MBD_LT03_eject
		$15		MBD_LT03_eject
		$16		syscall_6E00				ball served
				sys_Balltrough_ejectBall
		$17		MBD_LT03_eject
		$18		MBD_LT04_eject				ball ejected
		$1B		MBD_LT04_eject
		$1C		MBD_LT04_eject
		$1D		MBD_LT04_eject
		$1E		MBD_LT04_eject
		$22		MBD_LT04_eject
		$23		syscall_7169				multiball served??
				

----------------------------------------------------------------------

=Switches=

- SWITCH TABLE
	0		unknown
	1		unknown
	2-4		HANDLER (3-byte ref)
	5		unknown
	6		unknown
	7		PAYLOAD (most often a lamp, but for locks it is the MBD lock number)
	8		FLAGS F1
	9		FLAGS F2
	10		unknown
	11		unknown

- switch FLAGS F1
	$10		if set, !switchActive? returns true when the switch is open (i.e. negate switch logic)

- switch FLAGS F2
	$40		always set except for coin switches
	$80		dual-action switch

- switch HANDLER
	A_in = PAYLOAD
	B_in = switch number

----------------------------------------------------------------------

=Threads=

- default thread mask is $01FF (512 thread ids)
- thread mask flags:
	$1000		???
	$2000		protected from tilt
	$0800		protected from game start
- system thread ids:
	$12-$14		tilt related
	$40-$4F		lock threads
- thread buffer with spawn values
	0-1		pointer to next thread in list
	5-6		pointer to PC in this thread buffer
	17-18	Y at spawn
	19		current ROM page
	20-21	#$172E
	34-44	current address (Program Counter)

----------------------------------------------------------------------

=Audits=

- Feature audits are numbered as in manual (T2: AU1 - AU38; Audit[0x0001] - Audit[0x0026])
- Standard audits (system audits) are all over the place (T2 Audit[0x801E-1F] are standard AU01 and AU24, respectively)

----------------------------------------------------------------------

=Adjustments=

- Feature adjustments are numbered as in manual (T2: AD01-AD19; $Adj[0x01-0x13])

----------------------------------------------------------------------

=Bit Shifter=

Buffers:
	$1F		=???			not at all common, tracing syscalls
	$27		=SWITCHES		tracing CC=switchClosed
	$2E0	=LAMPS			tracing lampOn
	$2E8	=LAMPS_ALT?		routine at 9EF1
	$320	=BLINK_FLAG?	2E0+40
	$328	=FLAGS			2E0+48		Flag#01-40
	$330	=FLAGS_HIGH		2E0+50		Flag#C0-100

----------------------------------------------------------------------

=DMD DisplaySets=

$0C		.subroutine_45FF[38]
$34		syscall_646B[3B]
$38		display player score

----------------------------------------------------------------------

=Background Tunes=

- background tune is set in <3B:6636>   update_backgroundTune
- for some, DMD animations are used

Tune	condition					Meaning
----------------------------------------------------------------------
$01		Thread#00B4 running			Off
$02		
$04		DMD#28						ball drain??
$05		F_SuperJackpot_lit			enticement
$07
$08		F_SuperJackpot_awarded		celebration
$09		DMD#21						Hurry Up
$0A		DMD#25						Payback Time
$0B
$0E
$10		SW_Outhole_handler			drain tune
$11
$12		
$13		
	
======================================================================

=Ball Drain Sequence=

SW_Outhole_handler:
	if neither multiball nor autofire are active (otherwise handle autofire)...
	...spawn ball_drained_thread
		sleep 3s
		set background tune
		!longJSR library_6636[3B]
			adjust background tune
		exit
	sys_Outhole_handler
		RAM_041A := 1
		kick ball into trough (sys_OutholeKicker_and_exit)

MSW_Balltrough_handler:
	handle _BALLTROUGH_LOCKOUT
	become Thread#0041
	let balls settle in trough
	count balls in trough
	jump to Balltrough_eventDispatcher
		<do stuff>
       	call Balltrough_event_handler with cmd $02 if end-of-ball condition is true
		otherwise, serve another ball

Balltrough_event_handler/ballTrough_endBall
	handle Autofire (again????) if active
	otherwise, jump to sys_endBall_and_exit
	
