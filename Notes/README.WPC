======================================================================
                    N O T E S / R E A D M E . W P C 
                    doc: Wed Aug 28 09:00:38 2024
                    dlm: Wed Aug 20 08:29:58 2025
                    (c) 2024 idealjoker@mailbox.orgn
                    uE-Info: 395 0 NIL 0 0 72 2 2 4 NIL ofnI
======================================================================

=Memory Map=
				    
-Overview-
				    
$0000-$17FF 	6KB RAM (volatile)
$1800-$1FFF		2KB RAM (battery backed)
$2000-$2FFF 	unused?
$3000-$37FF 	WPC-95 DMD frames (4 extra frames)
$3800-$3FFF 	DMD frame (memory mapped; _DMD_LOW_PAGE)
$3A00-$3BFF 	DMD frame (memory mapped; _DMD_HIGH_PAGE)
$3C00-$3FFF 	ASIC registers
$4000-$7FFF 	16KB banked ROM
$8000-$FFFF 	32KB system ROM
					  
					  
-ROM Paging-
    
- 1MB ROM space on WPC board
	- organized into 64x16KB pages (PG#00-3F)
	- 32KB (PG#3E-3F) permanently mapped to $8000-$FFFF
	- 16KB (current game page) mapped to $4000-$7FFF
	- up to 992MB (62 pages) for game assets
    
- 1MB ROM chip (27C080/27C801):
	- address range: $00000 - $FFFFF
	- PG#00-3D (30 pages, 480KB)
	- PG#3E-3F (2 pages, 32KB)

- T2 uses 512KB ROM chip (27C040/27C401):
	- address range: $00000 - $7FFFF
	- PG#20-3D (30 pages, 480KB)
	- PG#3E-3F (2 pages, 32KB)
	- May/2025: NOS AT28C040 EEPROM replacement available for $295 on eBay

- FH uses 256KB ROM chip (27C020/27C201):
	- address range: $00000 - $3FFFF
	- PG#30-3D (14 pages, 224KB)
	- PG#3E-3F (2 pages, 32KB)	 


-Labels-

- every label has a hex page id (00-3D, FF) and a name

- label definitions:
	- .LBL <name> <pg:addr>
	- name:

- label references:
	- [pg:]name
	- pg prefix can be omitted for labels on same page
	- pg prefix can be omitted for labels in prime RE 


-ROM Map-

8Mb ROM									4Mb ROM
----------------------------------------------------------------------
$00000-$03FFF		PG#00
$04000-$07FFF		PG#01
$08000-$0CFFF		PG#02
$0D000-$0FFFF		PG#03

$1xxxx				PG#04-07			
$2xxxx				PG#08-0B			
$3xxxx				PG#0C-0F			
$4xxxx				PG#10-13			
$5xxxx				PG#14-17			
$6xxxx				PG#18-1B			
$7xxxx				PG#1C-1F			
$8xxxx				PG#20-23			$0xxxx
$9xxxx				PG#24-27			$1xxxx
$Axxxx				PG#28-2B			$2xxxx
$Bxxxx				PG#2C-2F			$3xxxx
$Cxxxx				PG#30-33			$4xxxx
$Dxxxx				PG#34-37			$5xxxx
$Exxxx				PG#38-3B			$6xxxx

$F0000-$F3FFF		PG#3C				$70000-73FFF
$F4000-$F7FFF		PG#3D				$74000-77FFF
$F8000-$FCFFF		PG#FF				$78000-7CFFF
$FD000-$FFFFF		PG#FF				$7D000-7FFFF

PG 		= int(ROM_addr / 0x4000)
ADDR	= (ROM_addr % 0x4000) + 0x4000


----------------------------------------------------------------------

=Truth Values=

- CC means previous test succeeded (true)
- CS means previous test failed (false)
- truth value syscalls marked with ? at end (e.g. bitSet?)

----------------------------------------------------------------------

=Lamps and Flags (Bits)=

- the Bitshifter uses 1-based bit numbers
- Lamps are numbered from 1 for consistency with manual
- Flags are NOT numbered from 1 

	Bit Id			7eleven     
	----------------------------
	$00-$3F 		Lamp#01-40  
	$40-$7F 		Flag#00-3F (Flag#00 is not usable?)
	$80-$BF 		illegal
	$C0-$FF         Flag#40-7F (Flag#40 is not usable?)


-Bit Buffers / Lamp Matrices-

	offset	meaning
	------------------------------------------------------------
	$00 	logical matrix
	$08 	primary lamp matrix (used for blinking)
	$10 	masked from primary ($08)
	$18 	override data
	$20 	masked from previous ($08,$18)
	$28 	override data
	$30 	masked from previous ($08,$18,$28)
	$38 	override data
	$40 	blink matrix (indepedent of locical state)
	$48 	Flag#00-3F
	$50     Flag#40-7F

- turn on lamps / set flags:
	1) Lamp: 			!lampOn <Lamp> 
			   			!setBit <Lamp> $00 
			   			JSR lamp[A]on
			   			JSR setBit[AB] with B_in = $00
			   			JSR lamp[A]on_blinkOff
		- turn on logical lamp
		- turn on physical lamp
	2) Blinker: 		!blinkLamp <Lamp>
			     		!setBit <Lamp> $40 
				 		JSR blinkLamp[A]
				 		JSR setBit[AB] with B_in = $40 
		- turn on blink bit
		- set physical lamp in sync with other blinking lamps
	3) Flags:			!setFlag <Flag>
						!setBit <Flag> $48
					    JSR setBit[AB] with B_in = $48

- turn off lamps / clear flags:
	1) Lamp: 			!lampOff <Lamp>
			   			!clearBit <Lamp> $00
			   			JSR lamp[A]off
			   			JSR lamp[A]off_blinkOff
			   			JSR clearBit[AB] with B_in = $00
		- turn off logical lamp bit
		- turn off physical lamp, unless lamp is blinking
	2) Blinker: 		!unblinkLamp <Lamp>
				 		!clearBit <Lamp> $40
				 		JSR unblinkLamp[A]
                 		JSR clearBit[AB] with B_in = $40
		- turn off blink bit
		- set physical lamp in accordance with logical bit
	3) Completely: 		!lampOff_blinkOff <Lamp>
						JSR lamp[A]Off_blinkOff

- toggle lamps / flags:
	1) Lamp: 			JSR	toggleLamp[A]
	2) Blinker: 		JSR toggle_blinkLamp[A]
	3) Flag:			JSR toggleFlag[A]

- test for lamp / flag state:
	1) logical state: 	!lampOn? <Lamp>
					  	JSR lamp[A]on? 
					  	JSR bit[AB]isSet? with B_in = $00
	2) blink state: 	JSR lamp[A]blinking?
						JSR bit[AB]isSet? with B_in = $40
	3) flag state: 		JSR flag[A]isSet?
						JSR bit[AB]isSet? with B_in = $48

- Masking:
	- for masking usage see T2 FX_HunterShipTarget_1_hit_handler

----------------------------------------------------------------------

=Bit Groups=

- 1 byte id
- 1 byte buffer offset
	$00		lamps
	$40		blink buffer
- Bitgroup#01 includes all controlled lamps

sys_bitgroupOp_ABXY
	A	ROM page of hook routine
	B	0C(rotLeft) 0E(fill), 04(???)
	X	bitgroup + buffer offset
	Y	address of hook routine

----------------------------------------------------------------------

=Multiball Devices (MBDs) / Locks=

- Notes:
	- abstraction: query library for number of balls in play, lock status, etc
	- monitoring only -- no solenoids are fired
	- event driven: each lock has an event handler that is called with an event
	  code
	- dispatchers: different subsystems use !MBD_callHandler_A <CMD> to call
	  the event handler routine 
	- MSW_lock_handler:
		- switch handler used for all locks with the lock number (1-based)
		  encoded in the switch table
		- dispatcher defining events $04 - $09, triggered by switch state
		  changes

- T2 Lock list
		0	Invalid Lock 
		1	Balltrough
		2	Left Scoop
		3	Upper Scoop
		4	Skull Popper
		5	Cannon

- lock data table
	- =LOCKTABLE is WPC table with ^payloaddata for each lock
	- 4-12 bytes per entry: (4 for Lock#00, 11 for BallTrough, 10 for scoops)
		0			lock type (00 for Lock#00 (invalid), 01 for trough, 02 for scoops)
		1-3			event handler reference (3 bytes)
		trough
			4-5		pointer to list of trough switches
			6		SolCmd
			7		pointer to table with 2 bytes
			8-10	???
		scoops
			4-9		???

- lock data in RAM
	- ^MBD_LOCK_DATA in RAM
	- _MBD_NUM_LOCKS rows
	- 5 bytes per entry:
		0	set to $80 on switch closure of lock when byte 1 == 0
		1	LOCK ENABLED when (0, ignore switch closures, except to mark them in byte 0)
		2	NUMBER OF LOCKED BALLS (0 or 1)
		3	Flags (MSW_lock_handler)
		4	Switch (<3B:72D7>   MBD_LT02(scoop)_unknownLockOp[3B]:)

- Lock Event Handlers
	- usage: !MBD_callHandler_A <CMD>
	- Handler Codes
 	    ------------------------------------------------------------------------------------------
		code	dispatcher					function
 	    ------------------------------------------------------------------------------------------
		$01		Balltrough_eventDispatcher	eject ball from trough
				serve_ball_and_exit
		$02		Balltrough_eventDispatcher	ball has ended (ends by jumping to sys_endBall_and_exit))
		$03		Balltrough_eventDispatcher	ball has drained
		$04		MSW_lock_handler 			switch not active (just opened), no ball locked logically (error condition)
		$05		MSW_lock_handler			ball ejected sucessfully
				MBD_LT02(scoop)_eject
		$06		MSW_lock_handler			ball eject failed (switch closed less than 1s after it opened; error condition)
		$07		MSW_lock_handler			switch active (switch just closed)
		$08		MSW_lock_handler			ball locked successfully (switch remains closed after delay)
		$09		MSW_lock_handler			lock lost (switch opened after closing)
		$0A		MBD_LT02(scoop)_eject		ball failed to eject??
		$0B	   	MBD_LT02(scoop)_eject		retry sucess??
		$0C		MBD_LT02(scoop)_eject		retry failure??
		$0D		MBD_LT02(scoop)_eject		eject retry??
		$0F		MBD_LT03_eject				ball ejected
				library_7563			
		$12		MBD_LT03_eject
		$13		MBD_LT03_eject				all balls ejected??
		$14		MBD_LT03_eject
		$15		MBD_LT03_eject
		$16		syscall_6E00				ball served
				sys_Balltrough_ejectBall
		$17		MBD_LT03_eject
		$18		MBD_LT04_eject				ball ejected
		$1B		MBD_LT04_eject
		$1C		MBD_LT04_eject
		$1D		MBD_LT04_eject
		$1E		MBD_LT04_eject
		$22		MBD_LT04_eject
		$23		syscall_7169				multiball served??
				

----------------------------------------------------------------------

=Lamp Effects (LampFX)=

- defined in table =LAMPFX_TABLE
	- each entry is 11 bytes:
		B0
				Notes:
					- must not be 00
		B1		Zero
				Notes:
					- all 00 in Terminator-2, Judgement Day
		B2		Flags
					08	FX used both during attract and game-play
					10	FX used only during attract
					20	replacement bit for bit 20 in B4; commonly set in T2
					40	common in T2
	                80  not common
				Notes:
					- most or all regular lampFX in T2 have flags 60	                
		B3		Bitgroup (Lamp String)
		B4		Flags?
				Notes
					- bit 20 in this byte is replaced bye B2 flag bit 20
					- common values: 04(!), 0C, 14(!!), 40, C8
		B5
		B6
		B7-9	Handler Reference
		BA
- typical entry:
	.DB $B0        							B0
	.DB $00									B1		
	.DB $60									B2 		Flags (common value)
	.DB LG_HK_targets						B3 		Bitgroup
	.DB $40									B4		Flags?
	.DB $00									B5
	.DB $00   								B6
    .DR 34:LampFX_Skillshot_handler $34		B7-9	Handler Reference
    .DB $00									BA


		



		

----------------------------------------------------------------------

=Switches=

- SWITCH TABLE
	0		unknown
	1		unknown
	2-4		HANDLER (3-byte ref)
	5		unknown
	6		unknown
	7		PAYLOAD (most often a lamp, but for locks it is the MBD lock number)
	8		FLAGS F1
	9		FLAGS F2
	10		unknown
	11		unknown

- switch FLAGS F1
	$10		if set, !switchActive? returns true when the switch is open (i.e. negate switch logic)

- switch FLAGS F2
	$40		always set except for coin switches
	$80		dual-action switch

- switch HANDLER
	A_in = PAYLOAD
	B_in = switch number

----------------------------------------------------------------------

=Threads=

- thread id mask is $01FF 
	- 512 thread ids
- thread mask flags:
	$0200		unused/reserved
	$0400		unused/reserved
	$0800		killed in sys_initBall_event (ball start)
	$1000		killed in sys_endBall_and_exit (ball end) after thread delay
	$2000		killed in sys_tilt (tilt)
	$4000		killed in sys_killThreads_gameStart (game start)
	$8000		waited for in sys_endBall_and_exit (15s timeout)
- popular flag combinations
	$00xx		protected (not killed by system); not waited for
	$78xx		unprotected; not waited for
	$20xx		killed on tilt only; not waited for (e.g. ball search)
	$38xx		??? (bobtilt swing delay)
	$18xx		killed on ball start and ball end (bobtilt switch debounce)
- system thread ids:
	$xx12-$xx14		tilt system
	$xx20-$xx3F		lamp FX
	$xx40-$xx4F		lock system
- thread buffer with spawn values
	0-1		pointer to next thread in list
	5-6		pointer to PC in this thread buffer
	17-18	thread flags/id (Y_in at spawn)
	19		current ROM page
	20-21	#$172E
	32		value of RAM_68, lamp blink state??
	33		flags: $01 player_Gamestart_event executed
	34-44	current address (Program Counter)

----------------------------------------------------------------------

=Audits=

- Feature audits are numbered as in manual (T2: AU1 - AU38; Audit[0x0001] - Audit[0x0026])
- Standard audits (system audits) are all over the place (T2 Audit[0x801E-1F] are standard AU01 and AU24, respectively)

----------------------------------------------------------------------

=Adjustments=

- Feature adjustments are numbered as in manual (T2: AD01-AD19; $Adj[0x01-0x13])

----------------------------------------------------------------------

=Bit Shifter=

Buffers:
	$1F		=???			not at all common, tracing syscalls
	$27		=SWITCHES		tracing CC=switchClosed
	$2E0	=LAMPS			tracing lampOn
	$2E8	=LAMPS_ALT?		routine at 9EF1
	$320	=BLINK_FLAG?	2E0+40
	$328	=FLAGS			2E0+48		Flag#01-40
	$330	=FLAGS_HIGH		2E0+50		Flag#C0-100

----------------------------------------------------------------------

=DMD DisplaySets=

$0C		.subroutine_45FF[38]
$34		syscall_646B[3B]
$38		display player score

----------------------------------------------------------------------

=Background Tunes=

- background tune is set in <3B:6636>   update_backgroundTune
- for some, DMD animations are used

Tune	condition					Meaning
----------------------------------------------------------------------
$01		Thread#00B4 running			Off
$02		
$04		DMD#28						ball drain??
$05		F_SuperJackpot_lit			enticement
$07
$08		F_SuperJackpot_awarded		celebration
$09		DMD#21						Hurry Up
$0A		DMD#25						Payback Time
$0B
$0E
$10		SW_Outhole_handler			drain tune
$11
$12		
$13		

----------------------------------------------------------------------

=System Calls=

!lampOn <lamp>
	- turns on logical lamp bit and M08 (main matrix)
	- if lamp already blinking, leave it blinking

!memClear <addr> <16-bit len>
	
... and heaps more ...
