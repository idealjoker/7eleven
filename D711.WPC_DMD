#======================================================================
#                    D 7 1 1 . W P C _ D M D 
#                    doc: Thu Jul 18 06:34:49 2024
#                    dlm: Mon Mar 17 22:00:49 2025
#                    (c) 2024 idealjoker@mailbox.org
#                    uE-Info: 59 36 NIL 0 0 72 10 2 4 NIL ofnI
#======================================================================

# WPC Disassembly 

# HISTORY:
#	Jul 18, 2024: - created; WMS CPU vectors disassemble correctly
#	Aug  9, 2024: - continued
#	Aug 10, 2024: - added support for ROM pages
#	Aug 11, 2024: - System Call Pointers disassemble correctly
#				  - BUG: WMS CPU vectors no longer disassemble correctly
#	Aug 12, 2024: - added support for system strings
#	Aug	14, 2024: - imported WPC specific code from [D711.pm]
#	Aug 15, 2024: - BUG: def_WPC_codePtr() did not define target labels
#	Aug 16, 2024: - many improvements; now switch table disassembles w/o errors
#	Aug 17, 2024: - many improvements
#	Aug 18, 2024: - BUG: API loaded before ROM
#	Aug 19, 2024: - added _skip
#				  - started adapting to ! WPC shortcut
#	Aug 21, 2024: - BUG: EXTRA_IND, EXTRA_BEFORE_LABEL and EXTRA_AFTER_OP where not
#						 paged in and out
#	Aug 23, 2024: - decimalized !*Sleep args
#	Aug 25, 2024: - renamed addScore because it was wrnog
#				  - BUG: substr used wrong length arg
#	Aug 27, 2024: - BUG: @DIVIDER was not swapped in and out
#				  - additions
#	Aug 28, 2024: - BUG: switchTable allowed labels for bytes
#				  - BUG: wrong page labels in set_WPC_ref
#	Aug 29, 2024: - moved extra lines after RTS, JMP, etc in here from [D711.M6809]
#	Aug 31, 2024: - moved API loading into disassemble_WPC_DMD
#				  - BUG: decimalization of sleep args did not work for lower case sleep
#	Sep  1, 2024: - added support for _IF_true and _IF_false "macros"
#	Sep  2, 2024: - made lamps decimal
#	Sep  4, 2024: - BUG: _IF_true did not work correctly with &skip
#	Sep  8, 2024: - added empty lines after tables
#				  - added def_WPC_lockTable()
#	Sep 10, 2024: - BUG: lock table has different structure
#	Sep 15, 2024: - new label syntax
#	Sep 21, 2024: - BUG: line spacing
#	Mar 11, 2025: - BUG: WCP_codeRef defined AUTO_LBL in wrong ROM page (difficult!)
#				  - BUG: lockTable had .DWBW instead of .DWB
#	Mar 14, 2025: - improved error message
#	Mar 15, 2025: - adapted to new interface w/o _DMD in function names
#				  - BUG: init_WPC() set _cur_RPG
#	Mar 16, 2025: - BUG: couple of label bugs
# END OF HISTORY 

#----------------------------------------------------------------------
# Game Disassembly Routine
#----------------------------------------------------------------------

sub define_MBD_syscalls()
{
	my($lockRAMandTableDataRefs_pat) = '34 12 B1 RAM_ADDR 25 05 BD 82' .		# BYU=lockRAMandTableDataRefs[A]
	 							   'B6 47 4F 34 02 C6 05 3D FE RAM_ADDR' .
								   '33 CB 35 02 8E PAGE_ADDR C6 ROM_PAGE' .
								   'BD SYSCALL_ADDR BD SYSCALL_ADDR' .
								   '1E 23 35 92';
	my(@matchData) = scanCode(0x3B,0x4000,0x7FFF,$lockRAMandTableDataRefs_pat);
	define_label('BYU=lockRAMandTableDataRefs[A]',$matchData[0]);
	define_label('_MBD_NUM_LOCKS',$matchData[1]);
	define_label('^MBD_LOCK_DATA',$matchData[2]);
	define_syscall('X=^tableElt[ABX]',$matchData[5],'');
	define_syscall('Y=[XB]',$matchData[6],'');
	my($orpg) = select_WPC_RPG($matchData[4]);
	$Address = $matchData[3];   
	def_WPC_lockTable('=LOCKTABLE','Lock Table / Multiball Device Table',1)
}

sub disassemble_WPC()
{
	my($dasm_CPU_vectors) 		= 1;
	my($dasm_system_pointers) 	= 1;
	my($dasm_switchTables)		= 1;
#	my($dasm_lockTable)			= 1;
	my($dasm_MBD)				= 1;
	my($dasm_randomFindings)	= 1;
	my($dasm_sys_gaps)			= 1;
	my($dasm_fontTable)			= 0;
	my($dasm_DMDtable)			= 0;

	define_MBD_syscalls() if ($dasm_MBD);

	if ($dasm_CPU_vectors) {
		$Address = 0xFFF0;														# CPU vectors
		insert_divider($Address,'CPU Vectors');
	
		def_code_ptr('RESERVED_vector','RESERVED_handler','CPU Vector Handler');	
		def_code_ptr('SWI3_vector','SWI3_handler','CPU Vector Handler');
		def_code_ptr('SWI2_vector','SWI2_handler','CPU Vector Handler');			
		def_code_ptr('FIRQ_vector','FIRQ_handler','CPU Vector Handler');
		def_code_ptr('IRQ_vector','IRQ_handler','CPU Vector Handler');
		def_code_ptr('SWI_vector','SWI_handler','CPU Vector Handler');
		def_code_ptr('NMI_vector','NMI_handler','CPU Vector Handler');				
	    def_code_ptr('RST_vector','RST_handler','CPU Vector Handler');				
    }

	if ($dasm_system_pointers) {
		$Address = 0x8000;
		insert_divider($Address,'Bank Id');
		def_byte_hex('_ROMPG_SYS1_ID');

		insert_divider($Address,'System Call Pointers');
		while ($Address < 0x812D) {
			my($taddr) = sprintf('%04X',WORD($Address));
			my($trpg) = sprintf('%02X',BYTE($Address+2));
			def_WPC_codeRef("syscall_$taddr",'System Call');
		}

		my($ubyte,$uword);

		$Address = 0x812D;
		insert_divider($Address,'System Data Pointers');
		$Address = def_WPC_ref('_RAM_04AF_INIT_VALUE');
			def_byte_hex();

		$Address = 0x813C;
		def_WPC_stringRef('sysstr_gameName','System String');
		def_WPC_stringRef('sysstr_gameNumber','System String');
		def_WPC_stringRef('sysstr_buildDate','System String');

		$Address = 0x813C;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x813F;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x8142;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x8145;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x814E;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x8151;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x8157;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x815A;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x8166;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_WORD_%d',++$uword));
			def_word_hex();

		$Address = 0x8184;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_WORD_%d',++$uword));
			def_word_hex();

		$Address = 0x8187;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_WORD_%d',++$uword));
			def_word_hex();

		$Address = 0x818A;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_WORD_%d',++$uword));
			def_word_hex();

		$Address = 0x8190;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_WORD_%d',++$uword));
			def_word_hex();

		$Address = 0x8193;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x8199;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x819C;
		$Address = def_WPC_ref('=UNKNOWN_SYSTEM_TABLE_1');
			def_wordblock_hex(8,'=UNKNOWN_SYSTEM_TABLE_1','System Table');

        $Address = 0x819F;
		$Address = def_WPC_ref(sprintf('_UNKNOWN_SYSTEM_BYTE_%d',++$ubyte));
			def_byte_hex();

		$Address = 0x81B6;
		$Address = def_WPC_ref('=BITSHIFTER_LAMPMATRIX_LOOKUPTABLE');
			def_byteblock_hex(65);

		$Address = 0x8296;
		def_ptr_hex('^=STATUS_AREA');
		insert_divider($Address,'System Code');}

	if ($dasm_switchTables) {
		$Address = 0x81C5;
		$Address = def_WPC_ref('=SWITCHTABLE');
			def_WPC_switchTable(undef,'Switch Table',1);				# label already defined, follow code
		$Address = 0x821C;
		$Address = def_WPC_ref('=AUX_SWITCHTABLE');
			def_WPC_switchTable(undef,'Switch Table',1)
				if defined($Address);
	}

	if  ($dasm_lockTable) {
		select_WPC_RPG(0x30);											# BYU=lockDataAndHandlerPointer_A
		$Address = 0x7F13;	
		def_WPC_lockTable('=LOCKTABLE','Lock Table / Multiball Device Table',1)
	}

	if ($dasm_randomFindings) {											# manual findings
		$Address = 0xAE39; def_code('sys_bitIsSet_4BG');				# ???
		$Address = 0xAE46; def_code('sys_bitIsClear_4BG');

		select_WPC_RPG(0x31);
		$Address= 0x4D9C; def_byteblock_hex(5,sprintf('HuntershipTarget_masks',$Address));		# Data Tables
		$Address= 0x50E4; def_wordblock_hex(10,sprintf('targetBank_soundTable',$Address));
		$Address= 0x5CBC; def_wordblock_hex(10,sprintf('data_table_%04X',$Address));
		$Address= 0x5CC6; def_byteblock_hex(4,sprintf('data_table_%04X',$Address));
		$Address= 0x5FC9; def_byteblock_hex(10,sprintf('score_table_%04X',$Address));
		$Address= 0x5FEB; def_byteblock_hex(10,sprintf('score_table_%04X',$Address));
		$Address= 0x62C0; def_wordblock_hex(10,sprintf('jetBumper_soundTable',$Address));

		select_WPC_RPG(0x3B);
		$Address = 0x6717; def_code('unkown_bitgroupOp_hook?_6717');	# finding bitgroup syscalls
		$Address = 0x6781; def_code('unkown_bitgroupOp_hook?_6781');
		$Address = 0x6F8C; def_code('MBD_lockEject_thread');			# tracing MBD system
		$Address = 0x75AF;
			def_code_ptr('MBD_eject_handlers','MBD_LT00_eject[A]');
								   def_code_ptr(undef,'MBD_LT01_eject[A]');
								   def_code_ptr(undef,'MBD_LT02_eject[A]');
								   def_code_ptr(undef,'MBD_LT03_eject[A]');
								   def_code_ptr(undef,'MBD_LT04_eject[A]');
		$Address = 0x75B9;												# random find; table accessed identically to 0x75AF
			def_code_ptr('MBD_forceEject_handlers','MBD_LT00_forceEject[A]');
								   def_code_ptr(undef,'MBD_LT01_forceEject[A]');
								   def_code_ptr(undef,'MBD_LT02_forceEject[A]');
								   def_code_ptr(undef,'MBD_LT03_forceEject[A]');
								   def_code_ptr(undef,'MBD_LT04_forceEject[A]');

		$Address = 0x715E; def_code('MBD_Balltrough_ejectBall_thread'); 		# tracing sys_ballServe

	}

	if ($dasm_sys_gaps) {												# code disassembled to help understand big picture
		$Address = 0x82CB; def_code('unknown_82CB');
		$Address = 0x82E2; def_code('unknown_82E2');
		$Address = 0x8329; def_code('unknown_8329');
		$Address = 0x835E; def_code('memCopy_XY');
		$Address = 0x8378; def_code('unknown_8378');
		$Address = 0x83B0; def_code('unknown_83B0');
		$Address = 0x83C1; def_code('unknown_83C1');
		$Address = 0x83CE; def_code('unknown_83CE');
		$Address = 0x83F5; def_code('unknown_83F5');
		$Address = 0x8402; def_code('unknown_8402');
		$Address = 0x840F; def_code('unknown_840F');
		$Address = 0x843A; def_code('unknown_lampOp');
		$Address = 0x8458; def_code('unknown_lamp_or_bitOp_1');
		$Address = 0x846C; def_code('unknown_lamp_or_bitOp_2');
		$Address = 0x849E; def_code('unknown_bitOp');
		$Address = 0x8512; def_code('unknown_8512');
		$Address = 0x852C; def_code('unknown_852C');

		$Address = 0xA70B; def_code('unknown_A70B');
		$Address = 0xFA7D; def_code('sys_growJackpot[A]');				# gap code
				
	}

	if ($dasm_fontTable) {
		$Address = 0x8285;
		my($addr) = def_ptr('^sys_fontTable');
		def_WPC_fontTable('sys_fontTable','Font Table');
	}

	if ($dasm_DMDtable) {
		$Address = 0x8288;
		my($addr) = def_ptr('^sys_DMDtable');
		def_WPC_DMDTable('sys_DMDtable','DMD Table');
	}
}

#----------------------------------------------------------------------
# Post Disassembly Magic
#----------------------------------------------------------------------

sub apply_magic_WPC($$)
{
	my($fa,$la) = @_;

	for (my($addr)=$fa; $addr<=$la-1; $addr++) {
##		if ($addr==0x44B4 && $_cur_RPG==0x31) {
##			printf(STDERR "OP=$OP[$addr] RPG=%02X LBL=$LBL[$addr+3] OPA0=$OPA[$addr][0]\n",$_cur_RPG);
##		}
		if ($OP[$addr] eq 'JMP' && $LBL[$addr+3] =~ m{^([0-9A-F]{2}:)?$OPA[$addr][0]$}) {			# 1) JMP *+3 
			undef($OP[$addr]);													# 		generate postfix tag
			push(@{$OPA[$addr-3]},'&skip');
			undef($LBL[$addr+3])												# 		should probably also undef Lbl!
				if ($Lbl_refs{$LBL[$addr+3]} == 1);
			splice(@{$OPA[$addr]},0,1);
		} elsif ($OP[$addr] eq '!' && $OPA[$addr][0] =~ m{leep$}) {				# 2) decimalize sleep arguments
			$OPA[$addr][1] = hex(substr($OPA[$addr][1],1,4));
		} elsif ($IND[$addr] == $code_base_indent &&							# 3) add extra space after top-level "exit" instructions
				 (isMember($OP[$addr],'RTS','BRA','LBRA','JMP','_ENDLOOP') ||
				  ($OP[$addr] eq '!' && $OPA[$addr][0] eq 'exitThread') ||
				  $REM[$addr] eq 'RTS')) {
			insert_empty_line($addr);
		} elsif ($OPA[$addr][0] =~ m{[^\?]\?$}) {								# 4) _IF_true / _IF_false
			my($noa) = $addr + 1;												#	 	execute when last arg ends with a ? but not with ??
			while (!defined($OP[$noa]) ||
				   ($OP[$noa] eq 'JMP' && $LBL[$noa+3] =~ m{^([0-9A-Z]{2}:)?$OPA[$noa][0]$})) {
				$noa++;
				die if $noa > 0xFFFF;
			}
			if    ($OP[$noa] eq '_IF_CC') { $OP[$noa] = '_IF_true'; }			# _IF_true
			elsif ($OP[$noa] eq '_IF_CS') { $OP[$noa] = '_IF_false'; }			# _IF_false
			elsif ($OP[$noa] eq 'BCC') { $OP[$noa] = '_branchIfTrue'; }			# _branchIfTrue
			elsif ($OP[$noa] eq 'BCS') { $OP[$noa] = '_branchIfFalse'; }		# _branchIfFalse
		}
	}
}

#----------------------------------------------------------------------
# Init Disassembly System
#----------------------------------------------------------------------

sub init_WPC(@)
{
	my(@linc) = @_;
	
	require 'WPC.API';														# load API after ROM has been loaded but before -i are processed
	while (@linc) {
		require './' . shift(@linc);
	}

	select_WPC_RPG($start_page);
}

#======================================================================
# WPC Disassembly Library
#======================================================================

#----------------------------------------------------------------------
# ROM Paging
#----------------------------------------------------------------------

sub select_WPC_RPG($)
{
	my($RPG) = @_;
##	printf(STDERR "select_WPC_RPG(%02X) [%02X]\n",$RPG,$_cur_RPG);

	if (!defined($RPG) || !numberp($RPG) || ($RPG != 0xFF && ($RPG<0 && $RPG>0x3D))) {
		if (numberp($RPG)) {
			die(sprintf("select_WPC_RPG(%02X): bad page id\n",$RPG))
		} else {
			die(sprintf("select_WPC_RPG($RPG): bad page id\n"))
		}
	}
		
	return $_cur_RPG if ($RPG == 0xFF || $RPG == $_cur_RPG);
	die unless defined($RPG);
	
	@{$OPPG[$_cur_RPG]} 	 	= @OP[0x4000..0x7FFF];									# swap out active page
	@{$INDPG[$_cur_RPG]}	 	= @IND[0x4000..0x7FFF]; 		    
	@{$TYPEPG[$_cur_RPG]}	 	= @TYPE[0x4000..0x7FFF];		    
	@{$OPAPG[$_cur_RPG]}	 	= @OPA[0x4000..0x7FFF]; 		    
	@{$REMPG[$_cur_RPG]}	 	= @REM[0x4000..0x7FFF]; 		    
	@{$EXTRAPG[$_cur_RPG]}	 	= @EXTRA[0x4000..0x7FFF]; 		    
	@{$EXTRA_INDPG[$_cur_RPG]}	= @EXTRA_IND[0x4000..0x7FFF]; 		    
	@{$EXTRA_BEFORE_LABELPG[$_cur_RPG]}	= @EXTRA_BEFORE_LABEL[0x4000..0x7FFF]; 		    
	@{$EXTRA_AFTER_OPPG[$_cur_RPG]}		= @EXTRA_AFTER_OP[0x4000..0x7FFF]; 		    
	@{$LBLPG[$_cur_RPG]}	 	= @LBL[0x4000..0x7FFF]; 		    
	@{$AUTO_LBLPG[$_cur_RPG]} 	= @AUTO_LBL[0x4000..0x7FFF]; 		    
	@{$decodedPG[$_cur_RPG]} 	= @decoded[0x4000..0x7FFF];
	@{$DIVIDERPG[$_cur_RPG]} 	= @DIVIDER[0x4000..0x7FFF];
	@{$ROMPG[$_cur_RPG]}	 	= @ROM[0x4000..0x7FFF]
		unless(@{$ROMPG[$_cur_RPG]});
    
	@OP[0x4000..0x7FFF]			= @{$OPPG[$RPG]};										# swap in new page
	@IND[0x4000..0x7FFF] 		= @{$INDPG[$RPG]};
	@TYPE[0x4000..0x7FFF]		= @{$TYPEPG[$RPG]};
	@OPA[0x4000..0x7FFF] 		= @{$OPAPG[$RPG]};
	@REM[0x4000..0x7FFF] 		= @{$REMPG[$RPG]};
	@EXTRA[0x4000..0x7FFF] 		= @{$EXTRAPG[$RPG]};
	@EXTRA_IND[0x4000..0x7FFF]	= @{$EXTRA_INDPG[$RPG]};
	@EXTRA_BEFORE_LABEL[0x4000..0x7FFF] = @{$EXTRA_BEFORE_LABELPG[$RPG]};
	@EXTRA_AFTER_OP[0x4000..0x7FFF] 	= @{$EXTRA_AFTER_OPPG[$RPG]};
	@LBL[0x4000..0x7FFF] 		= @{$LBLPG[$RPG]};
	@AUTO_LBL[0x4000..0x7FFF] 	= @{$AUTO_LBLPG[$RPG]};
	@decoded[0x4000..0x7FFF] 	= @{$decodedPG[$RPG]};
	@DIVIDER[0x4000..0x7FFF] 	= @{$DIVIDERPG[$RPG]};
	if (@{$ROMPG[$RPG]}) {
		@ROM[0x4000..0x7FFF]	= @{$ROMPG[$RPG]};										# copy from page buffer
	} else {
		load_ROM($ARGV[0],0x4000,$RPG,16);												# load from file
	}
	
	my($oRPG) = $_cur_RPG;
    $_cur_RPG = $RPG;

	unless ($decoded[0x4000]) {															# decode page id first time a page is referenced
		my($oA) = $Address;
		$Address = 0x4000;
		def_byte_hex('_ROMPG_ID',sprintf('ROM PAGE %02X',$_cur_RPG));
		$Address = $oA;
	}
	
    return $oRPG;
}

#----------------------------------------------------------------------
# Lock Table / Multiball Device Table
#----------------------------------------------------------------------

sub def_WPC_lockTable(@)
{
	my($lbl,$divider_label,$follow_code) = @_;
#	print(STDERR "def_WPC_lockTable(@_)\n");

	die unless defined($Address);
	return if ($decoded[$Address]);												
	return if defined($OP[$Address]);

	if (defined($lbl)) {
		$lbl = $` if ($lbl =~ m{\[[0-9A-F]{2}\]$}); 								
	    setLabel($lbl,$Address);
	}
    
	insert_divider($Address,$divider_label);

	$IND[$Address] = $data_indent; $TYPE[$Address] =  $CodeType_data;
	$OP[$Address] = '.DWB';
	my($rows,$cols) = (WORD($Address),BYTE($Address+2));
	push(@{$OPA[$Address]},$rows);
	push(@{$OPA[$Address]},$cols);
	$REM[$Address] = 'number of locks, bytes per lock' unless defined($REM[$Address]);
	$decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;

	for (my($lck)=0; $lck<$rows; $lck++) {
#		print(STDERR "lck = $lck\n");
		my($ptr) = WORD($Address);
		$IND[$Address] = $data_indent; $TYPE[$Address] =  $CodeType_data;
		$OP[$Address] = '.DW';
		my($taddr) = WORD($Address);
			my($tlbl) = $LBL[$taddr];
			$tlbl = sprintf('Lock#%02X_data',$lck) unless defined($tlbl);
		    setLabel($tlbl,$taddr);
		push(@{$OPA[$Address]},sprintf('$%04X',$taddr));
		$REM[$Address] = 'pointer to lock definition data (4-10 bytes)' if !defined($REM[$Address]) && $lck==0;
	    $decoded[$Address++] = $decoded[$Address++] = 1;

		my($trpg);
	    my($sa) = $Address;
	    $Address = $taddr;
		$IND[$Address] = $data_indent; $TYPE[$Address] =  $CodeType_data;
		$REM[$Address] = sprintf('Lock#%02X',$lck) if !defined($REM[$Address]);
		$OP[$Address] = '.DBR';
		push(@{$OPA[$Address]},sprintf('$%02X',BYTE($Address)));
		push(@{$OPA[$Address]},sprintf('$%04X',$taddr=WORD($Address+1)));
		push(@{$OPA[$Address]},sprintf('$%02X',$trpg=BYTE($Address+3)));
	    $decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;
		if ($lck == 1) {
			$OP[$Address-4] = '.DBRWB';
			push(@{$OPA[$Address-4]},sprintf('$%04X',WORD($Address)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+2)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+3)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+4)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+5)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+6)));
			$decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;
			$decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;
			$decoded[$Address++] = 1;
		} elsif ($lck > 1) {
			$OP[$Address-4] = '.DBRB';
			push(@{$OPA[$Address-4]},sprintf('Switch#%02X',BYTE($Address)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+1)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+2)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+3)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+4)));
			push(@{$OPA[$Address-4]},sprintf('$%02X!',BYTE($Address+5)));
			$decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;
			$decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;
		}

	    if ($follow_code) {
	    	my($srpg) = select_WPC_RPG($trpg);
	    	insert_divider($taddr,'Lock Event Handler');
			my($tlbl) = $LBL[$taddr];
			$tlbl = sprintf('Lock#%02X_handler',$lck) unless defined($tlbl);
		    setLabel($tlbl,$taddr);
			disassemble_asm($code_base_indent,$taddr,$tlbl,undef,$follow_code);
			select_WPC_RPG($srpg);
	    }

	    $Address = $sa;
    }
    insert_empty_line($Address-2);
}

#----------------------------------------------------------------------
# Switch Table
#----------------------------------------------------------------------

sub def_WPC_switchTable(@)
{
	my($lbl,$divider_label,$follow_code) = @_;
#	print(STDERR "def_WPC_switchTable(@_)\n");

	die unless defined($Address);
	return if ($decoded[$Address]);												
	return if defined($OP[$Address]);

	if (defined($lbl)) {
		$lbl = $` if ($lbl =~ m{\[[0-9A-F]{2}\]$}); 								
	    setLabel($lbl,$Address);
	}
    
	insert_divider($Address,$divider_label);

	$IND[$Address] = $data_indent; $TYPE[$Address] =  $CodeType_data;
	$OP[$Address] = '.DWB';
	my($rows,$cols) = (WORD($Address),BYTE($Address+2));
	push(@{$OPA[$Address]},$rows);
	push(@{$OPA[$Address]},$cols);
	$REM[$Address] = 'number of switches, bytes per switch' unless defined($REM[$Address]);
	$decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;

	for (my($sw)=0; $sw<$rows; $sw++) {
#		print(STDERR "sw = $sw\n");
		my($opaddr) = $Address;
		$IND[$opaddr] = $data_indent; $TYPE[$opaddr] =  $CodeType_data;
		$OP[$opaddr] = '.DBBRB';
		$REM[$opaddr] = defined($Switch[$sw]) ? $Switch[$sw] : sprintf('Switch#%02X',$sw);
		push(@{$OPA[$opaddr]},sprintf('$%02X!',BYTE($Address))); $decoded[$Address++] = 1;
		push(@{$OPA[$opaddr]},sprintf('$%02X!',BYTE($Address))); $decoded[$Address++] = 1;

		my($ta,$tp) = (WORD($Address),BYTE($Address+2));
		my($swn) = defined($Switch[$sw]) ? $Switch[$sw] : sprintf('Switch#%02X',$sw);
		push(@{$OPA[$opaddr]},label_address($ta,$swn.'_handler',1));		# suppress address suffix in label
		push(@{$OPA[$opaddr]},sprintf('$%02X',$tp));
		WPC_codeRef($swn.'_handler',"Switch Handler ($swn)",$follow_code);
		$decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;

		push(@{$OPA[$opaddr]},sprintf('$%02X!',BYTE($Address))); $decoded[$Address++] = 1;
		push(@{$OPA[$opaddr]},sprintf('Lamp#%d',BYTE($Address))); $decoded[$Address++] = 1;
		push(@{$OPA[$opaddr]},sprintf('$%02X!',BYTE($Address))); $decoded[$Address++] = 1;
		push(@{$OPA[$opaddr]},sprintf('$%02X!',BYTE($Address))); $decoded[$Address++] = 1;
		push(@{$OPA[$opaddr]},sprintf('$%02X!',BYTE($Address))); $decoded[$Address++] = 1;
		push(@{$OPA[$opaddr]},sprintf('$%02X!',BYTE($Address))); $decoded[$Address++] = 1;
	}
    insert_empty_line($Address-11);
}   
		    
#----------------------------------------------------------------------
# References
#	- loads RPG
#----------------------------------------------------------------------

sub def_WPC_ref($@)														# DOES NOT MAINTAIN RPG
{																			
	my($pointee_lbl,$rem) = @_;
	die unless defined($Address);

    die unless ($Address>=$MIN_ROM_ADDR && $Address<=$MAX_ROM_ADDR);
    die(sprintf("def_WPC_ref(%04X,$lbl): addresses below 0x8000 not supported (implementation restriction)",$Address))
    	unless ($Address >= 0x8000);

	my($pointee_addr) = WORD($Address);
	my($RPG) = BYTE($Address+2);
#	printf(STDERR "def_WPC_ref: %02X:%04X\n",$RPG,$pointee_addr);
	select_WPC_RPG($RPG)
		unless ($RPG == 0x00);																# NULL ref

	$pointee_lbl = $` if ($pointee_lbl =~ m{\[[0-9A-F]{2}\]$});            					# remove previous RPG if there is one
	setLabel("^$pointee_lbl",$Address);
	
	$OP[$Address] = '.DWB'; $IND[$Address] = $data_indent; $TYPE[$Address] =  $codeType_data;
	if ($pointee_addr == 0x0000) {
		$OPA[$Address][0] = '$0000';
		$OPA[$Address][1] = '$00';
	} else {
		my($usr_lbl) = $LBL[$pointee_addr];
		$pointee_lbl = $usr_lbl if defined($usr_lbl);
		setLabel($pointee_lbl,$pointee_addr);
		$OPA[$Address][0] = $pointee_lbl; 
		$OPA[$Address][1] = sprintf('$%02X',$RPG);
	}
	$REM[$Address] = $rem unless defined($REM[$Address]); 
	$decoded[$Address] = $decoded[$Address+1] = $decoded[$Address+2] = 1;

	return $pointee_addr;
}

#----------------------------------------------------------------------
# Strings
#----------------------------------------------------------------------

sub decode_WPC_STR_char($)
{
	my($c) = BYTE($_[0]);

	return sprintf('%c',$c)																		# printable ASCII
		if ($c >= 32 && $c < 127);
	return sprintf('\\%02X',$c);																# non-printable
}

sub def_WPC_string(@)
{
	my($lbl,$divider_label,$rem) = @_;

	die unless defined($Address);
	return if ($decoded[$Address]);												
	return if defined($OP[$Address]);

	insert_divider($Address,$divider_label);
	$lbl = $` if ($lbl =~ m{\[[0-9A-F]{2}\]$});             					# remove previous RPG if there is one
	setLabel($lbl,$Address);
    $Address+=$len,return unless ($Address>=$MIN_ROM_ADDR && $Address<=$MAX_ROM_ADDR);
    
	$IND[$Address] = $data_indent; $TYPE[$Address] =  $CodeType_data;
	$REM[$Address] = $rem unless defined($REM[$Address]); 
	$OP[$Address] = '.STR';
	my($o);
	$OPA[$Address][0] = "'";
	for ($o=0; BYTE($Address+$o)!=0; $o++) {
		$OPA[$Address][0] .= decode_WPC_STR_char($Address+$o);
		$decoded[$Address+$o] = 1;
	}
	$decoded[$Address+$o] = 1;
	$OPA[$Address][0] .= "'";
	$Address += $o;
}   
		    
sub def_WPC_stringRef($@)														# DOES NOT MAINTAIN RPG
{																			
	my($str_lbl,$divider_title,$rem) = @_;
	die unless defined($Address);

    die unless ($Address>=$MIN_ROM_ADDR && $Address<=$MAX_ROM_ADDR);
    die(sprintf("def_WPC_stringRef(%04X,$str_lbl): addresses below 0x8000 not supported (implementation restriction)"))
    	unless ($Address >= 0x8000);

	my($str_addr) = WORD($Address);
	my($RPG) = BYTE($Address+2);
	select_WPC_RPG($RPG);

	$str_lbl = $` if ($str_lbl =~ m{\[[0-9A-F]{2}\]$});            					# remove previous RPG if there is one
	setLabel("^$str_lbl",$Address);
	
	my($usr_lbl) = $LBL[$str_addr];
	$str_lbl = $usr_lbl if defined($usr_lbl);
	setLabel($str_lbl,$str_addr);

	$OP[$Address] = '.DWB'; $IND[$Address] = $data_indent; $TYPE[$Address] =  $codeType_data;
	#$OPA[$Address][0] = $str_lbl;
	push(@{$OPA[$Address]},label_address(WORD($Address),$str_lbl,1));        # suppress address suffix in label
    push(@{$OPA[$Address]},sprintf('$%02X',BYTE($Address+2)));
	$REM[$Address] = $rem unless defined($REM[$Address]); 
	$decoded[$Address] = $decoded[$Address+1] = $decoded[$Address+2] = 1;

	my($sAddr) = $Address;
	$Address = $str_addr;
	def_WPC_string($str_lbl,$divider_title);
	$Address = $sAddr + 3;
}

#----------------------------------------------------------------------
# Code
#----------------------------------------------------------------------

sub WPC_codeRef($@)
{
	my($code_lbl,$divider_label,$follow_code) = @_;
	my($code_addr) = WORD($Address);

	my($RPG) = BYTE($Address+2);
	my($orpg) = select_WPC_RPG($RPG);

	label_address($code_addr,$code_lbl,1);												# suppress address suffix in label

	$code_lbl = $` if ($code_lbl =~ m{\[[0-9A-F]{2}\]$});             					# remove previous RPG if there is one

	my($usr_lbl) = $LBL[$code_addr];
	$code_lbl = $usr_lbl if defined($usr_lbl);
	setLabel($code_lbl,$code_addr);

	disassemble_asm($code_base_indent,$code_addr,$code_lbl,$divider_label,$follow_code);
#	die if $unclean;

	select_WPC_RPG($orpg);
#	return $Address-3;
}

sub def_WPC_codeRef($@)																	# ROUTINE DOES NOT MAINTAIN RPG
{
	my($code_lbl,$divider_title,$rem) = @_;
	die unless defined($Address);

	setLabel("^$code_lbl",$Address);
    die(sprintf("def_WPC_codeRef: address \$%04X outside valid ROM range (\$%04X-\$%04X)\n",
    	$Address,$MIN_ROM_ADDR,$MAX_ROM_ADDRESS))
			unless ($Address>=$MIN_ROM_ADDR && $Address<=$MAX_ROM_ADDR);

	$OP[$Address] = '.DWB'; $IND[$Address] = $data_indent; $TYPE[$Address] =  $CodeType_data;
#	push(@{$OPA[$Address]},label_address(WORD($Address),$code_lbl,1));        			# suppress address suffix in label
	push(@{$OPA[$Address]},sprintf('$%04X',WORD($Address)));        			# suppress address suffix in label
    push(@{$OPA[$Address]},sprintf('$%02X',BYTE($Address+2)));
	$REM[$Address] = $rem unless defined($REM[$Address]);

	WPC_codeRef($code_lbl,'System Call');    
	$decoded[$Address++] = $decoded[$Address++] = $decoded[$Address++] = 1;

}

#======================================================================
# Utilities
#	- used in .defs files to define game-specific ids
#	- .def file is loaded during init_WPC()
#======================================================================

$Switch[0] = 'SW_UNUSED';

sub defSwitch($$)
{
	my($no,$name) = @_;

	die("defSwitch: invalid switch number $no\n")
		unless ($no>=1 && $no<=64);
	$Switch[$no] = $name;
}

sub defLamp($$)
{
	my($no,$name) = @_;

	die("defLamp: invalid lamp number $no\n")
		unless ($no>0 && $no<=64);
	$Lamp[$no] = $name;
}

sub defGroup($$)
{
	my($no,$name) = @_;

	die("defGroup: invalid group number $no\n")
		unless ($no>0 && $no<=64);
	$BitGroup[$no] = $name;
}

sub defFlag($$)
{
	my($no,$name) = @_;

	die("defFlag: invalid flag number $no\n")
		unless ($no>0 && $no<=0x80);
	$Flag[$no] = $name;
}

if (0) {
sub defSolenoid($$)
{
	my($no,$name) = @_;

	die("defSolenoid: invalid solenoid number $no\n")
		unless ($no>0 && $no<=0x65);
	my($no,$name) = @_;
	$Sol[$no] = $name;
}
}

sub defSolCmd($$)
{
	my($no,$name) = @_;

	die("defSolCmd: invalid solenoid command number $no\n")
		unless ($no>=0 && $no<=0xFF);
	my($no,$name) = @_;
	$Sol[$no] = $name;
}

sub defLabel($$$)
{
	my($pg,$addr,$lbl) = @_;

	select_WPC_RPG($pg);
	define_label($lbl,$addr);
}

sub defAdjustment($$)
{
	my($no,$name) = @_;

	die("defAdjustment: invalid adjustment number $no\n")
		unless ($no>0 && $no<=0xFFFF);
	$Adj[$no] = $name;
}

sub defAudit($$)
{
	my($no,$name) = @_;

	die("defAudit: invalid audit number $no\n")
		unless ($no>=0 && $no<65);
	$Audit[$no] = $name;
}

sub defThread($$)
{
	my($no,$name) = @_;

	die("defThread: invalid thread id\n")
		unless ($no>0 && $no<=0xFFFF);
	$Thread[$no] = $name;
}

sub defDMD($$)
{
	my($no,$name) = @_;

	die("defDMD: invalid DMD animation\n")
		unless ($no>0 && $no<=0xFFFF);
	$DMD[$no] = $name;
}

#----------------------------------------------------------------------
#	Define System Calls
#
# 	$note ARGUMENTS:
#		1: routine does not return
#----------------------------------------------------------------------

sub define_syscall($$@)
{
	my($lbl,$addr,$args,$note) = @_;
	$args = '' unless defined($args);

	define_label($lbl,$addr);
	push(@SYSCALL,$lbl);
	$SC_ADDR[$#SYSCALL] = $addr;
	$SC_ARGS[$#SYSCALL] = $args;
	$SC_NOTE[$#SYSCALL] = $note;
}

1; 																# return true

