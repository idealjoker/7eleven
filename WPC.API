#======================================================================
#                    W P C . A P I 
#                    doc: Thu Jul 18 06:39:55 2024
#                    dlm: Sun Jul 20 14:57:23 2025
#                    (c) 2024 idealjoker@mailbox.org
#                    uE-Info: 68 31 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	Jul 18, 2024: - created
#	Jul 19, 2024: - added info from FreeWPC
#	Jul 20, 2024: - added first own labels
#	Aug 16, 2024: - switch table disassembles error free
#	Aug 17, 2024: - additions
#	Aug 18, 2024: - additions
#	Aug 19, 2024: - additions
#	Aug 25, 2024: - renamed addScore because it was wrnog
#	Aug 26, 2024: - added sycalls
#				  - changed capitalization to be consistent with IVM
#	Aug 27, 2024: - added !exitThread
#				  - added 'T' argument type
#				  - other additions
#	Aug 30, 2024: - added errors
#	Aug 31, 2024: - lamp matrices & other additions
#	Sep     2024: - additions
#	Mar 11, 2025: - renamed many ASIC labels
#				  - added labels for other WPC systems
#	Mar 16, 2026: - added DMDanimation syscall, because it seems to be there
#				  - added "new" (FH) syscalls
#				  - BUG: 2 syscalls (unused in T2) had wrong args 
#	Mar 17, 2025: - moved define_MBD_syscalls() to D711.WPC/disassemble_MBD_system()
#				  - moved syscalls from D711.WPC_DMD
#	Mar 18, 2025: - updated to work both with T2 (DMD) and FH (Alphanumeric)
#	Mar 19, 2025: - continued update
#	Mar 25, 2025: - BUG: duplicated addBonus[A] in WPC(DMD)
#	Apr  6, 2025: - BUG: a couple of Alpha definitions clashed with obj migration
#	Jun  1, 2025: - BUG: syscall_82CB has argument
#	Jun  2, 2025: - BUG: Error aliases had illegal characters
#	Jun  8, 2025: - adapted to %System_Option
#				  - added VERSION_OFFSETS
#	Jun  9, 2025: - another ERR alias with illegal character
#	Jun 10, 2025: - added exitThread
#	Jun 12, 2025: - added syscall 3B:BYU=MBD_dataRefs[A] to enable disassembly of
#					the switch table
#	Jun 13, 2025: - added __CHECKSUM labels
#				  - BUG: _FINDTHREAD_ID+1 had only one leading _
#	Jun 19, 2025: - added Hooks & labels
#				  - changed some label names
#	Jun 20, 2025: - updated versions to "official" names (DMD -> 89)
#	Jun 23, 2025: - added 3 new system calls for T2 FX
#				  - added 8 new syscall for FH FX
#	Jun 24, 2025: - added a bunch of new core syscalls
#				  - BUG: another error label with special char
#	Jun 25, 2025: - added __SOLCMD_TABLE_ADDR
#	Jun 29, 2025: - added syscalls
#				  - BUG: Panic was marked as non-returning
#				  - BUG: one syscall had wrong offset for FH
#	Jul  1, 2025: - defined 2 new T2 syscalls
#	Jul  3, 2025: - adapted to @CHECKSUM_INFO
#	Jul  5, 2025: - added T2 syscall
#	Jul  6, 2025: - added FH syscalls
#				  - renamed some syscalls
#	Jul  7, 2025: - added FX# syscall arg type
#	Jul  7, 2025: - added Sound# argument type
#				  - added/improved scoring syscalls
#				  - added sleep syscalls
#	Jul  8, 2025: - added bitgroup syscall
#	Jul 20, 2025: - added stuff
# END OF HISTORY

#======================================================================
# System Selection
#======================================================================

my($WPCV) = $WMS_System;													# WPC version in D711 notation

if (%System_Option) {
	if ($System_Option{WPC_Version} =~ m{^[Aa][Ll]}) {						# alphanumeric
		$WPCV = "WPC(alpha)";
	} elsif ($System_Option{WPC_Version} =~ m{^8}) { 						# WPC89
		$WPCV = "WPC(89)";
	} else {
		die("WPC.API: WPC_Version <$System_Option{'WPC_Version'}> not yet implemented\n");
    }
}
	
my($VO);																	# byte offset from 89 nominal address

sub VERSION_OFFSETS($$) 
{
	my($alpha,$DMD) = @_;

	if ($WPCV eq 'WPC(alpha)') {										# D711.pm
		$VO = $alpha;
	} elsif ($WPCV eq 'WPC(89)') {
		$VO = $DMD;
	} else {
		die("WPC.API: $WPCV not yet implemented\n");
	}
}

#----------------------------------------------------------------------
# RAM Memory Map
#----------------------------------------------------------------------

define_label('__FIRQ_SPRINGBOARD_1',				0x08);
define_label('__FIRQ_SPRINGBOARD_2',				0x0A);
define_label('_ROM_BANK_SHADOW',					0x11);		# Scott
define_label('__SPRINGBOARD',						0x12);

define_label('=UNKNOWN_SWITCH_BUFFER',				0x1F);
define_label('=SWITCHES',							0x27);

define_label('_CURRENT_TIC??',						0x50);
define_label('_THREAD_EXEC_TIMESTAMP??',			0x51);
define_label('_PREVIOUS_THREAD_EXEC_TIMESTAMP??',	0x52);
define_label('^CURRENT_THREAD_DATA',				0x53);
define_label('_UNKNOWN_THREADLIST_CONDITION',		0x57);
define_label('__SLEEP_TIME',						0x5B);
define_label('__SLEEP_TIME+1',						0x5C);
define_label('__FINDTHREAD_ID',						0x5D);
define_label('__FINDTHREAD_ID+1',					0x5E);
define_label('__FINDTHREAD_MASK',					0x5F);

define_label('_GI_POWERSAVER_TIMER',				0x6D);		# minutes

define_label('__SOLCMD_TABLE_ADDR',					0x7C);	
define_label('__SOLCMD_TABLE_ADDR+1',				0x7D);	

define_label('_BALLTILTED??',						0x86);	
define_label('_GAMEOVER??',							0x87);	
define_label('_BALLTROUGH_LOCKOUT',					0x88);	

define_label('_ISR_MATRIXBYTE',						0x9C);
define_label('_ISR_MATRIXBYTE_TMP',					0x9D);
define_label('_ISR_TMP_A',							0x9E);
define_label('__ISR_TMP_X',							0x9F);

define_label('=LAMP_MATRIX_00_LOGICAL',				0x02E0);		# Lamp and Bit Buffers
define_label('=LAMP_MATRIX_08_PRIMARY',				0x02E8);		
define_label('=LAMP_MATRIX_10_MASK',				0x02F0);		
define_label('=LAMP_MATRIX_18_DATA',				0x02F8);		
define_label('=LAMP_MATRIX_20_MASK',				0x0300);		
define_label('=LAMP_MATRIX_28_DATA',				0x0308);		
define_label('=LAMP_MATRIX_30_MASK',				0x0310);		
define_label('=LAMP_MATRIX_38_DATA',				0x0318);		
define_label('=BLINK_MATRIX',						0x0320);
define_label('=FLAGS',								0x0328);
define_label('=FLAGS_HIGH',							0x0330);

VERSION_OFFSETS(-1,0);

define_label('=UNKNOWN_THREAD_DATA_1',				0x0366+$VO);		
define_label('^LOW_PRIORITY_THREADS',				0x036F+$VO);		
define_label('=END_OF_THREADLIST??',				0x0371+$VO);		
define_label('=STATUS_AREA_POINTER',				0x0380+$VO);	# Scott
define_label('=GI_BRIGHTNESS',						0x03D6+$VO); 	# 5 bytes

define_label('_PLAYER_UP',							0x040F+$VO);
define_label('_BALL_IN_PLAY',						0x0410+$VO);
define_label('_EXTRABALLS_PENDING',					0x0411+$VO);
define_label('_SCORE_MULTIPLIER',					0x0441+$VO);
define_label('_BACKGROUND_MUSIC_PLAYING',			0x0445+$VO);
unless ($WPCV eq 'WPC(alpha)') {
	define_label('^DMD_PLAYING_ANIMATION_DATA',		0x0481);
	define_label('_DMD_ANIMATION_PLAYING',			0x0483);
	define_label('_LAST_DMD_ANIMATION_PLAYED??',	0x0487);
}
define_label('=PLAYER_MEM_DATA',					0x04AC+$VO);
define_label('_SIZE_PLAYER_MEM_DATA',				0x04AE+$VO);
define_label('_CRON_MINUTE_COUNTER_1',				0x04B4+$VO);
define_label('_CRON_MINUTE_COUNTER_2',				0x04B5+$VO);
define_label('_CRON_MINUTE_LASTEXEC',				0x04B6+$VO);
define_label('_BALLSEARCH_SUSPEND_TIMER',			0x04C7+$VO);
define_label('_TILTWARNINGS_LEFT',					0x04D4+$VO);

#define_label('_MIN_BALLS_NEEDED_IN_TROUGH_4DRAIN',	0x0CC9+$VO);	# 59E
#define_label('_LOCKED_BALLS_DEFICIT',				0x0CCA+$VO);
#define_label('_NUM_BALLS_LOCKED',					0x0CCB+$VO);
#define_label('_BALLS_IN_TROUGH',					0x0CCF+$VO);
#define_label('_BALLS_INSTALLED_IN_GAME',			0x0CD0+$VO);

define_label('=SCOREBUF_p1',						0x1730);
define_label('=SCOREBUF_p2',						0x1736);
define_label('=SCOREBUF_p3',						0x173C);
define_label('=SCOREBUF_p4',						0x1742);

define_label('_RND_1',								0x1790);
define_label('_RND_2',								0x1791);
define_label('_RND_3',								0x1792);
define_label('_DIAGNOSTICS_MODE',					0x1793);

VERSION_OFFSETS(-6,0);
##define_label('_BALLS_ACCOUNTED_FOR',				0x1ED0+$VO);
##define_label('_BALLS_ACCOUNTED_FOR_COMPL',		0x1ED1+$VO);

#----------------------------------------------------------------------
# ASIC
# 	- https://bcd.github.io/freewpc/The-WPC-Hardware.html
#	- own analysis
#----------------------------------------------------------------------

define_label('__BITSHIFTER_ADDR',					0x3FF4);	# 15-0: R/W: The base address for the bit shifter. Writing to this address initializes the shifter. Reading from this address after a shift command returns the shifted address.
define_label('_BITSHIFTER_BIT',						0x3FF6);	# 7-0: W: Sets the bit position for a shift command. 7-0: R: Returns the output of the last shift command as a bitmask.
define_label('_BITSHIFTER_BIT2',					0x3FF7);	# 7-0: R/W:

define_label('_LAMP_COLUMN_STROBE',					0x3FE5);	# 7-0: W: Lamp matrix column strobe At most one bit in this register should be set. If all are clear, then no controlled lamps are enabled.
define_label('_LAMP_ROW_OUTPUT',					0x3FE4);	# 7-0: W: Lamp matrix row output

define_label('_RELAYS_TRIAC',						0x3FE6);	# 7: W: Flipper enable relay 5: W: Coin door enable relay 4-0: W: General illumination enables

if (isMember($WPCV,'WPC(alpha)','WPC(89)','WPC(fliptronic)','WPC(DCS)')) {	# Pre-security
	define_label('_SW_COLUMN_STROBE',				0x3FEA);	# W: exactly one bit must be set
	define_label('_SW_ROW_INPUT',					0x3FE9); 	# Pre-security;	7-0: R: Readings for the currently selected switch column. Bit 0 corresponds to row 1, bit 1 to row 2, and so on. A '1' indicates active voltage level. For a mechanical switch, this means the switch is closed. For an optical switch, this means the switch is open.
} else {
	define_label('_PIC_CMD',						0x3FEA); 	# WPC-S; 7-0: W:  writing to this register sends a command to the PIC chip and does not directly control the strobe line.
	define_label('_PIC_ROW_INPUT',					0x3FE9); 	# WPC-S
}

define_label('_SOL_HIGHPOWER_ENABLE',				0x3FE1);	# 7-0: W: Enables for solenoids 1-8
define_label('_SOL_LOWPOWER_ENABLE',				0x3FE3);	# 7-0: W: Enables for solenoids 9-16
define_label('_SOL_FLASHERS_ENABLE',				0x3FE2);	# 7-0: W: Enables for solenoids 17-24
define_label('_SOL_GENERAL_ENABLE',	       			0x3FE0);	# 7-0: W: Enables for solenoids 25-29

define_label('_SOUNDCARD_DATA',						0x3FDC);	# 7-0: R/W: Send/receive a byte of data to/from the sound board.
define_label('_SOUNDCARD_STATUS',					0x3FDD);	# 7: R: WPC sound board read ready 0: R: DCS sound board read ready

if ($WPCV eq 'WPC(alpha)') {						# Display
	define_label('_ALPHANUMERIC_POS',				0x3FEB); 	# ALPHAnumeric display
	define_label('_ALPHANUMERIC_ROW1',				0x3FEC); 	
	define_label('_ALPHANUMERIC_ROW2',				0x3FEE); 	
} else {
	define_label('_DMD_ACTIVE_FRAME',				0x3FBF);	# Digital Matrix Display
	define_label('_DMD_FRAMESELECT_3800',			0x3FBE);	# W
	define_label('_DMD_FRAMESELECT_3A00',			0x3FBC);	# W
	define_label('=DMD_FRAMEBUF_3800',				0x3800);
	define_label('=DMD_FRAMEBUF_3A00',				0x3A00);
	define_label('_DMD_SCANLINE',					0x3FBD);	# W: Request an FIRQ after a particular scanline is drawn; R: The last scanline that was drawn
	if ($WPCV eq 'WPC(95)') { 					
		define_label('_DMD_FRAMESELECT_3200',		0x3FB8);	# W
		define_label('_DMD_FRAMESELECT_3000',		0x3FB9);	# W
		define_label('_DMD_FRAMESELECT_3600',		0x3FBA);	# W
		define_label('_DMD_FRAMESELECT_3400',		0x3FBB);	# W
		define_label('=DMD_FRAMEBUF_3000',			0x3000);    
		define_label('=DMD_FRAMEBUF_3200',			0x3200);
		define_label('=DMD_FRAMEBUF_3400',			0x3400);
		define_label('=DMD_FRAMEBUF_3600',			0x3600);
	}
	define_label('_EXTBOARD_1',						0x3FEB); 	# general IO (machine specific)
	define_label('_EXTBOARD_2',						0x3FEC); 	
	define_label('_EXTBOARD_3',						0x3FED); 	
}

if (isMember($WPCV,'WPC(fliptronic)','WPC(DCS)','WPC(security)','WPC(95)')) {
	define_label('_FLIPTRONIC',						0x3FD4);	
	define_label('_FLIPTRONIC_UNUSED',				0x3FD5);	# Not used.
	if ($WPCV eq 'WPC(95)') {
		define_label('_FLIPPER_COIL_OUTPUT',		0x3FEE);    
		define_label('_FLIPPER_SWITCH_INPUT',		0x3FEF);    
	}
}

define_label('_TICKET_DISPENSER',					0x3FC6);	# Ticket Dispenser

define_label('_ASIC_IRQ_CTRL', 						0x3FFF);	
define_label('_ASIC_PERIPH_TMR_FIRQ_CLEAR',			0x3FF8);	# clear or disable?

define_label('_ASIC_CLOCK_HOURS',					0x3FFA);	# Time-of-day clock; R/W 
define_label('_ASIC_CLOCK_MINUTES',					0x3FFB);	

define_label('_ASIC_ROM_LOCK',						0x3FF9);	# Not used
define_label('_ASIC_ROM_PAGE',						0x3FFC);	# R/W

define_label('_ASIC_RAM_LOCK',						0x3FFD);	
define_label('_ASIC_RAM_LOCKSIZE',					0x3FFE);	
if ($WPCV eq 'WPC(95)') {
	define_label('_ASIC_RAM_PAGE',					0x3FF3); 	# W
}

define_label('_MPU_JUMPERS',						0x3FE7);	# 7-0: R: Jumper/DIP switch inputs
define_label('_CABINET_COIN_SWITCHES',				0x3FE8);	# 7: R: Fourth coin switch 6: R: Right coin switch 5: R: Center coin switch 4: R: Left coin switch 3: R: Enter (Begin Test) button 2: R: Up button 1: R: Down button 0: R: Escape (Service Credit) button

define_label('_DIAGNOSTIC_LED',						0x3FF2);	# 7: R/W : The state of the diagnostic LED. >0=Off >1=On

define_label('_PARALLEL_STATUS_PORT',				0x3FC0);	# Parallel Interface
define_label('_PARALLEL_DATA_PORT',					0x3FC1);	
define_label('_PARALLEL_STROBE_PORT',				0x3FC2);	

define_label('_SERIAL_CTRL',						0x3E66);	# Serial Interface
define_label('_SERIAL_DATA',						0x3E67);	
define_label('_SERIAL_DATA_OUTPUT',					0x3FC3);	
define_label('_SERIAL_CTRL_OUTPUT',					0x3FC4);	
define_label('_SERIAL_BAUD_SELECT',					0x3FC5);	

define_label('DEBUGGER_DATA',						0x3D60);	# Hardware Debugger
define_label('DEBUGGER_CTRL',						0x3D61);

define_label('CHECKSUM_INFO',						0xFFEC);	# Checksum Control
define_label('CHECKSUM_INFO+1',						0xFFED);	
define_label('CHECKSUM_INFO+2',						0xFFEE);
define_label('ROM_VERSION',							0xFFEF);

#----------------------------------------------------------------------
# System Calls
#	- in-line arguments:
#		R	code reference (code pointer & PG)
#		W	untyped word 
#		T	thread word
#		U	audit word
#		P	data pointer (address word)
#		C	code pointer (address word)
#		B	untyped byte
#		S	switch byte
#		O	solenoid byte
#		L	lamp byte
#		E	error byte
#		G	bitgroup byte
#		F	flag byte
#		A	adjustment byte
#		D	DMD animation byte
#	- NOTES
#		1	JSR system call that does not return
#		2	JMP system call
#		3	system call can only be called from PG#3B
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# Group 1: 
#	- identical for alpha and DMD
#----------------------------------------------------------------------

define_syscall('Panic',								0x8298,'E');			# NOTE 1: does not return
define_syscall('Error',								0x82B6,'E');
define_syscall('syscall_82CB',						0x82CB,'E');
define_syscall('addToAudit??',						0x82E2,'B');
define_syscall('Y=adjustment',						0x82F2,'A');
define_syscall('A=adjustment',						0x82FF,'A');
define_syscall('B=adjustment',						0x830C,'A');
define_syscall('switchClosed?',						0x8319,'S');
define_syscall('syscall_8329',						0x8329,'S');
define_syscall('switchBroken??',					0x8339,'S');
define_syscall('sleep',								0x8346,'B');
define_syscall('memCopy_XY',						0x835E,'B');
define_syscall('memClearY',							0x836B,'B');
define_syscall('memSetBY',							0x8378,'B');
define_syscall('solCmd',							0x8385,'O');
define_syscall('pulseFlasher',						0x8392,'B');
define_syscall('solCmd_wait',						0x839F,'B');
define_syscall('syscall_83B0',						0x83B0,'B');			# FH
define_syscall('syscall_83C1',						0x83C1,'B');
define_syscall('syscall_83CE',						0x83CE,'B');
define_syscall('setGIbrightness80',					0x83DB,'B');
define_syscall('setGIbrightness81',					0x83E8,'B');
define_syscall('syscall_83F5',						0x83F5,'B');
define_syscall('syscall_8402',						0x8402,'L');
define_syscall('syscall_840F',						0x840F,'L');
define_syscall('lampOn',							0x841C,'L');
define_syscall('lampOff',							0x842B,'L');
define_syscall('lampToggle',						0x843A,'L');
define_syscall('lampOn?',							0x8449,'L');
define_syscall('lampOn_blinkOff',					0x8458,'L');			# FH
define_syscall('lampOff_blinkOff',					0x846C,'L');			# FH
define_syscall('setFlag',							0x8480,'F');
define_syscall('clearFlag',							0x848F,'F');
define_syscall('toggleFlag',						0x849E,'F');
define_syscall('flagSet?',							0x84AD,'F');
define_syscall('blinkLamp',							0x84BC,'L');			# FH
define_syscall('unblinkLamp',						0x84CB,'L');			# gap
define_syscall('toggleBlink',						0x84DA,'L');			# FH
define_syscall('lampBlinking?',						0x84E9,'L');			# FH
define_syscall('syscall_84F8',						0x84F8,'B');
define_syscall('syscall_8505',						0x8505,'B');
define_syscall('syscall_8512',						0x8512,'B');
define_syscall('addScore',							0x851F,'B');
define_syscall('syscall_852C',						0x852C,'B');
define_syscall('syscall_8539',						0x8539,'B');
define_syscall('playSound',							0x8546,'N');
define_syscall('DMDanimation',						0x8553,'D');
define_syscall('syscall_8562',						0x8562,'B');
define_syscall('syscall_8572',						0x8572,'B');
define_syscall('syscall_8582',						0x8582,'B');
define_syscall('syscall_8592',						0x8592,'B');
define_syscall('lampFX',							0x85B2,'X');
define_syscall('syscall_85A2',						0x85A2,'B');
define_syscall('syscall_85C1',						0x85C1,'B');			# FH
define_syscall('syscall_85D1',						0x85D1,'B');			# FH
define_syscall('syscall_85E1',						0x85E1,'B');
define_syscall('syscall_85F1',						0x85F1,'B');
define_syscall('syscall_8601',						0x8601,'B');
define_syscall('syscall_8611',						0x8611,'B');
define_syscall('longJSR_indirect',					0x8621,'P');
define_syscall('longJSR_indirect[X]',				0x862B);
define_syscall('longJSR_indirect[AX]',				0x8631);
define_syscall('A=AD_value=?',						0x865B,'AB');
define_syscall('longSleep',							0x8679,'W');
define_syscall('threadRunning?',					0x8690,'T');
define_syscall('killThreads',						0x869E,'T');
define_syscall('setThreadId',						0x86AC,'T');
define_syscall('becomeThread_ifNotRunning',			0x86BA,'T');
define_syscall('becomeOnlyThread',					0x86D0,'T');
define_syscall('memSet[Y]',							0x86E1,'BB');			# gap
define_syscall('syscall_86EE',						0x86EE,'W');			# FH
define_syscall('syscall_86FB',						0x86FB,'W');			# FH
define_syscall('syscall_8708',						0x8708,'LB');
define_syscall('setBit',							0x8715,'LB');			# <bit number> <buffer offset>; only used with blink offset $40
define_syscall('clearBit',							0x8722,'LB');
define_syscall('toggleBit',							0x872F,'LB');			# FH
define_syscall('bitSet?',							0x873C,'LB');
define_syscall('bitop_8749',						0x8749,'LB');
define_syscall('bitop_8756',						0x8756,'LB');
define_syscall('bitop_8763',						0x8763,'LB');
define_syscall('bitop_8770',						0x8770,'LB');
define_syscall('bitop_877D',						0x877D,'LB');
define_syscall('bitop_878A',						0x878A,'LB');
define_syscall('bitop_8797',						0x8797,'LB');
define_syscall('bitop_87A4',						0x87A4,'LB');
define_syscall('setAll',							0x87B1,'GB');
define_syscall('clearAll',							0x87BE,'GB');
define_syscall('allSet?',							0x87CB,'GB');
define_syscall('allClear?',							0x87D8,'GB');
define_syscall('syscall_87E5',						0x87E5,'W');
define_syscall('syscall_87F2',						0x87F2,'W');
define_syscall('syscall_87FF',						0x87FF,'W');
define_syscall('syscall_880C',						0x880C,'W');
define_syscall('syscall_8819',						0x8819,'W');
define_syscall('syscall_8826',						0x8826,'W');
define_syscall('syscall_8833',						0x8833,'W');
define_syscall('syscall_8840',						0x8840,'W');
define_syscall('syscall_884D',						0x884D,'W');
define_syscall('syscall_885D',						0x885D,'W');
define_syscall('syscall_886A',						0x886A,'W');
define_syscall('syscall_8877',						0x8877,'W');
define_syscall('syscall_8885',						0x8885,'W');
define_syscall('syscall_8895',						0x8895,'W');
define_syscall('syscall_88A5',						0x88A5,'W');
define_syscall('syscall_88B5',						0x88B5,'W');
define_syscall('syscall_88C5',						0x88C5,'W');
define_syscall('updateAudit',						0x88D5,'U');
define_syscall('syscall_88E5',						0x88E5,'W');
define_syscall('longJSR',							0x88F5,'R');
define_syscall('longJMP',							0x892F,'R',1);			# NOTE 1: does not return
define_syscall('unknown_spawnThread_1',				0x8948,'R');
define_syscall('unknown_spawnThread_2',				0x8983,'R');
define_syscall('memCopy_to_X',						0x89BE,'PB');
define_syscall('memCopy_from_Y',					0x89CE,'PB');
define_syscall('syscall_89DD',						0x89DD,'WB');
define_syscall('syscall_89F8',						0x89F8,'WB');
define_syscall('syscall_8A2B',						0x8A2B,'WB');
define_syscall('syscall_8A3F',						0x8A3F,'WB');
define_syscall('syscall_8A4E',						0x8A4E,'WB');
define_syscall('syscall_8A60',						0x8A60,'WB');
define_syscall('syscall_8A72',						0x8A72,'WB');
define_syscall('killThreads_withMask',				0x8A9A,'TW');
define_syscall('findThread?',						0x8AAA,'TW');
define_syscall('memClear',							0x8ABA,'PW');
define_syscall('memSet',							0x8ACA,'PBB');
define_syscall('syscall_8ADA',						0x8ADA,'WW');
define_syscall('syscall_8AF5',						0x8AF5,'WW');
define_syscall('syscall_8B07',						0x8B07,'WW');
define_syscall('syscall_8B19',						0x8B19,'WW');
define_syscall('syscall_8B2B',						0x8B2B,'WW');
define_syscall('spawnLowPriorityThread',			0x8B3D,'TR');
define_syscall('spawnHighPriorityThread',			0x8B5A,'TR');
define_syscall('killSpawnLowPriorityThread',		0x8B77,'TR');			# kill threads first, then spawn new one
define_syscall('killSpawnHighPriorityThread',		0x8B9D,'TR');
define_syscall('spawnLowPriorityThreadIfNeeded',	0x8BC3,'TR');			# don't spaawn if thread id already in use
define_syscall('spawnHighPriorityThreadIfNeeded',	0x8BF7,'TR');
define_syscall('memCopy',							0x8C2B,'WWB');
define_syscall('syscall_8C3D',						0x8C3D,'WWW');
define_syscall('syscall_8C60',						0x8C60,'WWW');
define_syscall('syscall_8C72',						0x8C72,'WW');
define_syscall('syscall_8EE2',						0x8EE2);
define_syscall('syscall_8EF6',						0x8EF6);
define_syscall('syscall_8EFD',						0x8EFD);

#----------------------------------------------------------------------
# Group 2: 
#	- constant offset between alpha and DMD
#	- address labels of unknown syscalls refer to DMD location
#----------------------------------------------------------------------

VERSION_OFFSETS(-205,0);

define_syscall('setBank=3D',							0x90B4+$VO);  # 0x8FE7 in FH
define_syscall('setBank[B]',							0x90BC+$VO);
define_syscall('longJSR[BX]',							0x90D1+$VO);
define_syscall('A=[X+B]==1?',							0x90E7+$VO);
define_syscall('A=[XB]==1?',							0x90EC+$VO);
define_syscall('BX=loadRef[X]',							0x90C5+$VO);
define_syscall('Y=[X++B]==1?',							0x910E+$VO);
define_syscall('Y=[XB]==1?',							0x9113+$VO);    
define_syscall('Y=indexed[X]==1?',						0x9117+$VO);
define_syscall('memCopy[ABXY]',							0x9139+$VO);
define_syscall('^memCopy[AXY]',							0x913D+$VO);
define_syscall('memCopy[ABXY]_otherbank',				0x9141+$VO);
define_syscall('lockRAM[B]',							0x9207+$VO);
define_syscall('unlockRAM',								0x9223+$VO);
define_syscall('lockRAM',								0x922C+$VO);
define_syscall('CS=badChecksum[XY]',					0x928A+$VO);
define_syscall('Y=adjustmentA??==1',					0x92D4+$VO);
define_syscall('A=adjustmentA??==1',					0x92DE+$VO);
define_syscall('D=adjustmentA??==1',					0x92EC+$VO);
define_syscall('Y=adjustmentA??',						0x92F8+$VO);
define_syscall('switch[B]closed?',						0x93E4+$VO);
define_syscall('Bitshifter_testUnknownSwitchState[B]',	0x93ED+$VO);
define_syscall('Bitshifter_testSwitch[BX]',				0x93F6+$VO);
define_syscall('start_thread_execution',				0x975F+$VO);

VERSION_OFFSETS(-246,0);
define_syscall('X=^spawnThread_2_myId??_codeRef[BX]', 	0x982E+$VO);	# 9738 -246
define_syscall('X=^spawnThread_1_myId??_codeRef[BX]', 	0x983D+$VO);

VERSION_OFFSETS(-270,0);
define_syscall('sys_sleep[A]',							0x9894+$VO,'',2);	# 9894
define_syscall('sys_sleep[B]',							0x9898+$VO,'',2);
define_label('.sys_sleep_common',						0x989C+$VO,'',2);
define_syscall('sys_sleep',								0x989E+$VO,'',2);
define_syscall('exitThread',							0x99A2+$VO,'',2);

VERSION_OFFSETS(-314,0);
define_syscall('killAllThreads_Y',						0x9AEB+$VO);	# 99B1 
define_syscall('killThreads_DY',						0x9AFD+$VO);
define_syscall('killThreads_Y',							0x9AF4+$VO);
define_syscall('killThread',							0x9B24+$VO);	# 9AB7
define_syscall('findThread[Y]?',						0x9B34+$VO);
define_syscall('findThread[DY]?',						0x9B3D+$VO);
define_syscall('find_thread_in_list',					0x9B55+$VO);	
define_syscall('setThreadId[Y]',						0x9B83+$VO);
define_syscall('Y=threadId',							0x9BC5+$VO);
define_syscall('X=^threadData',							0x9BFE+$VO);
##define_syscall('zeroCrossIRQ_clear',					0x9D00+$VO);	# clashes when using object file migration

VERSION_OFFSETS(-332,0);
define_syscall('syscall_9D96',							0x9D96+$VO);	# 9C4A
define_syscall('syscall_9E3B',							0x9E3B+$VO);
define_syscall('setBit[AB]',							0x9E7F+$VO);
define_syscall('clearBit[AB]',							0x9E92+$VO);
define_syscall('twiddle_BitShifter_input',				0x9EA5+$VO);
define_syscall('twiddle_BitShifter_for_flags',			0x9EAF+$VO);
define_syscall('twiddle_BitShifter_success',			0x9EBF+$VO);
define_syscall('twiddle_BitShifter_failure',			0x9EC3+$VO);
define_syscall('toggleBit[AB]',							0x9ECA+$VO);
define_syscall('bit[AB]isSet?',							0x9EDD+$VO);
define_syscall('sys_setBit[AB]',						0x9EF1+$VO);
define_syscall('sys_toggleBit[AB]',						0x9F11+$VO);
define_syscall('sys_clearBit[AB]',						0x9F18+$VO);
define_syscall('BitShifter_setBit[AB]',					0x9F47+$VO);
define_syscall('BitShifter_clearBit[AB]',				0x9F73+$VO);
define_syscall('BitShifter_bit[AB]isSet?',				0x9FA0+$VO);

VERSION_OFFSETS(-332,0);
define_syscall('lamp[A]on',								0xA03A+$VO);	# 9F6D
define_syscall('lamp[A]off',							0xA043+$VO);	
define_syscall('toggleLamp[A]',							0xA04C+$VO);	
define_syscall('lamp[A]on_blinkOff',					0xA055+$VO);
define_syscall('lamp[A]off_blinkOff',					0xA063+$VO);
define_syscall('setFlag[A]',							0xA071+$VO);
define_syscall('clearFlag[A]',							0xA07A+$VO);
define_syscall('toggleFlag[A]',							0xA083+$VO);
define_syscall('flag[A]isSet?',							0xA08C+$VO);
define_syscall('blinklamp[A]',							0xA095+$VO);
define_syscall('unblinklamp[A]',						0xA09E+$VO);
define_syscall('toggle_blinklamp[A]',					0xA0A7+$VO);
define_syscall('lamp[A]blinking?',						0xA0B0+$VO);
define_syscall('lamp[A]on?',							0xA0B9+$VO);

VERSION_OFFSETS(-145,0);
define_syscall('syscall_A3D7',							0xA3D7+$VO);
define_syscall('memCopy[AXY]',							0xA6B9+$VO);	# A628
define_syscall('memClear[AY]',							0xA6C4+$VO);
define_syscall('memClear[XY]',							0xA6D1+$VO);
define_syscall('memSet[ABY]',							0xA6E3+$VO);
define_syscall('addEntropy',							0xA6EC+$VO);
define_syscall('CS=randomBit',							0xA70B+$VO);
define_syscall('A=100xGetRandom<[A]?',					0xA713+$VO);
define_syscall('A=getRandom', 							0xA725+$VO);
define_syscall('A=getRandom[A]',          				0xA75B+$VO);
define_syscall('solCmd[A]_wait',						0xA84D+$VO);
define_syscall('solCmd[A]', 							0xA895+$VO);
define_syscall('pulseFlasher[A]',						0xA9EC+$VO);	# A95B

define_syscall('setGIbrightness80[A]',					0xAB43+$VO);
define_syscall('setGIbrightness81[A]',					0xAB4B+$VO);
define_syscall('setGIbrightness[AB]',     				0xAB53+$VO);
define_syscall('sys_setGIbrightness[AB]',				0xAB56+$VO);

define_syscall('X=^tableElt[AX]',						0xAC5B+$VO);
define_syscall('X=^tableElt[ABX]',						0xAC5E+$VO);
define_syscall('X=^tableElt[AXY]',						0xAC89+$VO);

define_syscall('bitgroup[D]_setAll',					0xADF9+$VO);
define_syscall('bitgroup[D]_clearAll',					0xAE09+$VO);
define_syscall('bitgroup[D]_allSet?',					0xAE19+$VO);
define_syscall('bitgroup[D]_allOff?',					0xAE29+$VO);
define_syscall('bitgroupOp_bitSet?',					0xAE39+$VO);
define_syscall('bitgroupOp_bitClear?',					0xAE46+$VO);
define_syscall('bitgroupOp[ABXY]',						0xAE53+$VO);

VERSION_OFFSETS(-163,0);
define_syscall('sys_initGameStartVariables',			0xB170+$VO);	# B0CD -163
define_syscall('A=playerUp',							0xB1AB+$VO);	# B11E?
define_syscall('setPlayerUp[A]',						0xB1BD+$VO);	
define_syscall('A=ballInPlay_lastBall?',				0xB1D1+$VO);	# B12E
define_syscall('serveBall_and_exit',					0xB213+$VO);	# B170
define_syscall('serveBall',								0xB218+$VO);	# B175
define_syscall('ballServe_displayFX',					0xB224+$VO);
define_syscall('nextBall_success?',						0xB24E+$VO);
define_syscall('qualifyPlayfield',						0xB2C7+$VO);	# B224
define_syscall('playfieldQualified?',					0xB2DF+$VO);

VERSION_OFFSETS(-213,0);
define_syscall('unknown_addScore[ABXU]',				0xBA53+$VO);
define_syscall('.X=^score[A]tableEntry_Y=4',			0xBA8B+$VO);
define_syscall('addScore[A]',							0xBA99+$VO);
define_syscall('addScore[A]_withLocalMultiplier[B]',	0xBAA4+$VO);
define_syscall('addScore[A]_with1xLocalMultiplier',		0xBABB+$VO);
define_syscall('addScore[AB]]',							0xBAC5+$VO);
define_syscall('addScore[ABX]',							0xBACD+$VO);
define_label('.scoreMultiplier_error',					0xBADA+$VO);
define_label('.addScore_continue',						0xBAE0+$VO);
define_label('.addScore_done',							0xBAE8+$VO);
define_syscall('addScore[ABXY]',						0xBAEA+$VO);	# BA15 -213
define_syscall('playSound[Y]',							0xBDE8+$VO);
define_syscall('playSound[A]',							0xBDFB+$VO);
define_syscall('abortBackgroundMusic??',				0xC095+$VO);
define_syscall('ensureBackgroundMusic[A]',				0xC0BC+$VO);
define_syscall('setBackgroundMusic[A]',					0xC0CA+$VO);
define_syscall('A=backgroundMusic',						0xC0D7+$VO);
define_syscall('changeBackgroundMusic[A]',  			0xC0DB+$VO);
define_syscall('soundCardCmd[AB]',						0xC0ED+$VO);

VERSION_OFFSETS(-273,0);
define_syscall('endFX',									0xC65F+$VO);	# C5CF -273
define_syscall('abortDisplayFX[A]??',					0xC6E0+$VO);	# C5CF -273
define_syscall('displayFX[A]',							0xC791+$VO);

#if ($WPCV eq 'WPC(alpha)') {							# clashes with obj-based migration
#	$VO = -248;
#} elsif ($WPCV eq 'WPC(89)') {
#	$VO = 0;
#} else {
#	die("WPC.API: $WPCV not yet implemented\n");
#}
#define_syscall('A=displayFX',							0xCA90+$VO);	# C998

VERSION_OFFSETS(-329,0);
define_syscall('resetBallSearchTimer[A]',				0xCF4B+$VO);	# CE02 -329

VERSION_OFFSETS(-2549,0);
define_syscall('rotLeft',								0xFDA2+$VO,'GB');
define_syscall('fill', 									0xFDB4+$VO,'GB');
define_syscall('unknownBitgroupOp1',					0xFDC6+$VO,'GB');
define_syscall('unknownBitgroupOp2',					0xFDD8+$VO,'GB');
define_syscall('unknownBitgroupOp3',					0xFDEA+$VO,'GB');
define_syscall('MBD_callHandler[A]',               		0xFDFC+$VO,'B',3);          # NOTE 3: must only be called from PG#3B
define_syscall('switchActive[B]?',						0xFE0D+$VO);

#----------------------------------------------------------------------
# Group 3:
#	- different syscalls in different subversions
#----------------------------------------------------------------------

if ($WPCV eq 'WPC(alpha)') {
 define_syscall('A=ballInPlay',			       			0xB327);
 define_syscall('ISR_lampMatrix_MUX',	       			0xD4E5);
 define_syscall('syscall_DD3B',							0xDD3B,'B');			# FH
 define_syscall('syscall_F365',							0xF365,'B');			# FH
 define_syscall('syscall_F377',							0xF377,'B');			# FH
 define_syscall('syscall_F456',							0xF456,'WW');			# FH
 define_syscall('syscall_F47E',							0xF47E,'WW');			# FH
 define_syscall('syscall_F492',							0xF492,'WW');			# FH
 define_syscall('syscall_F4D9',							0xF4D9,'WWW');			# FH
 define_syscall('syscall_F4F0',							0xF4F0,'WWW');			# FH
 define_syscall('syscall_F389',							0xF389,'W');			# FH
}

if ($WPCV eq 'WPC(89)') {
 define_syscall('award_Extraball',						0xB383);
 define_syscall('A=EBpending', 			      			0xB3CA);
 define_syscall('syscall_B8BA',							0xB8BC,'WWW');
 define_syscall('syscall_B8D5',							0xB8D5,'WWW');
 define_syscall('printString[BXY]',						0xB97B);
 define_syscall('lampFX[A]',							0xCC3A);
 define_syscall('syscall_C923',							0xC923,'B');
 define_syscall('setDMDanimation_playing[A]',			0xCAB0);
 define_syscall('A==DMDanimation_playing?',				0xCAB4);
 define_syscall('setDMDfunction[A]', 					0xCABD);
 define_syscall('A=lastDMDanimation_played??',			0xCADE);
 define_syscall('replay_last_DMDanimation??',			0xCAE2);
 define_syscall('syscall_D6BC',							0xD6BC,'WB');
 define_syscall('syscall_D730',							0xD730,'BBB');
 define_syscall('syscall_D77D',							0xD77D,'WBW');
 define_syscall('syscall_D799',							0xD799,'WBW');
 define_syscall('syscall_D7B4',							0xD7B4,'WBW');
 define_syscall('ISR_lampMatrix_MUX',	       			0xDAC6);
 define_syscall('IRQ_timer_handler??',					0xECCA);
 define_syscall('syscall_EF47',							0xEF47,'B');
 define_syscall('syscall_F647',							0xF647,'W');			
 define_syscall('NE=gameDisabled',						0xF759);
 define_syscall('wait4_Thread#0041_not_running',		0xF766);
 define_syscall('lastBall?',							0xF7EF,'');
 define_syscall('growJackpot[A]',						0xFA7D);
 define_syscall('addBonus_1130',						0xFAA8);
 define_syscall('addBonus_3330',						0xFAAE);
 define_syscall('addBonus_5530',						0xFAB4);
 define_syscall('addBonus_9930',						0xFABA);
 define_syscall('addBonus[A]',							0xFABE);
 define_syscall('syscall_FE3C',							0xFE3C,'S');
}

# non-global

if ($WPCV eq 'WPC(89)') {
	define_label('sys_tilt',							0x5921, 0x39);			# T2
}

#if ($WPCV eq 'WPC(alpha)') {
#	$VO = 1902;
#} elsif ($WPCV eq 'WPC(89)') {
#	$VO = 0;
#} else {
#	die("WPC.API: $WPCV not yet implemented\n");
#}
#define_syscall('sys_rotLeft_AB',						0x66F5+$VO, '', 3);
#define_syscall('sys_fill_AB',							0x6706+$VO, '', 3);

#define_syscall('A=MBD_ballsFound==all?',				0x7031+$VO, '', 3);	
#define_syscall('A=MBD_ballsLocked[A]==1?',				0x7041+$VO, '', 3);	
#define_syscall('A=MBD_lockEnabled[A]==1?',				0x704C+$VO, '', 3);	
#define_syscall('A=ballsInTrough-troughIdle?',			0x7057+$VO, '', 3);	
#define_syscall('A=MBD_ballsMissing-allFound?',			0x7065+$VO, '', 3);	# 77C8 + 1891

VERSION_OFFSETS(1916,0);
define_syscall('3B:BYU=MBD_dataRefs[A]', 	         	0x7076+$VO, '', 3); # 77F2 + 1916

#----------------------------------------------------------------------
# System Hooks
#	_override means that if CC (true) on return, the system default
#    		  code is NOT executed
#----------------------------------------------------------------------

$Hook[0] 		= 'MBD_resetBallAccounting??_override';
$Hook[1]		= 'debugger???';
$Hook[2]		= 'score_override';
$Hook[3]		= 'gameStart_override';
$Hook[4]		= 'gameStart_post_initBallEvent';
$Hook[5] 		= 'initBall_override';
$Hook[6]		= 'lastBall';
$Hook[7]		= 'gameOver_override';
$Hook[8]		= 'gameOver_complete';
$Hook[9]		= 'startButton_override_1';

$Hook[11]		= 'qualify_playfield';
$Hook[12]		= 'awardEB_override';
$Hook[13]		= 'ballServe_override';
$Hook[15]		= 'player_gameStart';
$Hook[16]		= 'prepare_nextBall';
$Hook[19]		= 'tilt_override';

$Hook[20]		= 'tiltWarning_override';
$Hook[28]		= 'startButton_override_2';

$Hook[45]		= 'endOfBall';
$Hook[46]		= 'gameStart_pre_initBallEvent';

$Hook[78]		= 'lampFX_override';

$Hook[91]		= 'IRQtimer';

#----------------------------------------------------------------------
# System Threads
#	Flags: 0800 	killed at ball start
#----------------------------------------------------------------------

$Thread[0x0004] = 'SYSTHD_Balltrough_handler';		
$Thread[0x0005] = 'SYSTHD_Diagnostics';		
$Thread[0x000B] = 'SYSTHD_initBall';		
$Thread[0x780D] = 'SYSTHD_OutholeKicker_busy';	
$Thread[0x780F] = 'SYSTHD_Balltrough_disabled';

$Thread[0x0012] = 'SYSTHD_tilt_unknown';

$Thread[0x007A] = 'SYSTHD_Playfield_qualified';
$Thread[0x787F] = 'SYSTHD_StartButton';

$Thread[0x2010] = 'SYSTHD_BallSearch';

$Thread[0x3813] = 'SYSTHD_bobTilt_swingDelay';				
$Thread[0x1814] = 'SYSTHD_bobTilt_switchDebounce';			

for (my($i)=0; $i<=0x0F; $i++) {
	$Thread[0x40+$i] = sprintf('SYSTHD_Lock#%02X_handler',$i);
}


#----------------------------------------------------------------------
# Game Adjustments
#----------------------------------------------------------------------

$Adj[0x81]		= 'AD_balls_per_game';						# Standard AD01
$Adj[0x82]		= 'AD_tilt_warnings';
$Adj[0x83]		= 'AD_ExtraBalls_max';
$Adj[0x84]		= 'AD_ExtraBalls_maxPerBallInPlay';
$Adj[0x85]		= 'AD_Replay_System';						# AD05
$Adj[0x86]		= 'AD_Replay_pct';
$Adj[0x87]		= 'AD_Replay_start';
$Adj[0x88]		= 'AD_Replay_levels';
$Adj[0x89]		= 'AD_Replay_level1';
$Adj[0x8A]		= 'AD_Replay_level2';						# AD10
$Adj[0x8B]		= 'AD_Replay_level3';
$Adj[0x8C]		= 'AD_Replay_level4';
$Adj[0x8D]		= 'AD_Replay_boost';
$Adj[0x8E]		= 'AD_Replay_award';
$Adj[0x8F]		= 'AD_Special_award';						# AD15
$Adj[0x90]		= 'AD_Match_award';
$Adj[0x91]		= 'AD_ExtraBall_ticket';
$Adj[0x92]		= 'AD_tickets_maxPerPlayer';
$Adj[0x93]		= 'AD_Match_feature';
$Adj[0x94]		= 'AD_custom_message';
$Adj[0x95]		= 'AD_language';
$Adj[0x96]		= 'AD_clock_style';
$Adj[0x97]		= 'AD_date_style';
$Adj[0x98]		= 'AD_show_dateTime';
$Adj[0x99]		= 'AD_GI_allowDimming';
$Adj[0x9A]		= 'AD_Tournament_play';
$Adj[0x9B]		= 'AD_screenFormat_European';
$Adj[0x9C]		= 'AD_SoundVolume_zero_alllowed';
$Adj[0x9D]		= 'AD_GI_powersaver';
$Adj[0x9E]		= 'AD_GI_powersaver_brightness';

#----------------------------------------------------------------------
# System Audits
#----------------------------------------------------------------------

#$Audit[0x8013] = 'AU_unknown8013';							# 8013 & 8014 updated together from startbutton
#$Audit[0x8014] = 'AU_unknown8014';
#$Audit[0x8016] = 'AU_';
#$Audit[0x8017] = 'AU_';

$Audit[0x801B] = 'AU_extraBalls';							# Standard Audit #13
$Audit[0x801D] = 'AU_minutesOn??';							# Standard Audit #22
$Audit[0x801E] = 'AU_totalPlays';							# Standard Audit #02
$Audit[0x801F] = 'AU_tilts';								# Standard Audit #24

$Audit[0x802B] = 'AU_left_drains';							# Standard Audit #17
$Audit[0x802C] = 'AU_right_drains';							# Standard Audit #18

#----------------------------------------------------------------------
# Scott Charles (from Dr. WHO)
#----------------------------------------------------------------------

$Error[0x01] = 'ERR_User_break_requested_by_key_press';
$Error[0x02] = 'ERR_LOCKED_CMOS_value_not_in_table';
$Error[0x03] = 'ERR_6809_reserved_vector_threaded';
$Error[0x04] = 'ERR_SWI3_caught';
$Error[0x05] = 'ERR_SWI2_caught';
$Error[0x06] = 'ERR_NMI_caught';
$Error[0x07] = 'ERR_stack_too_deep_for_sleep';
$Error[0x08] = 'ERR_Could_not_allocate_block_for_large_stack';
$Error[0x09] = 'ERR_free_block_invalid_argument_0';
$Error[0x0A] = 'ERR_Thread_not_on_list_expected';
$Error[0x0B] = 'ERR_Request_to_Free_Ram_Block_failed';
$Error[0x0C] = 'ERR_Exec_hook_called_utility_requiring_a_thread_id';
$Error[0x0D] = 'ERR_printf_String_too_long';
$Error[0x0E] = 'ERR_printf_bad_format';
$Error[0x0F] = 'ERR_Coil_queue_overflow';
$Error[0x10] = 'ERR_Bad_pound_clause_embedded_in_string';
$Error[0x11] = 'ERR_Message_number_passed_is_beyond_table';
$Error[0x12] = 'ERR_Head_or_Tail_of_coil_queue_out_of_range';
$Error[0x13] = 'ERR_GI_bit_from_bit_generator_is_bad';
$Error[0x14] = 'ERR_invalid_flash_time_0';
$Error[0x15] = 'ERR_GI_Number_out_of_range';
$Error[0x16] = 'ERR_invalid_bit_specifier';
$Error[0x17] = 'ERR_Lamp_table_invalid_or_not_in_prime_real_estate';
$Error[0x18] = 'ERR_Lamp_string_number_specified_is_too_high';
$Error[0x19] = 'ERR_End_Bracket_while_NOT_in_lamp_string_if_statement';
$Error[0x1A] = 'ERR_Lamp_string_operator_out_of_range';
$Error[0x1B] = 'ERR_Lamp_string_range_op_got_lamps_in_wrong_order';
$Error[0x1C] = 'ERR_endif_encountered_before_then_on_if_in_lamp_string';
$Error[0x1D] = 'ERR_Bitshifter_invalid_buffer_offset';
$Error[0x1E] = 'ERR_get_switch_bit_munged_its_parameters';
$Error[0x1F] = 'ERR_Switch_number_passed_to_switch_primitive_too_high';
$Error[0x20] = 'ERR_Cksum_init_call_to_region_that_is_not_Prime';
$Error[0x21] = 'ERR_long_binary_to_bcd_passed_0_length';
$Error[0x22] = 'ERR_Hook_indicated_by_U_in_apfixed_must_be_in_prime';
$Error[0x23] = 'ERR_Score_req._w_player_up_invalid_tilt_go_or_diag';
$Error[0x24] = 'ERR_Product_of_local_and_global_score_multipliers_exceeds_255';
$Error[0x25] = 'ERR_Thread_that_just_slept_wrote_to_1st_8_bytes_of_ram';
$Error[0x26] = 'ERR_Bad_score_multiplier_specified';
$Error[0x27] = 'ERR_Table_item_out_of_range_beyond_end_of_table';
$Error[0x28] = 'ERR_Printf_Bad_character_following_backslash';
$Error[0x29] = 'ERR_invalid_lamp_number_0';
$Error[0x2A] = 'ERR_Pointer_for_Printf_will_not_fit_in_16_bits';
$Error[0x2B] = 'ERR_Field_not_in_segment_area';
$Error[0x2C] = 'ERR_Attempt_to_store_bit_for_field_beyond_last_byte';
$Error[0x2D] = 'ERR_Invalid_time_stamp_passed_to_clock_time_stamp';
$Error[0x2E] = 'ERR_Thread_with_lampFX_number_has_no_lamp_block';
$Error[0x2F] = 'ERR_Bits_in_LF_and_LEFL_flags_must_be_in_same_position';
$Error[0x30] = 'ERR_LEF_FLASH_BYTES_not_large_enought_for_phys._flashers';
$Error[0x31] = 'ERR_Thread_has_P_LEFF_NUMBER_wo_valid_PID';
$Error[0x32] = 'ERR_invalid_flasher_0_in_lamp_effect';
$Error[0x33] = 'ERR_Lamp_effect_block_freed_instead_of_sys_lampFX_exit';
$Error[0x34] = 'ERR_User_field_request_by_proc_wo_that_field_defined';
$Error[0x35] = 'ERR_Invalid_software_field_number';
$Error[0x36] = 'ERR_Background_display_effect_header_invalid';
$Error[0x37] = 'ERR_sys_displayFX_check_called_for_background_display_effect';
$Error[0x38] = 'ERR_Player_up_number_invalid';
$Error[0x39] = 'ERR_Bad_or_Missing_Master_Scroll_block';
$Error[0x3A] = 'ERR_Master_block_required_for_setup_or_scroll_operation';
$Error[0x3B] = 'ERR_Cannot_locate_previously_setup_scroll_chunk';
$Error[0x3C] = 'ERR_Period_or_Comma_1st_char_or_after_#_use_space';
$Error[0x3D] = 'ERR_Display_scroller_running_with_no_source_type_set';
$Error[0x3E] = 'ERR_No_matrix_bit_set_for_lamp_effect._string_specified';
$Error[0x3F] = 'ERR_Addl._lamps_allocted_to_effect_specified_NEW_matrix';
$Error[0x40] = 'ERR_Software_field_flags_need_justification_bits';
$Error[0x41] = 'ERR_Bad_segment_area_specified_to_sys_copy_fixed_field';
$Error[0x42] = 'ERR_Dissolve_requested_but_background_displayFX_was_not_running';
$Error[0x43] = 'ERR_Invalid_scroll_chunk_pointer';
$Error[0x44] = 'ERR_Stackable_effect_has_flag_conflict_amode_etc.';
$Error[0x45] = 'ERR_Endball_called_from_game_over';
$Error[0x46] = 'ERR_Request_for_player_area_byte_out_of_range';
$Error[0x47] = 'ERR_Multiball_device_number_invalid';
$Error[0x48] = 'ERR_Too_many_multiball_devices_specified';
$Error[0x49] = 'ERR_Irq_Tail_hook_not_in_prime_real_estate';
$Error[0x4A] = 'ERR_No_thread_available_for_ball_serve';
$Error[0x4B] = 'ERR_invalid_Multiball_device_0';
$Error[0x4C] = 'ERR_Unmonitored_locked_hole_had_a_switch_closure';
$Error[0x4D] = 'ERR_Lock_count_on_eject_hole_was_higher_than_1';
$Error[0x4E] = 'ERR_Call_to_trough_handler_for_endball_returned';
$Error[0x4F] = 'ERR_Call_to_trough_handler_for_ball_serve_returned';
$Error[0x50] = 'ERR_audit_complete_called_by_invalid_thread_id';
$Error[0x51] = 'ERR_Could_not_get_thread_block_for_mulitball_device_kickout';
$Error[0x52] = 'ERR_Device_type_number_invalid_for_multiball_device';
$Error[0x53] = 'ERR_Ball_serve_condition_w_no_balls_in_trough_you_must_kick_one';
$Error[0x54] = 'ERR_MULTI_ALL_BALL_CHECK_called_while_auditing_in_progress';
$Error[0x55] = 'ERR_Quick_lampFX_resource_req._by_non-lampFX_thread';
$Error[0x56] = 'ERR_Non-display_effect_called_sys_displayFX_exit';
$Error[0x57] = 'ERR_Non-lamp_effect_called_sys_lampFX_exit';
$Error[0x58] = 'ERR_Effect_stack_pointer_invalid';
$Error[0x59] = 'ERR_Bad_sound_table_entry_or_too_many_sound_table_entries';
$Error[0x5A] = 'ERR_Bad_sound_script_operator';
$Error[0x5B] = 'ERR_Whirl_field_passed_an_invalid_quadrant_number';
$Error[0x5C] = 'ERR_Cmos_ram_left_unprotected_sys_lock_cmos_forgotten';
$Error[0x5D] = 'ERR_HSTD_Table_would_not_initialize_Check_Default_Table';
$Error[0x5E] = 'ERR_HSTD_entry_requested_out_of_range';
$Error[0x5F] = 'ERR_Display_field_too_small_for_get_let';
$Error[0x60] = 'ERR_Internal_error_in_GET_LET_threading';
$Error[0x61] = 'ERR_Higher_priority_displayFX_stopped_Enter_your_Initials';
$Error[0x62] = 'ERR_LARGEST_HSTD_TABLE_value_not_large_enough';
$Error[0x63] = 'ERR_def_status_MUST_HAVE_DEF_EQMAY_set';
$Error[0x64] = 'ERR_Could_not_allocate_block_for_test_mode';
$Error[0x65] = 'ERR_Audit_formatting_number_invalid';
$Error[0x66] = 'ERR_adj_name_it_must_specify_TRUE_in_adj_table';
$Error[0x67] = 'ERR_Thread_dispatcher_got_a_non-thread_block_to_dispatch';
$Error[0x68] = 'ERR_Bad_special_help_routine_requested';
$Error[0x69] = 'ERR_Thread_terminated_by_RTS';
$Error[0x6A] = 'ERR_Too_many_audits_for_TOTAL_AUDITS_value_specified';
$Error[0x6B] = 'ERR_Test_report_lost_phasing_w_help_sequencer';
$Error[0x6C] = 'ERR_Too_many_adjustments_for_ADJ_TOTAL_value';
$Error[0x6D] = 'ERR_Exec_routine_called_sys_get_block';
$Error[0x6E] = 'ERR_User_menu_descriptors_out_of_order';
$Error[0x6F] = 'ERR_Copied_string_too_long_for_thread_block';
$Error[0x70] = 'ERR_Display_Req._from_display_effect_routine';
$Error[0x71] = 'ERR_Sleep_called_from_EXEC_routine';
$Error[0x72] = 'ERR_Switch_hit_reported_on_switch_in_non-scanned_column';
$Error[0x73] = 'ERR_Invalid_audit_RAM';
$Error[0x74] = 'ERR_Exec_level_routine_locked_up_Detected_by_IRQ';
$Error[0x75] = 'ERR_ad_replay_start_value_is_not_within_minmax_range';
$Error[0x76] = 'ERR_Switch_test_could_not_allocate_a_ram_block';
$Error[0x77] = 'ERR_Ram_byte_ticket_to_dispense_got_corrupted';
$Error[0x78] = 'ERR_Units_not_tens_added_to_score';
$Error[0x79] = 'ERR_Current_thread_stack_overflow';
$Error[0x7A] = 'ERR_Current_thread_stack_underflow';
$Error[0x7B] = 'ERR_DMX_page_allocator_failed';

#----------------------------------------------------------------------';

1;

