#======================================================================
#                    C 7 1 1 . S Y S T E M 7 
#                    doc: Mon Jun  2 09:55:01 2025
#                    dlm: Mon Jul 14 14:19:52 2025
#                    (c) 2025 idealjoker@mailbox.org
#                    uE-Info: 13 49 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	Jun  2, 2025: - created
#	Jun  6, 2025: - BUG: rom_addr() returned 0 on empty args
#	Jul  3, 2025: - added compilation_magic()
#	Jul 14, 2025: - BUG: compile_pragma() missing
# HISTORY END

use strict vars;

our(%SYSCALL,@SC_ADDR,@SC_ARGS,@SC_NOTE,$ADDR);

#----------------------------------------------------------------------
# Compilation Magic
#----------------------------------------------------------------------

sub compilation_magic() {}


#----------------------------------------------------------------------
# Structured Programming
#----------------------------------------------------------------------

sub unroll_structure()
{
	unroll_asm_structure();													# in [C711.M6800]
	unroll_wvm_structure();													# in [C711.VM]
}

#----------------------------------------------------------------------
# Macro Support
#----------------------------------------------------------------------

sub asm_macros()
{
	my($retval) = asm_6800_macros();
	return $retval if $retval;
    return asm_wvm_macros();
}

#----------------------------------------------------------------------
# System Calls
#----------------------------------------------------------------------

sub define_syscall($$@)
{
	die("define_syscall() not implemented for Sytstem 6");
}

#----------------------------------------------------------------------
# ROM to CPU Address Mapping
#----------------------------------------------------------------------

sub code_addr(@)															# ROM addr = CPU addr
{
	my($ROM_addr) = @_;
	$ROM_addr = $ADDR unless (@_);
##	print(STDERR "code_addr(@_) -> $ROM_addr\n");
	return $ROM_addr;
}

#----------------------------------------------------------------------
# Compiler Pragmas
#----------------------------------------------------------------------

sub compile_pragma()
{
	our($OP,@OP_ARG);
    return undef unless ($OP =~ m{^\.});
	return 1 if compile_common_pragma();

	our($MODE,@ROM,$MIN_ROM_ADDR,$MAX_ROM_ADDR,$opt_v,$opt_t,$opt_1,@LINE,$FIRST_ADDR);

	#-----------------------------------------------------------
	# Address Management
	# 	- do not move this to the beginning of the routine
	#-----------------------------------------------------------

	if ($OP eq '.ORG') {																	# .ORG
		$ADDR = $OP_ARG[0];
		if ($ADDR =~ m{^([\$%]?)([0-9A-Fa-f]+)$}) {
			die("Syntax: .ORG ROM-addr (<@_> at input line $.)\n")
				unless defined($2);
	   if ($1 eq '$') { $ADDR = hex($2); }										  # decimalize
			elsif ($1 eq '%') { $ADDR = eval('0b' . $2); }
			else			  { $ADDR = $2; }
			die("Cannot decode number <$OP_ARG[0]> at input line $.\n")
				unless numberp($ADDR);
			die(sprintf(".ORG address \$%04X out of range [\$%04X-\$%04X] at input line $.\n",$ADDR,$MIN_ROM_ADDR,$MAX_ROM_ADDR))
				unless ($ADDR >= $MIN_ROM_ADDR && $ADDR <= $MAX_ROM_ADDR);
		} else {
			die("Syntax: .ORG ROM-addr (<@_> at input line $.)\n");
		}

		$FIRST_ADDR = $ADDR if ($ADDR < $FIRST_ADDR);

		if (defined($ROM[$ADDR])) {
			my($nBytes) = 0;
			while (defined($ROM[$ADDR + ++$nBytes])) {}
			if ($opt_v || $opt_t) {
				printf(STDERR "%5d: WARNING: ROM overflow (<.ORG \$%04X>) at input line $.\n",$LINE[$ADDR],$ADDR);
			} else {
				die(sprintf("ROM overflow ($nBytes bytes; <.ORG \$%04X> replacing $ROM[$ADDR]) at input line $.\n",$ADDR))
					unless $opt_1;
			}
		}
		return 1;
	}

	die("Unknown mode-$MODE .PRAGMA <@_> on line $.\n");
}

1; 

