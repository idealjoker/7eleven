#!/usr/bin/perl
#======================================================================
#					 . / D I S A S S E M B L E _ S 1 1 
#					 doc: Wed May  7 09:51:43 2025
#					 dlm: Mon May 12 17:44:26 2025
#					 (c) 2019 idealjoker@mailbox.org
#					 uE-Info: 6 52 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#	May  7, 2025: - created
#				  - BUG: use lib had path hard-coded
#				  - changed usage for consistency with disassemble_s6
#	May  9, 2025: - added MAX_SWITCH, MAX_PLAYER and table pointers
#				  - added ROM_TEST_BLOCKS
#				  - added defSwitch() and defLamp()
#	May 11, 2025: - fiddled
# HISTORY END

#----------------------------------------------------------------------
# Load Prerequisites
#----------------------------------------------------------------------

use lib '.';																# add current directory to path
use lib ($0 =~ m@/[^/]*$@,$`);												# add 7eleven installation dir to path
use D711 (11);																# load WMS System 11 disassembler

#----------------------------------------------------------------------
# Usage
#----------------------------------------------------------------------

use Getopt::Std;

die("Usage:\n\t$0\n\t\t[dump -l)abels] [-u)se <label-file>]\n\t\t" .
			"[-i)nclude <file[,...]>\n\t\t" .
			"[suppress code-s)tructure analysis]\n\t\t" .
			"[suppress -a)ddresses in output] [include -c)ode in output]\n\t\t" . 
			"[include -g)ap data in output]\n\t\t" .
			"<U26 ROM image> <U27 ROM image>\n")
	unless &getopts('acgh:i:ls') && @ARGV==2;

$D711::print_addrs	= !$opt_a;												# -a) suppress hex addresses in output
$D711::print_code	=  $opt_c;												# -c) include code bytes in output
$D711::fill_gaps	=  $opt_g;

if (defined($opt_i)) {														# include files with perl code
	my(@linc) = split(',',$opt_i);
	while (@linc) {
		require './' . shift(@linc);
	}	
}

#----------------------------------------------------------------------
# Load Code
#----------------------------------------------------------------------

&D711::load_ROM($ARGV[0],0x4000); 										# load ROM images
die("ic26.128: invalid size\n") unless ($D711::MAX_ROM_ADDR == 0x7FFF);
&D711::load_ROM($ARGV[1],0x8000);
die("ic27.256: invalid size\n") unless ($D711::MAX_ROM_ADDR == 0xFFFF);

#----------------------------------------------------------------------
# Find Switch Table
#----------------------------------------------------------------------

my($nSwFound,$switch_table_addr,$table_ptr_addr);
for (my($addr)=$D711::MIN_ROM_ADDR; $addr<$D711::MAX_ROM_ADDR; $addr++) {
	next unless (D711::BYTE($addr)==3 &&
		 		 D711::BYTE($addr-1)>=48 && D711::BYTE($addr-1)<=64 &&
		 		 D711::WORD($addr+1)>=$D711::MIN_ROM_ADDR && D711::WORD($addr+1)<$D711::MAX_ROM_ADDR &&
		 		 D711::WORD($addr+3)>=$D711::MIN_ROM_ADDR && D711::WORD($addr+3)<$D711::MAX_ROM_ADDR &&
		 		 D711::WORD($addr+5)>=$D711::MIN_ROM_ADDR && D711::WORD($addr+5)<$D711::MAX_ROM_ADDR);
##	printf(STDERR "Switch Table candidate at %04X\n",D711::WORD($addr+3));
	my($len);
	for ($len=0; D711::WORD(D711::WORD($addr+3)+1+3*$len)>=$D711::MIN_ROM_ADDR &&
				 D711::WORD(D711::WORD($addr+3)+1+3*$len)!=0xFFFF && 
				 D711::WORD(D711::WORD($addr+3)+1+3*$len)<=$D711::MAX_ROM_ADDR; $len++) {}
	unless ($nSwFound > $len) {
		$nSwFound = $len;
		$switch_table_addr = D711::WORD($addr+3);
		$table_ptr_addr = $addr+3;
	}
}

if ($nSwFound > 42) {
##	printf(STDERR "Switch Table found at %04X ($nSwFound entires)\n",$switch_table_addr);
} else {
	die(sprintf("Switch Table not found (best candidate at %04X ($nSwFound entires)\n",$switch_table_addr));
}


#----------------------------------------------------------------------
# Find ROM_checksum_test
#----------------------------------------------------------------------

if (0) {
my($nFound,$RTB_addr);
for (my($addr)=$D711::MIN_ROM_ADDR; $addr<$D711::MAX_ROM_ADDR; $addr++) {
##	next unless (D711::BYTE($addr)==0xC6 &&
##				 D711::BYTE($addr+1)==0x0A && D711::BYTE($addr+2)==0x40 &&
##				 D711::BYTE($addr+3)==0xBB);
#	next unless (D711::BYTE($addr)==0xD6 &&
#				 D711::BYTE($addr+2)==0xC0 && D711::BYTE($addr+3)==0x10 &&
#				 D711::BYTE($addr+4)==0xD7);				 
###	next unless (D711::BYTE($addr)==0xB6 &&										# LDAA ROM_TEST_BLOCKS
###		 		 D711::BYTE($addr+3)==0xCE && D711::WORD($addr+4)==0xFFFF); # &&	# LDX #$FFFF
##		 		 D711::BYTE($addr+6)==0xDF &&									# STX __tmp1
##		 		 D711::BYTE($addr+8)==0x4A); # &&								# DECA
##		 		 D711::BYTE($addr+9)==0x2B && D711::BYTE($addr+10)==0x21);		# IF_PL
	$nFound++;
	$RTB_addr = D711::WORD($addr+1);
}
		 		 
if ($nFound != 1) {
	printf(STDERR "WARNING: cannot find ROM_TEST_BLOCKS (nFound = $nFound)\n");
	undef($RTB_addr);
}
}

#----------------------------------------------------------------------
# Code Disassembly
#----------------------------------------------------------------------

$D711::Address = $table_ptr_addr - 4;
	D711::def_byte_dec('MAX_SWITCH');
	D711::def_byte_dec('MAX_PLAYER');
	D711::def_word_hex('^BITGROUP_TABLE');
	D711::def_switchtable_ptr($nSwFound,'^SWITCH_TABLE','switch_table');
	D711::def_word_hex('^SOUND_TABLE');

#if (defined($RTB_addr)) {
#	$D711::Address = $RTB_addr;
#	D711::def_byte_dec('ROM_TEST_BLOCKS');
#}

# The following works with Pinbot, Bad Cats and Rollergames, but not Radical
$D711::Address = $table_ptr_addr - 5;
#if (D711::BYTE($D711::Address)==0x00	||									# DISPLAY_TYPE (Sys 11BC)
#	D711::BYTE($D711::Address)==0xAA) {
if (D711::BYTE($D711::Address) != 12)	{									# DISPLAY_TYPE (Sys 11BC)
		D711::def_byte_hex('DISPLAY_TYPE');
		$D711::Address = $table_ptr_addr - 6;
}
if (D711::BYTE($D711::Address) == 12) {										# ROM_TEST_BLOCKS
	D711::def_byte_dec('ROM_TEST_BLOCKS');									# all sys 11 games have 48KB ROM
} else {
	print(STDERR "WARNING: location of ROM_TEST_BLOCKS unknown\n");
}
	
##my($nFound,$RTB_addr);
##for (my($addr)=$D711::MIN_ROM_ADDR; $addr<$D711::MAX_ROM_ADDR; $addr++) {
##	next unless (D711::BYTE($addr)==0xB6 &&
##				 D711::WORD($addr+1)==
##				 D711::BYTE($addr+3)==0xBB);
##
##	$nFound++;
##	$RTB_addr = D711::WORD($addr+1);
##}
##		 		 
##if ($nFound != 1) {
##	printf(STDERR "WARNING: cannot find ROM_TEST_BLOCKS (nFound = $nFound)\n");
##	undef($RTB_addr);
##}

#----------------------------------------------------------------------
# Fix String Tables
#----------------------------------------------------------------------

&D711::trim_overlapping_strings();
&D711::grow_strings(16);

#----------------------------------------------------------------------
# Make Human Readable
#----------------------------------------------------------------------

&D711::disassemble_unfollowed_labels();										# left overs
&D711::process_code_structure(0x0800,0xFFFF) unless ($opt_s);				# if, while, ...
&D711::substitute_labels(); 												# resolve labels
&D711::substitute_identifiers();											# rename game-specific ids

#----------------------------------------------------------------------
# Produce Output
#----------------------------------------------------------------------

if ($opt_l) {																# dump label information
	&D711::dump_labels(1);													# fmt == 1 generates code that can be used with -u
	exit(0);																# to make a disassembled file with all labels defined up-front
}

unless (-t 1) { 															# produce code output on STDOUT
	&D711::produce_output(0x4000,0xFFFF);
}

exit(0);

#======================================================================
# Utilities
#======================================================================

sub defSwitch($$)
{
	my($no,$name) = @_;

	die("defSwitch: invalid switch number $no\n")
		unless ($no>=1 && $no<65);
	$D711::Switch[$no-1] = $name;
}

sub defLamp($$)
{
	my($no,$name) = @_;

	die("defLamp: invalid lamp number $no\n")
		unless ($no>=1 && $no<65);
	$D711::Lamp[$no-1] = $name;
}



