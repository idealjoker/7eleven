#!/usr/bin/perl
#======================================================================
#					 D I S A S S E M B L E _ W P C 
#					 doc: Fri Mar 14 17:24:34 2025
#					 dlm: Sat Apr  5 08:46:14 2025
#					 (c) 2024 idealjoker@mailbox.org
#					 uE-Info: 18 73 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# WMS WPC Game Disassembly Instructions

# HISTORY:
#	Mar 14, 2025: - created from [disassemble_WPC_DMD]
#	Mar 18, 2025: - enabled disassemble_sycalls()
#	Mar 19, 2025: - adapted to free space autodection
#	Mar 25, 2025: - added -o
#				  - merged with [disassemble_WPC_DMD] and renamed
#	Apr  5, 2025: - BUG: start_page was not set correctly for Alpha games
# END OF HISTORY

#----------------------------------------------------------------------
# Usage
#----------------------------------------------------------------------

use Getopt::Std;

die("Usage:\t$0\n\t\t" .
			"[-i)nclude <file[,...]>\n\t\t" .
			"[include -a)ddressses in output] [include -c)ode bytes]\n\t\t" . 
			"[suppress -g)ap data (readability)]\n\t\t" . 
			"[suppress code-s)tructure analysis (debugging)]\n\t\t" .
			"[output -L)abel table]\n\t\t" .
			"[output -l)abel definitions]\n\t\t" .
			"[output -o)bject data <PG|FF>]\n\t\t" .
			"<Alphanumeric|DMD> <ROM image>\n")
	unless &getopts('acgi:lLo:Qs') && @ARGV==2;

use lib ($0 =~ m@/[^/]*$@,$`);												# load [D711.pm]

my($lbl) = 'Alphanumeric';
if ($lbl =~ m{^$ARGV[0]}) {
	eval "use D711 ('WPC(Alphanumeric)','\$opt_Q = $opt_l;')";				# suppress D711 splash message during label generation
} else {
	eval "use D711 ('WPC(DMD)','\$opt_Q = $opt_l;')";
}

shift;

$D711::print_addrs	=  $opt_a;												# -a) include hex addresses in output
$D711::print_code	=  $opt_c;												# -c) include code bytes in output
$D711::fill_gaps	= !$opt_g;												# -g) exclude gap data

#----------------------------------------------------------------------
# Load ROM
#----------------------------------------------------------------------

$D711::start_page = ($D711::WMS_System eq 'WPC(Alphanumeric)') ? 0x30 : 0x20;
&D711::load_ROM($ARGV[0],0x4000,$D711::start_page,16);						# Load ROM: first game page (256KB ROM)
&D711::load_ROM($ARGV[0],0x8000,0x3E,32);									# Load ROM: System pages

#----------------------------------------------------------------------
# Disassemble ROM
#----------------------------------------------------------------------

&D711::init_WPC(split(',',$opt_i));											# load API & -i args
$D711::verbose = !$opt_l;													# suppress disassembly abort output on -l (allLbls)
&D711::disassemble_MBD_system();											# used to find offset, then edited [WPC.API]
&D711::disassemble_syscalls();
&D711::disassemble_CPU_vectors();
&D711::disassemble_system_pointers();
&D711::disassemble_switch_tables();

#----------------------------------------------------------------------
# Make Human Readable
#----------------------------------------------------------------------

&D711::process_code_structure(0x8000,0xFFFF)								# if, while, ...
	unless ($opt_s);
&D711::substitute_labels(0x8000,0xFFFF); 									# resolve labels
&D711::substitute_identifiers(0x8000,0xFFFF);								# rename game-specific ids
&D711::apply_magic_WPC(0x8000,0xFFFF); 		 	                            # e.g. &skip

for (my($rpg)=$D711::start_page; $rpg<0x3E; $rpg++) {
	&D711::select_WPC_RPG($rpg,20);
	&D711::process_code_structure(0x4000,0x7FFF)							# if, while, ...
		unless ($opt_s);
	&D711::substitute_labels(0x4000,0x7FFF); 								# resolve labels
	&D711::substitute_identifiers(0x4000,0x7FFF);							# rename game-specific ids
	&D711::apply_magic_WPC(0x4000,0x7FFF); 									# e.g. &skip
}

#----------------------------------------------------------------------
# Produce Output
#----------------------------------------------------------------------

if ($opt_L) {																# dump label information
	&D711::dump_labels(0);													# fmt == 1 generates code that can be used with -u
	exit(0);																# to make a disassembled file with all labels defined up-front
}

if ($opt_l) {																# dump label information
	&D711::dump_labels(1);													# fmt == 1 generates code that can be used with -u
	exit(0);																# to make a disassembled file with all labels defined up-front
}

if (defined($opt_o)) {														# dump obj information from single page (or FF for prime real estate)
	if ($opt_o eq 'FF') {
		D711::produce_obj(0x8000,0xFFFF);
	} else {
		die("$0: invalid page id -o $opt_o\n")
			unless (hex($opt_o)>=$D711::start_page && hex($opt_o)<=0x3D);
		D711::select_WPC_RPG(hex($opt_o));
		D711::produce_obj(0x4000,0x7FFF);
	}
	exit(0);
}
		
#------------------------------
# Default C711 Source Output
#------------------------------

&D711::select_WPC_RPG($D711::start_page,21);								# 1st game pg with headers
my($decoded) = &D711::produce_output(0x4000,0x7FFF,1);
for (my($rpg)=$D711::start_page+1; $rpg<0x3E; $rpg++) {						# remaining game pages without headers
	&D711::select_WPC_RPG($rpg,22);		
	$decoded += &D711::produce_output(0x4000,0x7FFF,0);
}
$D711::_cur_RPG = 0xFF;														# allow free space to be found in system code
$decoded += &D711::produce_output(0x8000,0xFFFF,0);							# WPC System

printf("; %.1f KB decoded\n",$decoded/1024);
printf("; %.1f KB free\n",$D711::freeBytes/1024)
	if ($D711::freeBytes);

exit(0);

